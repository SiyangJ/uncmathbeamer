%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: UNC_logo_542 cmyk.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Design Services%%CreationDate: 2/12/07%%BoundingBox: 0 0 264 73%%HiResBoundingBox: 0 0 263.0430 72.3555%%CropBox: 0 0 263.0430 72.3555%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-02-12T11:26:14-05:00</xap:CreateDate>
         <xap:ModifyDate>2007-02-12T11:26:14-05:00</xap:ModifyDate>
         <xap:MetadataDate>2007-02-12T11:26:14-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>72</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgASAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qsnuILeJpp5FhiTdp&#xA;JGCqPmTthAJNBBIG5SC6/MPyTbMVk1i3Yjr6RMo++MMMyY6LKf4S48tZiH8QVLLz55OvGCQavbcj&#xA;0WR/SJ+XqccEtJljziUx1WKXKQT5WDAMpqDuCOhGYzkOxV2KuxVLdJ/3v1r/AJjE/wCoO3y3J9Mf&#xA;d/vi1Y+cvf8AoCZZU2uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrZf&#xA;V9J/SCmXifTDEheVNqkVNK4R5oLzLzF5T0u/uGm82eb0+sL0tY2ihji/yUiZnP00qe+bbDqJRFYs&#xA;ezq82njI3kyMG13yx5Ngid9J8zRXEqgkW80Ug5ewlRStfmPpzYYs+U/VCnAy4MQ+mbEczXCZH5U8&#xA;+6/5cmUW0xmsa/vbGUkxkd+P8h91+muYuo0kMo3597lafVzxHbl3PoDy75h03X9Lj1GwflE/wuh2&#xA;eNx9pGHiM5rNhljlwyeiw5o5I8QTPKm12KpbpP8AvfrX/MYn/UHb5bk+mPu/3xasfOXv/QEyyptU&#xA;L+8isbG5vZQzRWsTzSKgqxWNSxCjapoNslCPEQB1YzlwgnuYw35k2S3tzZPpGpLc2cX1i7jMdvWO&#xA;KgPNqTdKMMy/yJoHijR2HP8AU4v50WRwyse79aZar5ttdN1yx0aWzuZbnUP95pIhEYzT7VS0iMOP&#xA;U/D8q5Vj0xlAzsVH3/qbMmoEZiNGz7v1taV5ttdS1y+0eKyuorjTv96ppVi9Fan4BySRz8Y3XbHJ&#xA;pjCAmSKl+O5ceoEpmNG4pePzGszcX8CaRqUkmlsEvgkcD+mWJA+zMS1eJ+zXLfyRoHij6uXP9TX+&#xA;cFkcMvTz5frZbmE5jGNL8+WmpW+pzW+mX6jSai6SVIUbmp+NFrLTkoBJBP40zLyaQxMQZR9XLn+p&#xA;xcerEgSBL0+79atqXnWy07y5b6/c2V2LO44ERqITKiyf3bOPV40bboxO+9MENKZZDAEWPf8AqTPU&#xA;iMBMg0fd+tfD5x064l0tbOCe7h1YE29zCIzGhXdxLV1dSg+18P44DppASsgcKRqInhoE8Tdt5vtL&#xA;jzRN5cWzulvbdDLLMyxCERgCjg+pyIJYAUXqfnglpiMYyWKKjUA5OCjaCj/MOwebVYDpt6kuixmW&#xA;+RxbqVVevH998W3xbbU+ith0Uqibj6uXP9TAawXIUfTz5frVNT8+Wmm2WnXd1pl8qaoQlvGFgLh2&#xA;PwI6+tsWG/66HbBj0hkSBKPp9/6kz1QiASJer3frTGx15ryxurlNNu45rSQxNZSrEszkKrVT94Yy&#xA;KP8Az9jlU8PCQLG/Xp9zbHLxAmjt0/BSew/MrRrwaa/1S8gt9WmNtZ3Eqw8DKGC8WCSu6/Ee65fP&#xA;Qzje4uIs8/1NENbGVbGpGh+LRuseddO0zVTpX1a4u71bc3TRW4ir6YJ6erJEXbavFKnK8WllOPFY&#xA;Aut/7GeTUxjLhok1btf862Girp7T2l3OupkLbGBIyA7U4o/qPHxY8scOllkuiPSuXUiFWD6lvmDz&#xA;tZ6H6zXNheTQ20cUt1PAkRSP13KIrF5Eq1R+zXDh0pyciN/0fBc2qGPmDt+O9Z/jm3Gm3N+dK1AJ&#xA;aLHJLD6cJl9GVSyygCUgoAu+9R4Yfyh4hHijv7/lyR+aHCZcMtvd+t1h570/UE0prKzupzqwlaFF&#xA;9CsawNxdpv3vwgde/h12xnpJR4rI9Pv692yw1UZcNA+r3dO/dkuYjlOxV2KvP/O+neZJrpmkaW9s&#xA;53ZbPTLe4FnbqiKPiupjxZy56JUD3zZ6SeMDuI5kiz8A67VQmT3joLofEpHL5a1HR7W31K6OkaRp&#xA;RKC4ktrNr2eOteShpI7qvT7RalcvGeMyYjjlLzND9DQcMoASPDGPkLP6U58ueX9W1WEX9p5umfSJ&#xA;ZGCC1tFtXdUJAozKtOJ/yCMoz5owPCcY4vM3+Pm3YcUpjiGQ8PkK/HyQvmfRdd0W2N5eebeVuzcE&#xA;+t6etwAOqiRlWb/gio3yeDLDIaGPfylX6mOfHOAs5NvON/rYfqq6hBpsOqahomm6po9ySItStYZL&#xA;QmjFd/S+ruu425x7++Z2PhMuGMpRkOhN/r+9wsnEI8UoxlE9Rt+r7mZflNpLIp1rSmkt9JvecN3p&#xA;903Ng8VOEsMiqocciV3Ud+uYPaOT+CW8hyI/S5vZ+P8AijtE9D+h6Xmpdo7FUt0n/e/Wv+YxP+oO&#xA;3y3J9Mfd/vi1Y+cvf+gJllTa7FWIaZoOvQ/mBqGvTwQrYXsAtxxm5OojC8X48BXkY+ldq5nZM0Dg&#xA;EAdwb5OHDFMZjMjYilPzb5V1PWPNOj3q28Uum2AYXCvM0buJDQ0Cr+zSvXfDptRGGOQv1HyRqMEp&#xA;5ImvSF3k3y1q2jeYdbuJbeGLTtSZGt/TlZ2QQlggIZankr1O+2DVZ45IRAJ4o/pXTYZQnIkbS/Qk&#xA;Z8keYW1jWNSm063ne+njubJfrskaxSQsWUyKqUkFSKg/R1rmR+ahwxiCdhR2/FNH5WfFKRA3Njd6&#xA;XH6npr6lPUoOfHpypvTNUXZhg0Pl7zZpl1r9tY29rd2WuzzXEd1JM0RgM4IbmgRy9K7cf9rYHNim&#xA;IEkgwHdzpwRhyQMgACJnv5Wm+s6JqP6C0rTbCKO6NjNZvIZX9IMloyN/K/2+FMpxZY8cpS2u/tbs&#xA;uKXBGI3qvsS7S/IEmjecE1HTZuOiOJZHsWJ/dTSLxrGOnE/h92WZNZx4uGX197Vj0nBk4o/T3eav&#xA;ZaDrsX5i3evSQwjTri2+qKVlJkAXgwcrx7mOlK7VyMs0DgEL9QNso4pjOZ/w1Sl5i8jT6j5ttNTt&#xA;5BHYXMYh1yKtPVjhZZI1p35lArewyWHViOIxPMfSjNpTLIJDkfqX/mH5c1nXV02KwhieK0uFuZWk&#xA;maInjtwHFSRX+au2DRZ4Y+IyPMVyXWYZZKrobRnlvTdV0mwv4Y7CGFDKZrK1Fy8pZnFX9SZ1r9rp&#xA;8P35XnnGcgb95r9DZhhKAIr3b/pYVon5c+btM/Rt2otprrS5mZbSad5IJEkJJZAyERSKe69dj1G+&#xA;fl1uKdjepDnW/wC0ODi0eSFHa49L2/YnPnbyjrWvyequn2/1v0oPqd4twY5LaQEmVWIT96lfs9x2&#xA;yjS6mGPazW9iufd7m7VaeWToL2o3y/WivN/lnzHqVpoEFr6VzJpksVxdzzSFDJJEoG3wt9vc1yOm&#xA;z44mZO3FyZ6jBOQiBvwpn590jVNa8sXGl2EcZnujGHaSTgqBJFkJ2VuX2KZTo8kceQSlyDbq8cp4&#xA;zEdU30aG5h0m0gu41jniiWORFbmtUHHZqLWtK9MpykGRI5N2MERALF/IflS/0TVNXuLmyt7eG+kL&#xA;2voymQxR8ifRAKrtv28My9XqI5IxAJNc/wBbiaXTnHKRIAv8UzTMBznYq7FXn353Ih8owuUUuLuN&#xA;VcgFgCjk8SdxXiOmbPso/vT7nXdp/wB38UFrEccf5FxrGoVTbWrEAUFWuY2Y/STXJ4zes+J+5ryD&#xA;/BPgPvDJfyuAHkPSafySf8nnzF1/99L8dHK0P9zH8dUt/Oj/AJQtv+YmL/jbLey/734NfaX918Ut&#xA;12ONvyPgdkVmjtrRoyyhirGVEJWvQ8WIrluI/wCFn3n7mnKP8EHuCfflKiL5B00qoBczs5ApU/WJ&#xA;BU/QAMxu0T++l8Pucjs/+5Hx+9l+YTmuxVLdJ/3v1r/mMT/qDt8tyfTH3f74tWPnL3/oCZZU2uxV&#xA;2Kpfp+v6TqNzNb2U/rSQVLkI4QgMUJRyoRxyUiqk5bPDKIshrhljI0EaJoTKYhIplG5jqOQHy65X&#xA;R5s7Do54ZSwjkVyv2gpBp86YkEKCC0l1bSSvDHKjyp9uNWBZe24G4xMSBaiQWS31jCSstxFGwIBD&#xA;uqmp6Dc4RAnkEGQHVUeeCOMSPIqRmlHYgKa9Nz44ACUkhYt9ZM6otxGzsaKodSSetAK4eA9yOId7&#xA;f1u15MvrJySvNeQqOPWu/bHhPcniC6KeGUExSLIB1KkNT7sBBHNQQVzuiKWdgqjqxNAMACVkNxbz&#xA;rzglSVSKhkYMKH3GExI5oBB5OiubeV5EilSR4jxlVWDFT4MB0xMSOaggrJL+xibjLcRI1ePFnUGv&#xA;hucIhI9EGQHVXBBAINQdwRkWSlDdWs5YQTJKU2YIwah96HCYkc0CQPJsXVsZPSEqGStOHIcqj2x4&#xA;TzXiDpbi3ioJZUjJ6cmC1+/ERJ5KSA208CuqNIod/sqWAJr4DGithwnhMpiEi+qOsdRy8enXGjVr&#xA;YaS5tpJnhSVHmj/vI1YFlr05AbjExIFqJDkwP87v+UPi/wCYyL/iEmbHsr+9+H6nX9p/3XxQmt/+&#xA;SNj/AOYWz/5PxZZi/wAc+J+4sMv+KfAfeGRflf8A8oHpP+pJ/wAnnzF1/wDfS/HRydD/AHMUr/Ot&#xA;+Pk0LSvO7iX5fC7fwy3ssfvfg1dpn918UDrf/kjY/wDmFs/+T8WW4v8AHPifuLXl/wAU+A+8J9+U&#xA;/wDygGlf89/+omTMbtH++l8PuDkdn/3Mfj95ZbmE5jsVS3Sf979a/wCYxP8AqDt8tyfTH3f74tWP&#xA;nL3/AKAmWVNqhqF01pYXN0sZla3ieURL1YopbiPnTJQjxSA72M5UCXm2l+ZfMV3p+q6pJqLy2C6O&#xA;1xI8aRqkF+xJWCI8T9mMANWp333za5MEIyjGt+P5x73WY88zGUr24L9x7mZ+RdNOneUtLty7OTbp&#xA;KwanwtKodlFANgzHMDVz4ssj5ubpYcOOI8mH+a9KGp+ep5tCvorbzDp9lBNAiMgM0qvL6kUgG5b0&#xA;uHXtQHbM7T5ODCBMXAk/o/S4efHxZiYGpgD9KH0uTUrzyL5sv9Osf0frM93wmggUpIoijh9VFAAb&#xA;o0hA67+OSyCMc2OMjcQP11+hjAylimYipX+r9qhqg0S70Dyv/hcRDzDHNAES2AFwgVD6/r8fiADj&#xA;4i/z6ZLHxxnPxPo358vKmOTglCHh/XY5c/O3efriyTz/ABrYwWd3ey2DwyW0nEh7iQuFR6A/vSpH&#xA;ENudvbHRg+DuSBxfZ+pdXIeNsATw/b+tO/IEfljUfJNrp91cC5GmObi+trmiek6szUkRiR6a1PXY&#xA;/hlGsOSOUyAri2Ffjm36QY5YhEm+Hnf45IX8sLLy7enUnQQNf2erT3Fo0fD1RAVVU4kCvpGrdNsn&#xA;r5zjXOjED4/rYaGMJXysSPy/Ugo5bNfzJ80vbS6fHCltWc3MfqoVWJPrQVY2Q8qhvU6965Mg+BC+&#xA;Ln09+37GAI8edcPLr9v7U7/JcWA8ofuPT+tGaQ3fEjnWtE59/s9Mo7U4vF35Vs39m14W3O92/wAw&#xA;gq+YPLsuqkt5YWV/rqEExCan7pptuPHlTr/lYNF9ExH+86e7yXWfXAy/u+v6LRlnq3kjSZdd1PS3&#xA;hWOKCB75rdo1tmkUSGJIyvwmVq0IX275CWPNMRjLvNd/T7GyOTFDilHyvu6/aw3yhqb+X/OVu+oX&#xA;EKw+Y7YTXMgnEq+u5LrIxAHHk1VAPj1zO1OPxMR4R9B7ujg6efh5RZ+sd/VZ52lt/wDH+oRadb2t&#xA;5czac0Jt2APK4avKgXrMF3AO56daYdKD4I4iQOL7P1I1JHjHhAJ4ft/WiLm9Wf8AKa0tNGuZbs2M&#xA;kQ1mFarOkLM7OjKKkLy2HbiPnkYwrUkzFX9PczMr04ETdc+9M9QGj3PmzytP5R9Eyhib/wCpABVs&#xA;vh2nCbLtyADb1ymHGMcxl+F9/k2z4Tkgcfxru81kepeVrD82NUubua1gjSzHGVuHEXAKmTcf7toD&#xA;X9rthMMktNEAHn9n6kCeOOoJJHL7f1rfzQvtFvI/K164UfWLlJV9ZeLfVG4ly4PRd1+1/XDoITjx&#xA;juH2o10oy4D5/YmX5g6Vo+r6romnm7is7+VZWs7hWVZFZVBgoR8XEyCgA+jfKtHklCMpVY6/pbdX&#xA;jjOUY3R6foQflK+nj8xape+aLaK01TSLKOK5viAokXm9Jq0AJdAq1HWlPbJ6mAOOIxm4yly/Qw08&#xA;jxyOQVKI5/pY/pOuHSvN+meZLuWKO18xLN9b4ziTijyngzLT92I/gTqfsNmTkxceKWMc4VW345/p&#xA;cfHl4MgyHlO73/H4DKfzu/5Q+L/mMi/4hJmH2V/e/D9Tldp/3XxQOvyqn5H26mtZLa0VaeImRt/+&#xA;ByzCP8LPvP3NeY/4IPcF2leY7zy9+Vej6jbNbbF42juRKefKSQgRmKvxfD+1t7ju5MAy6mUTfw+C&#xA;ceY49PGQr4pb5212+178rLLVryOKJ7m+Hpxw8qBI/Vj35E78kJy3S4hj1BiOkf1NWqynJpxI9T+t&#xA;M9b/APJGx/8AMLZ/8n4sqxf458T9xbcv+KfAfeE+/Kf/AJQDSv8Anv8A9RMmY3aP99L4fcHI7P8A&#xA;7mPx+8stzCcx2KpbpP8AvfrX/MYn/UHb5bk+mPu/3xasfOXv/QEyyptdiqU615ei1giO6u51sGUJ&#xA;cWEZRYpQHDjkeJcdKHiw2y7Fm4OQF97Tlw8fMmu5NlUKAqigGwA6AZS3OxV2KtBEDMwUBm+0QNzT&#xA;bfG1bxV2KuxV2KuxVxAIIIqDsQcVcqhQFUUA2AHQDFXYq7FXYq0qKteIAqamgpUnvjat4q7FXYq7&#xA;FXYqwL84opL3y2tjZqbm9jniuHtYhzlENJE9QotW4ctuVKZsuzDw5LOwqnX9ojix0NzaW+a7ee3/&#xA;ACZs4J42imjjtVkicFWU8xsQdwct05B1RI82rUAjSgHySq8sNR1T8oNBtNNs5ruY3DuwhXlxEbzK&#xA;eVN+rbZdGcYaqRkQNv1NUoSnpoiIvf8AWo+YLW9s/wAnNOsr21ltLm2vyrxzLxJ5NNIGA8KPhwyE&#xA;tUSDYMf1Mc0THSgEUQf1sj1O2urr8lYLe1hkuJ5LW14RRKXYhZUdjRQTsqk5iwkBqySa3P3OTOJO&#xA;lAG+wTr8sVNp5Q03Tbr9xqMaTSyWcnwTLG1xIVcxmjAHkN6ZRr98pkN47b9OTfodsQiefd8WW5hO&#xA;Y7FUt0n/AHv1r/mMT/qDt8tyfTH3f74tWPnL3/oCZZU2rZJEjjaSRgkaAs7E0AAFSScIFqTTFrPz&#xA;/b3l3fRwWUn1W0sW1FLl2VfVjH2KJvxDgEgsenbfMuWjMQLO5lTiR1YkTQ2EbTLyjqmo6roUGo38&#xA;At5LotLFGpBHoueUXT/II6/PKtTjjCZjE3TZp8kpwEiKtKp9b1rU/OV55d0+4XTrfToEmnuvTWWW&#xA;R5ArKED/AAKoD77HLhihDEJyHEZFqOWUspgDQiG9cvfNOk+Tb69nuov0nZO7pOkalJYQ9Eqh+ySp&#xA;398cUMc8oAHpK5ZZIYiSfUEiuvOHmFk8sw2t7JHcaq0cV7JNYSRxhpSG5RNIqI/EPT4Sa0rmRHTQ&#xA;9ZI2jy9TRLUz9AB3lz9KZfmd5v1HQ4LaHSriGC9YPcy+rw3hjITgqv1Z2eopv8JyrQaaOQkyG3Js&#xA;12oljAETvzR2veZLp/IbeYtImEMnoJcpVVkG9A0Zr4E0+jK8OAeNwSHWmzLmPg8ce60t8l+ZfMWp&#xA;ax9Vkla+01rGOeS+aD0vSuXVSYgwCI43Pb9Ry3VYMcI3ylxcr5hr02acpVzjw866pdYecPMT6lc2&#xA;c+okzQauNMhC2X7qRRJxLPMPgQlQdqk+2Wz02PhBA/g4vq/Q1Q1MzIgn+KuX6U88y61rtp5y0TSr&#xA;S7WKz1Pn6qmJHK+kKnix/mzHwYoSxSkRvFvzZZjLGIO0mY5guawrW/Meraf59s9MNy/6KuLf6y8M&#xA;Nq1xKOJZSg9JXkoxWtabZn4sEZYTKvUDXOnBy5pRzCN+ki+Vt+Qtf1zWb3XEvboSQWFw1tbAwejJ&#xA;szUd1PFgaKKqRtjrMMICNDci+drpM05mVnka5O8h6z5g1mLWRf3qtJZ3D2cDxwooDIP72m9fkcdZ&#xA;ihj4eEcxfNdJlnPis8jSt+W2u6xrmk3V9qc6yuty0EaJGqBRGASduvLl+GR12KOOQER0ZaLLLJEm&#xA;R6rPLWta7d+ctb0q7u1ls9M4ekoiRC3qio5MP5cOfFCOKMgN5Iw5ZnLKJO0WY5gua7FXYq7FXYq8&#xA;M803dzNdxDzpY3djqdsnoQa1Y0KSKrFgTG3FG3YmqOvXp2zodPEAfuiDE/wn8fe6HPIk/vQRIfxB&#xA;DJrerLCwsvOcV1ART6rqKS8iPBknjni/4cjJHFG98de6v0EFiMsq2yX7/wBoKYQebvzDgt0WDVtI&#xA;9ELVFWfT04r2HDkhHyplZ02AneM/lJsGozAbSh84pZqP5k+dJIGiur+zljPWIRQTBvo4Ov35bDQ4&#xA;gbAP2tU9blrcj7Emu/PfnC6UpJqs6RkcfTgIgSgFKBYQigU9svjpMQ/hH3/e48tXlP8AEfu+5T8u&#xA;6H5n1m/X9FRzPKzD1LoFlRd/tPJ02phzZccB6qXDiyTPpt9OZyb1LsVS3Sf979a/5jE/6g7fLcn0&#xA;x93++LVj5y9/6AmWVNqldW0N1azWs45Qzo0Uq1pVXBVhUexwxkQbHREogiikFj+X/l6yivI4ROfr&#xA;1qLKdnmdj6QQx7VNK09tu1BmTPWTkRdbG+Tjx0kI3V7iuad6Zp1tpthDY23P0LdAkfqOztQCnVif&#xA;u6eGUZJmRJPMt8ICIoJdqXlSwvNWTV457iy1FI/Ra4tXCF4614urK6sAfbLYaiUY8NAx82qeASlx&#xA;biXkpz+TdPn0KbRpLm6MFzI013P6imeZnPI83KkU6dB2GEaqQnx0NuXcg6YGHDZ3Qtz+X+m3CaWs&#xA;l/fV0cAWLCVKqVaqsaxkEgAL06DJR1khxbR9XNjLSRPDufTyRt35Utbm/vr17y7El/b/AFSVFdOC&#xA;xdeKAoadT95yEdQREChsbZywAkmzuKQcf5faUnlx/Ly3d5+jnk9Qr6q8gK1KA8PsFviIp1yZ1kvE&#xA;46HEwGkjwcFnhTrTNKTT9Lj06K4mkjhT04pZSrSKoFFAIUD4R02yjJk4pcRAb4Y+GPDaQQflxpsP&#xA;1oR6nqQS9kM15GJ1CyuxqxeiD7XfMk66Rr0x25bOONHEXvLfnui9c8lWGsapb6nPeXkFzaD/AEU2&#xA;8ioI/Er8BO/ffK8WqlCJiAKLPLphOQkSbCaaRpMGl2rQRSSzNJI00087c5ZHc7szUHagG3QZVkyG&#xA;ZstuPGIikDc+U7OfzJD5ga6uVvYFEcUaugiEY6px4Vo1STv3yyOoIx8FCi1nTgz47Nqfl7yZp+hX&#xA;F7PaXV1JJfnlcGeRXBckn1KBV+Lc74c2qlkABA2Rh00cZJBO7tB8mWWhx3sdleXZ+vcmlaR0dhIw&#xA;oZVPD7fzrjm1RyVYGy4tMMd0Tug9L/LjSNN4JBeXzWqzrdNZvMpheVCGDOgRa7qD9GTya2UuYjdV&#xA;dbsMejjHkTV3Tm/LvTje3t6upajFcagKXbRzInNelDSPoBsMfzsqA4Y1Hlsv5ONk3Kzz3ZRBDFBD&#xA;HBCoSKJQkaDoFUUAHyGYhJJsuUBQoL8CXYq7FXYqtliimjaKVFkjcUZHAZSPcHCCRyQRaRXvkHyZ&#xA;etyn0i3DUpWJfRr8/S4ZkR1mWPKRaJaTFLnEIE/lR5AJqdK+6e4H6pMs/lDN/O+wfqa/yGH+b9p/&#xA;W4flT5ABqNKH0z3B/XJj/KGb+d9g/Uv5DD/N+0o+y8heTbJuUGkW3LxkT1SPl6nOmVy1eWXORbI6&#xA;TFHlEJ5HHHFGscahI1FFRQAAB2AGY5Nt4FLsCXYqgNNgljvNVd1KrNdK8RP7Si1gSo/2SEZZMgiP&#xA;u/SWuAoy9/6Aj8rbHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:24C4C2A7BC1E11DBBEFE8A997979B8C9</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:24C4C2A8BC1E11DBBEFE8A997979B8C9</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:24C4C2A6BC1E11DBBEFE8A997979B8C9</stRef:instanceID>
            <stRef:documentID>uuid:36283B1EBC1D11DBBEFE8A997979B8C9</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -72.3555 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 72.3555 li263.043 72.3555 li263.043 0 licpclp[1 0 0 1 0 0 ] concat25.6016 20.3672 mo25.7148 20.4766 25.7852 20.4609 25.7852 20.4609 cv34.2383 20.1289 39.082 23.3438 39.4922 24.6621 cv42.8711 24.6016 li43.9219 22.3164 li43.9863 22.127 43.9531 21.8477 43.8867 21.7734 cv42.8711 20.6445 34.3633 18.2148 24.0977 18.2148 cv13.1445 18.2148 6.19727 20.377 4.73438 21.4609 cv4.73438 21.4609 4.38281 21.6719 4.37305 21.9922 cv4.36719 22.1406 4.58203 22.5547 4.58203 22.5547 cv4.87891 23.1992 li4.97266 23.3867 5.10156 23.375 5.32422 23.2461 cv5.32422 23.2461 5.52344 23.1836 5.5625 23.0527 cv5.60156 22.9219 5.47852 22.6953 5.47852 22.6953 cv5.25977 22.25 5.54883 22.1914 5.56641 22.1836 cv6.19336 21.8984 li6.49219 21.8125 6.52734 21.9707 6.62695 22.207 cv6.62695 22.207 6.74219 22.5352 6.82422 22.5859 cv6.98047 22.6836 7.48047 22.3984 8.97266 22.0352 cv9.07422 22.0156 9.12891 22.0059 9.32813 21.9258 cv9.47266 21.8672 9.34375 21.3672 9.34375 21.3672 cv9.29102 21.1172 9.17578 20.8672 9.71875 20.7773 cv10.6523 20.5918 li11.0859 20.4766 11.127 20.7031 11.1797 20.9531 cv11.1797 20.9531 11.207 21.332 11.3047 21.4883 cv11.4277 21.6875 11.6523 21.3711 14.5 21.0664 cv14.5 21.0664 14.9141 21.0547 14.9961 20.9121 cv15.082 20.7617 15.0117 20.4258 15.0117 20.4258 cv14.9805 20.082 14.8398 19.8301 15.5 19.7891 cv16.7461 19.6758 li17.6797 19.5234 17.5215 19.8359 17.5547 20.1797 cv17.5547 20.1797 17.5859 20.5508 17.6563 20.6172 cv17.7266 20.6855 18.0215 20.6797 18.0215 20.6797 cv19.6191 20.5156 20.5117 20.5234 22.207 20.4512 cv22.207 20.4512 22.4434 20.4492 22.5313 20.3516 cv22.6172 20.2539 22.5938 20.1484 22.5938 20.1484 cv22.5938 19.957 22.5527 19.6523 22.6758 19.5195 cv22.8164 19.373 23.0352 19.4395 23.2578 19.4395 cv24.6836 19.4375 li24.9023 19.4375 25.3516 19.3398 25.4785 19.4961 cv25.5605 19.5977 25.5352 20.2031 25.5352 20.2031 cv25.5352 20.2031 25.5352 20.3008 25.6016 20.3672 cvcpfalse sop/0 [/DeviceCMYK] /CSA add_res0.62 0.22 0 0.03 cmykf24.1641 6.63281 mo15.8984 6.63281 10.8164 9.28516 7.56055 12.4805 cv7.56055 12.4805 7.50391 12.5352 7.47461 12.6172 cv7.41406 12.7813 7.39844 13.0215 7.73438 12.9063 cv14.8125 9.93555 22.5469 11.7969 25.0117 14.5977 cv25.0977 14.7266 25.0195 14.7598 24.916 14.7617 cv22.4258 14.7871 20.3398 14.6406 15.7383 15.2852 cv13.25 15.6367 11.0371 15.998 9.16797 16.4844 cv6.08984 17.2852 3.9082 18.2852 2.68945 19.0938 cv2.24219 19.3359 2.20703 19.5078 2.0957 19.7148 cv1.96484 20.1152 1.98047 20.1133 1.89453 20.3867 cv1.74219 20.9023 1.66406 21.2344 1.63477 21.4063 cv1.58203 21.7188 1.92383 21.6094 2.10156 21.4277 cv2.47266 21.0566 3.48828 20.1602 4.98047 19.4648 cv6.5 18.7578 9.01563 17.9531 11.7422 17.4492 cv15.3789 16.7773 19.8066 16.3496 23.8555 16.3398 cv28.5508 16.3281 32.7578 16.8145 36.2773 17.5 cv39.8535 18.1992 42.6836 19.168 44.5117 20.0586 cv45.3711 20.4766 45.8516 20.8594 46.4277 21.3496 cv46.8828 21.8145 46.9102 21.4141 46.9023 21.293 cv46.9023 21.293 46.8164 20.6719 46.0547 19.2715 cv43.7188 14.9766 37.4766 6.63281 24.1641 6.63281 cvf0.152344 61.9063 mo0.152344 63.8262 8.12891 67.7617 24.6367 67.7617 cv40.6563 67.7617 49.1172 63.8262 49.1172 61.9063 cv49.0352 58.9609 li49.0352 59.0234 49.0234 58.7695 49 58.8359 cv48.9727 58.3047 48.125 58.1992 45.5371 58.1641 cv45.4785 56.5313 li45.4785 56.6992 44.9316 57.0547 44.5918 57.25 cv42.4844 58.4688 34.4219 60.2813 24.3398 60.2813 cv12.6641 60.2813 4.49023 57.8594 3.20117 56.5313 cv3.17188 59.0508 li7.01563 61.7949 18.8516 64.2578 30.8047 62.9883 cv31.1602 62.9746 31.2813 62.9023 31.6426 63.0059 cv31.7402 63.0352 32.0684 63.3242 31.418 63.5625 cv24.4883 65.8535 7.37305 65.3418 0.125 59.8398 cv0.158203 61.9063 lif0.25 lw0 lc1 lj4 ml[] 0 dshtrue sadj0.152344 61.9063 mo0.152344 63.8262 8.12891 67.7617 24.6367 67.7617 cv40.6563 67.7617 49.1172 63.8262 49.1172 61.9063 cv49.0352 58.9609 li49.0352 59.0234 49.0234 58.7695 49 58.8359 cv48.9727 58.3047 48.125 58.1992 45.5371 58.1641 cv45.4785 56.5313 li45.4785 56.6992 44.9316 57.0547 44.5918 57.25 cv42.4844 58.4688 34.4219 60.2813 24.3398 60.2813 cv12.6641 60.2813 4.49023 57.8594 3.20117 56.5313 cv3.17188 59.0508 li7.01563 61.7949 18.8516 64.2578 30.8047 62.9883 cv31.1602 62.9746 31.2813 62.9023 31.6426 63.0059 cv31.7402 63.0352 32.0684 63.3242 31.418 63.5625 cv24.4883 65.8535 7.37305 65.3418 0.125 59.8398 cv0.158203 61.9063 li@34.1289 24.5273 mo34.1289 24.5273 li34.1289 24.0117 li34.1289 24.0117 li34.1289 24.5273 licpf29.75 23.6914 mo29.7578 23.6914 29.7617 23.6875 29.7695 23.6875 cv29.7324 23.6875 li29.7383 23.6875 29.7441 23.6914 29.75 23.6914 cvcpf34.1289 24.5273 mo34.1289 24.5273 li34.1289 24.5273 li34.1289 24.5273 li34.1289 24.5273 licpf34.4141 22.6992 mo29.9004 22.6953 li29.6797 22.6914 29.582 22.8047 29.5781 23.0234 cv29.5781 23.5293 li29.5762 23.7676 29.6797 23.873 29.918 23.875 cv31.3164 23.875 li31.4453 23.8672 31.4785 23.9258 31.4844 23.9453 cv31.5391 24.0859 31.2813 24.2031 31.1953 24.2617 cv30.5059 24.7109 li30.4102 24.7695 30.3203 24.8965 30.3223 25.1426 cv30.293 57.4883 li30.3594 58.0547 31.2617 58.1094 32.2461 58.1055 cv33.0762 58.1016 34.0547 58.0566 34.1582 57.5039 cv34.1582 57.5039 34.1309 26.7188 34.1602 24.0605 cv34.1641 23.9375 34.2188 23.9102 34.2383 23.8984 cv34.2695 23.8789 34.4102 23.8672 34.4102 23.8672 cv34.6172 23.8594 34.7266 23.7578 34.7285 23.5527 cv34.7285 23.0078 li34.7188 22.8086 34.5898 22.7051 34.4141 22.6992 cvcpf26.998 45.1992 mo27.1055 44.9844 li27.4102 44.9844 li27.4082 44.7813 li21.1406 44.7813 li21.1387 44.9844 li21.4727 44.9844 li21.5645 45.1797 li21.9414 45.9688 li21.9414 45.9688 22.0078 46.0391 22.0898 46.0742 cv22.1719 46.1094 22.3359 46.1211 22.3945 46.123 cv24.041 46.1367 23.6836 46.1211 23.9434 46.1211 cv24.0645 46.125 24.2305 46.127 24.3125 46.2266 cv24.3672 46.2969 24.4121 46.4863 24.1836 46.6387 cv23.6465 46.9961 22.75 47.582 22.3281 47.8574 cv22.2773 47.8867 22.1367 47.9805 22.0898 48.0957 cv22.0391 48.2266 22.0488 48.3242 22.0488 48.3242 cv22.0488 54.4023 li21.5156 54.6094 li21.5156 54.6094 21.3555 55.8203 21.5391 55.9453 cv21.7148 56.0645 26.8242 56.0645 27 55.9531 cv27.1758 55.8398 27.0234 54.5859 27.0234 54.5859 cv26.4844 54.4023 li26.4844 46.2422 li26.998 45.1992 licpf26.998 45.1992 mo27.1055 44.9844 li27.4102 44.9844 li27.4082 44.7813 li21.1406 44.7813 li21.1387 44.9844 li21.4727 44.9844 li21.5645 45.1797 li21.9414 45.9688 li21.9414 45.9688 22.0078 46.0391 22.0898 46.0742 cv22.1719 46.1094 22.3359 46.1211 22.3945 46.123 cv24.041 46.1367 23.6836 46.1211 23.9434 46.1211 cv24.0645 46.125 24.2305 46.127 24.3125 46.2266 cv24.3672 46.2969 24.4121 46.4863 24.1836 46.6387 cv23.6465 46.9961 22.75 47.582 22.3281 47.8574 cv22.2773 47.8867 22.1367 47.9805 22.0898 48.0957 cv22.0391 48.2266 22.0488 48.3242 22.0488 48.3242 cv22.0488 54.4023 li21.5156 54.6094 li21.5156 54.6094 21.3555 55.8203 21.5391 55.9453 cv21.7148 56.0645 26.8242 56.0645 27 55.9531 cv27.1758 55.8398 27.0234 54.5859 27.0234 54.5859 cv26.4844 54.4023 li26.4844 46.2422 li26.998 45.1992 licp@43.168 24.4609 mo38.6523 24.457 li38.4336 24.4531 38.332 24.5664 38.3281 24.7871 cv38.3281 25.291 li38.3281 25.5313 38.4297 25.6328 38.6699 25.6367 cv40.0703 25.6367 li40.1973 25.6289 40.2305 25.6875 40.2363 25.707 cv40.291 25.8477 40.0332 25.9648 39.9453 26.0234 cv39.2578 26.4727 li39.1602 26.5313 39.0703 26.6563 39.0742 26.9063 cv39.0449 56.0664 li39.1113 56.6367 40.0117 56.6875 40.9961 56.6836 cv41.8281 56.6816 42.8047 56.6367 42.9102 56.084 cv42.9102 56.084 42.8828 28.4805 42.9141 25.8223 cv42.9141 25.6992 42.9688 25.6719 42.9883 25.6602 cv43.0195 25.6406 43.1602 25.6289 43.1602 25.6289 cv43.3672 25.6211 43.4785 25.5195 43.4805 25.3145 cv43.4805 24.7695 li43.4707 24.5703 43.3438 24.4668 43.168 24.4609 cvcpf18.4961 22.6992 mo13.9844 22.6953 li13.7637 22.6953 13.6641 22.8066 13.6602 23.0273 cv13.6602 23.5313 li13.6602 23.7695 13.7617 23.875 14.002 23.875 cv15.4004 23.875 li15.5273 23.8672 15.5605 23.9297 15.5664 23.9453 cv15.6211 24.0859 15.3633 24.2051 15.2773 24.2617 cv14.5898 24.7109 li14.4922 24.7695 14.4023 24.8984 14.4043 25.1445 cv14.375 57.4922 li14.4414 58.0566 15.3438 58.1113 16.3281 58.1055 cv17.1602 58.1055 18.1367 58.0586 18.2402 57.5078 cv18.2402 57.5078 18.2148 26.7227 18.2441 24.0625 cv18.2461 23.9395 18.3008 23.9102 18.3203 23.8984 cv18.3516 23.8789 18.4922 23.8672 18.4922 23.8672 cv18.6992 23.8633 18.8086 23.7578 18.8105 23.5547 cv18.8105 23.0098 li18.8008 22.8105 18.6719 22.7051 18.4961 22.6992 cvcpf9.71484 24.5449 mo5.19922 24.5391 li4.98047 24.5391 4.87891 24.6523 4.875 24.8711 cv4.875 25.375 li4.875 25.6133 4.97656 25.7188 5.2168 25.7188 cv6.61719 25.7227 li6.74414 25.7109 6.77734 25.7734 6.7832 25.793 cv6.83789 25.9316 6.58008 26.0508 6.49219 26.1094 cv5.80469 26.5566 li5.70703 26.6133 5.61719 26.7422 5.62109 26.9883 cv5.5918 56.1523 li5.65625 56.7188 6.56055 56.7715 7.54297 56.7695 cv8.375 56.7676 9.35156 56.7188 9.45703 56.168 cv9.45703 56.168 9.42969 28.5664 9.46094 25.9063 cv9.46094 25.7852 9.51563 25.7559 9.53516 25.7441 cv9.56641 25.7227 9.70703 25.7109 9.70703 25.7109 cv9.91406 25.707 10.0254 25.6055 10.0273 25.3984 cv10.0273 24.8555 li10.0176 24.6563 9.88867 24.5508 9.71484 24.5449 cvcpf0.8 lw0 lj10 ml68.1094 0 mo68.1094 72.3555 li@98.436 15.9932 mo97.8237 15.9932 li97.6411 14.7041 97.3945 14.418 96.5352 14.418 cv95.064 14.418 li95.064 19.7686 li95.064 20.9014 95.2202 21.083 96.4966 21.083 cv96.4966 21.6943 li91.4453 21.6943 li91.4453 21.083 li92.7207 21.083 92.877 20.9014 92.877 19.7686 cv92.877 14.418 li91.3281 14.418 li90.7163 14.418 90.2998 14.666 90.1172 15.9932 cv89.5059 15.9932 li89.7534 13.3896 li90.3125 13.3896 li90.3652 13.4678 90.417 13.5205 90.5205 13.5596 cv90.6123 13.585 90.7554 13.5977 90.9634 13.5977 cv96.8218 13.5977 li97.4331 13.5977 97.5117 13.585 97.6411 13.3896 cv98.2017 13.3896 li98.436 15.9932 licpf108.758 17.126 mo108.758 15.498 li108.758 14.4697 108.55 14.2354 107.665 14.21 cv107.665 13.5977 li112.078 13.5977 li112.078 14.21 li111.127 14.2354 110.945 14.4697 110.945 15.3281 cv110.945 19.7939 li110.945 20.707 111.049 21.0693 112.078 21.083 cv112.078 21.6943 li107.665 21.6943 li107.665 21.083 li108.511 21.0439 108.758 20.8359 108.758 19.8193 cv108.758 17.9336 li104.853 17.9336 li104.853 19.8594 li104.853 20.6514 104.944 21.0566 105.986 21.083 cv105.986 21.6943 li101.521 21.6943 li101.521 21.083 li102.419 21.0439 102.666 20.8867 102.666 19.8193 cv102.666 15.4609 li102.666 14.418 102.379 14.21 101.521 14.21 cv101.521 13.5977 li105.986 13.5977 li105.986 14.21 li105.113 14.2617 104.853 14.3789 104.853 15.4473 cv104.853 17.126 li108.758 17.126 licpf122.986 13.5977 mo123.104 15.5371 li122.491 15.5371 li122.375 14.6533 122.178 14.4053 121.541 14.4053 cv118.99 14.4053 li118.99 17.2432 li120.669 17.2432 li121.594 17.2432 121.841 17.0479 121.841 16.2529 cv122.452 16.2529 li122.452 18.9736 li121.841 18.9736 li121.841 18.2461 121.632 18.0498 120.682 18.0498 cv118.99 18.0498 li118.99 20.1465 li118.99 20.8359 119.068 20.8867 119.771 20.8867 cv121.281 20.8867 li122.414 20.8867 122.712 20.3936 122.909 19.5342 cv123.52 19.5342 li123.35 21.6943 li115.411 21.6943 li115.411 21.083 li116.594 21.083 116.803 20.8096 116.803 19.8857 cv116.803 15.4063 li116.803 14.3018 116.426 14.21 115.5 14.21 cv115.5 13.5977 li122.986 13.5977 licpf141.707 13.5977 mo141.707 14.21 li140.613 14.21 140.395 14.4053 140.395 15.4473 cv140.395 18.3223 li140.395 20.9268 138.781 21.9023 136.555 21.9023 cv134.184 21.9023 132.635 20.8486 132.635 18.9219 cv132.635 15.4727 li132.635 14.5869 132.452 14.21 131.542 14.21 cv131.542 13.5977 li135.982 13.5977 li135.982 14.21 li135.043 14.21 134.821 14.4834 134.821 15.3564 cv134.821 18.8184 li134.821 20.0273 135.474 20.7842 137.076 20.7842 cv138.807 20.7842 139.469 19.8594 139.469 18.2061 cv139.469 15.4609 li139.469 14.4561 139.223 14.21 138.168 14.21 cv138.168 13.5977 li141.707 13.5977 licpf154.777 13.5977 mo154.777 14.21 li153.842 14.21 153.607 14.4697 153.607 15.3818 cv153.607 21.7861 li152.58 21.7861 li146.682 15.5635 li146.682 19.8594 li146.682 20.7197 146.813 21.083 147.918 21.083 cv147.918 21.6943 li144.572 21.6943 li144.572 21.083 li145.486 21.083 145.758 20.8867 145.758 19.7939 cv145.758 14.5479 li145.602 14.3916 145.289 14.21 144.666 14.21 cv144.666 13.5977 li147.736 13.5977 li152.682 18.8555 li152.682 15.3691 li152.682 14.5742 152.541 14.21 151.486 14.21 cv151.486 13.5977 li154.777 13.5977 licpf157.839 21.6943 mo157.839 21.083 li158.763 21.083 158.958 20.7441 158.958 19.9111 cv158.958 15.4609 li158.958 14.5479 158.776 14.21 157.839 14.21 cv157.839 13.5977 li162.331 13.5977 li162.331 14.21 li161.288 14.21 161.146 14.5479 161.146 15.4609 cv161.146 19.833 li161.146 20.6396 161.224 21.083 162.331 21.083 cv162.331 21.6943 li157.839 21.6943 licpf174.618 14.21 mo173.669 14.21 173.435 14.3916 172.86 15.6689 cv170.036 21.9023 li169.085 21.9023 li166.353 15.8359 li165.673 14.3262 165.534 14.21 164.659 14.21 cv164.659 13.5977 li169.567 13.5977 li169.567 14.21 li168.604 14.21 168.241 14.3916 168.241 14.7314 cv168.241 14.8994 168.317 15.1475 168.489 15.5244 cv170.218 19.3135 li171.716 15.9668 li172.079 15.1475 172.171 14.9131 172.171 14.6904 cv172.171 14.3535 171.833 14.1836 171.024 14.21 cv171.024 13.5977 li174.618 13.5977 li174.618 14.21 licpf183.815 13.5977 mo183.931 15.5371 li183.319 15.5371 li183.202 14.6533 183.007 14.4053 182.368 14.4053 cv179.817 14.4053 li179.817 17.2432 li181.497 17.2432 li182.421 17.2432 182.667 17.0479 182.667 16.2529 cv183.28 16.2529 li183.28 18.9736 li182.667 18.9736 li182.667 18.2461 182.458 18.0498 181.511 18.0498 cv179.817 18.0498 li179.817 20.1465 li179.817 20.8359 179.894 20.8867 180.601 20.8867 cv182.108 20.8867 li183.241 20.8867 183.54 20.3936 183.735 19.5342 cv184.347 19.5342 li184.181 21.6943 li176.237 21.6943 li176.237 21.083 li177.423 21.083 177.632 20.8096 177.632 19.8857 cv177.632 15.4063 li177.632 14.3018 177.253 14.21 176.329 14.21 cv176.329 13.5977 li183.815 13.5977 licpf191.305 17.6201 mo193.193 17.6465 193.869 17.0605 193.869 15.7197 cv193.869 14.6904 193.207 14.0146 191.943 14.0146 cv191.305 14.0146 li191.305 17.6201 licp198.295 21.8115 mo196.693 21.8115 li195.523 21.8115 194.793 21.5908 194.234 21.0303 cv193.389 20.1855 192.619 18.8057 191.996 18.2578 cv191.305 18.2578 li191.305 20.002 li191.305 20.9658 191.684 21.083 192.699 21.083 cv192.699 21.6943 li187.766 21.6943 li187.766 21.083 li188.859 21.083 189.119 20.8867 189.119 19.9365 cv189.119 15.3945 li189.119 14.418 188.885 14.21 187.766 14.21 cv187.766 13.5977 li188.559 13.5459 189.094 13.5059 190.135 13.4541 cv190.953 13.416 191.762 13.3896 192.203 13.3896 cv194.285 13.3896 196.188 13.7412 196.188 15.7461 cv196.188 16.7363 195.549 17.4639 194.326 17.8682 cv195.158 18.5186 195.639 19.6514 196.473 20.4844 cv197.045 21.0566 197.594 21.1855 198.295 21.1992 cv198.295 21.8115 licpf200.629 19.2344 mo200.994 20.4844 201.852 21.2139 202.934 21.2139 cv203.729 21.2139 204.275 20.7314 204.275 20.0557 cv204.275 18.3369 200.135 18.168 200.135 15.6416 cv200.135 14.7178 200.771 13.3896 202.908 13.3896 cv203.871 13.3896 204.549 13.6504 204.926 13.6504 cv205.068 13.6504 205.146 13.6104 205.211 13.4814 cv205.643 13.4814 li205.861 15.7979 li205.25 15.7979 li204.898 14.6777 203.988 14.0791 203.051 14.0791 cv202.375 14.0791 201.904 14.418 201.904 14.8994 cv201.904 16.2529 206.254 16.6318 206.254 19.4297 cv206.254 20.9014 205.016 21.9023 203.209 21.9023 cv202.281 21.9023 201.334 21.6162 201.113 21.6162 cv200.902 21.6162 200.813 21.7334 200.787 21.8115 cv200.369 21.8115 li200.018 19.2344 li200.629 19.2344 licpf209.444 21.6943 mo209.444 21.083 li210.368 21.083 210.563 20.7441 210.563 19.9111 cv210.563 15.4609 li210.563 14.5479 210.382 14.21 209.444 14.21 cv209.444 13.5977 li213.937 13.5977 li213.937 14.21 li212.894 14.21 212.751 14.5479 212.751 15.4609 cv212.751 19.833 li212.751 20.6396 212.829 21.083 213.937 21.083 cv213.937 21.6943 li209.444 21.6943 licpf225.608 15.9932 mo224.997 15.9932 li224.815 14.7041 224.565 14.418 223.708 14.418 cv222.237 14.418 li222.237 19.7686 li222.237 20.9014 222.394 21.083 223.671 21.083 cv223.671 21.6943 li218.62 21.6943 li218.62 21.083 li219.896 21.083 220.05 20.9014 220.05 19.7686 cv220.05 14.418 li218.501 14.418 li217.89 14.418 217.474 14.666 217.29 15.9932 cv216.679 15.9932 li216.927 13.3896 li217.485 13.3896 li217.54 13.4678 217.591 13.5205 217.692 13.5596 cv217.786 13.585 217.927 13.5977 218.136 13.5977 cv223.995 13.5977 li224.608 13.5977 224.685 13.585 224.815 13.3896 cv225.374 13.3896 li225.608 15.9932 licpf237.418 14.21 mo236.533 14.21 236.313 14.3916 235.609 15.4727 cv233.695 18.4141 li233.695 19.8477 li233.695 20.7842 233.824 21.083 234.986 21.083 cv234.986 21.6943 li230.207 21.6943 li230.207 21.083 li231.354 21.083 231.508 20.7695 231.508 19.833 cv231.508 18.4932 li229.111 15.252 li228.488 14.4053 228.24 14.21 227.5 14.21 cv227.5 13.5977 li232.186 13.5977 li232.186 14.21 li231.549 14.21 231.301 14.2881 231.301 14.5352 cv231.301 14.6406 231.391 14.8096 231.508 14.9639 cv233.33 17.4385 li234.645 15.3818 li234.879 15.0029 234.986 14.7822 234.986 14.627 cv234.986 14.3262 234.764 14.21 234.125 14.21 cv234.125 13.5977 li237.418 13.5977 li237.418 14.21 licpf92.3252 40.4502 mo92.8896 40.4502 93.7075 38.9814 93.7075 37.1377 cv93.7075 36.1563 93.3208 35.2949 92.8896 35.2949 cv92.2808 35.2949 91.5083 36.7959 91.5083 38.5938 cv91.5083 39.6641 91.8496 40.4502 92.3252 40.4502 cvcp93.812 34.6855 mo94.7778 34.6855 95.4014 35.5479 95.4014 36.8701 cv95.4014 39.4414 92.9795 41.0752 91.4048 41.0752 cv90.4531 41.0752 89.7842 40.1973 89.7842 38.9502 cv89.7842 36.7813 91.7764 34.6855 93.812 34.6855 cvcpf99.0337 40.4072 mo98.8408 41.5225 98.4844 42.5029 97.5625 43.4238 cv96.9683 44.0186 96.2393 44.375 95.23 44.375 cv94.3232 44.375 93.6841 44.0039 93.6841 43.4688 cv93.6841 43.082 94.0845 42.7246 94.5313 42.7246 cv95.4375 42.7246 95.4072 43.8398 96.1064 43.8398 cv96.6411 43.8398 96.9834 43.2158 97.147 42.2197 cv98.2617 35.5176 li97.147 35.5176 li97.2207 35.1621 li97.5776 35.1621 98.1128 35.0127 98.395 34.834 cv98.707 32.752 99.9253 30.9248 101.962 30.9248 cv102.854 30.9248 103.358 31.2373 103.358 31.7715 cv103.358 32.2031 103.002 32.5459 102.556 32.5459 cv101.724 32.5459 101.412 31.5215 100.907 31.5215 cv100.55 31.5215 100.431 32.0693 100.223 33.3623 cv99.9849 34.834 li101.056 34.834 li100.907 35.5176 li99.8516 35.5176 li99.0337 40.4072 licpf119.12 32.8145 mo119.12 33.4277 li118.183 33.4277 117.948 33.6865 117.948 34.5996 cv117.948 41.0029 li116.919 41.0029 li111.023 34.7803 li111.023 39.0781 li111.023 39.9365 111.153 40.3008 112.26 40.3008 cv112.26 40.9141 li108.914 40.9141 li108.914 40.3008 li109.825 40.3008 110.099 40.1055 110.099 39.0117 cv110.099 33.7656 li109.942 33.6104 109.631 33.4277 109.005 33.4277 cv109.005 32.8145 li112.078 32.8145 li117.024 38.0732 li117.024 34.5869 li117.024 33.791 116.88 33.4277 115.827 33.4277 cv115.827 32.8145 li119.12 32.8145 licpf126.095 33.2324 mo124.923 33.2324 123.687 34.0645 123.687 36.3174 cv123.687 38.7773 124.871 40.4961 126.577 40.4961 cv127.865 40.4961 128.893 39.4941 128.893 37.3984 cv128.893 34.9365 127.748 33.2324 126.095 33.2324 cvcp126.16 41.1211 mo122.501 41.1211 121.369 38.7266 121.369 36.916 cv121.369 34.7285 122.931 32.6074 126.498 32.6074 cv130.117 32.6074 131.21 35.0029 131.21 36.7725 cv131.21 38.5029 130.117 41.1211 126.16 41.1211 cvcpf137.117 36.8379 mo139.004 36.8643 139.682 36.2773 139.682 34.9365 cv139.682 33.9082 139.018 33.2324 137.754 33.2324 cv137.117 33.2324 li137.117 36.8379 licp144.105 41.0303 mo142.506 41.0303 li141.332 41.0303 140.605 40.8086 140.045 40.249 cv139.199 39.4023 138.432 38.0234 137.805 37.4775 cv137.117 37.4775 li137.117 39.2207 li137.117 40.1826 137.494 40.3008 138.51 40.3008 cv138.51 40.9141 li133.576 40.9141 li133.576 40.3008 li134.668 40.3008 134.929 40.1055 134.929 39.1553 cv134.929 34.6123 li134.929 33.6357 134.694 33.4277 133.576 33.4277 cv133.576 32.8145 li134.369 32.7646 134.902 32.7246 135.945 32.6729 cv136.764 32.6328 137.572 32.6074 138.014 32.6074 cv140.098 32.6074 141.998 32.958 141.998 34.9639 cv141.998 35.9521 141.361 36.6807 140.137 37.0859 cv140.969 37.7363 141.451 38.8682 142.285 39.7021 cv142.857 40.2744 143.404 40.4053 144.105 40.417 cv144.105 41.0303 licpf154.407 35.2109 mo153.796 35.2109 li153.612 33.9219 153.366 33.6357 152.507 33.6357 cv151.034 33.6357 li151.034 38.9863 li151.034 40.1172 151.19 40.3008 152.466 40.3008 cv152.466 40.9141 li147.417 40.9141 li147.417 40.3008 li148.692 40.3008 148.847 40.1172 148.847 38.9863 cv148.847 33.6357 li147.298 33.6357 li146.687 33.6357 146.271 33.8828 146.089 35.2109 cv145.478 35.2109 li145.724 32.6074 li146.282 32.6074 li146.335 32.6855 146.388 32.7363 146.491 32.7773 cv146.583 32.8027 146.728 32.8145 146.933 32.8145 cv152.792 32.8145 li153.403 32.8145 153.481 32.8027 153.612 32.6074 cv154.171 32.6074 li154.407 35.2109 licpf164.477 36.3438 mo164.477 34.7158 li164.477 33.6865 164.268 33.4541 163.383 33.4277 cv163.383 32.8145 li167.793 32.8145 li167.793 33.4277 li166.844 33.4541 166.662 33.6865 166.662 34.5479 cv166.662 39.0117 li166.662 39.9238 166.764 40.2881 167.793 40.3008 cv167.793 40.9141 li163.383 40.9141 li163.383 40.3008 li164.229 40.2617 164.477 40.0537 164.477 39.0381 cv164.477 37.1504 li160.568 37.1504 li160.568 39.0781 li160.568 39.8711 160.66 40.2744 161.703 40.3008 cv161.703 40.9141 li157.238 40.9141 li157.238 40.3008 li158.135 40.2617 158.383 40.1055 158.383 39.0381 cv158.383 34.6768 li158.383 33.6357 158.096 33.4277 157.238 33.4277 cv157.238 32.8145 li161.703 32.8145 li161.703 33.4277 li160.83 33.4785 160.568 33.5977 160.568 34.6641 cv160.568 36.3438 li164.477 36.3438 licpf185.112 38.3604 mo185.007 39.1035 184.696 40.0664 184.317 40.9512 cv184.28 41.043 li184.161 41.0029 184.032 40.9775 183.901 40.9648 cv183.786 40.9385 183.642 40.9385 183.485 40.9385 cv183.134 40.9385 182.757 40.9775 182.353 41.0303 cv181.962 41.0684 181.546 41.1211 181.091 41.1211 cv179.345 41.1211 178.147 40.5352 177.407 39.7285 cv176.663 38.9199 176.339 37.9063 176.339 37.0068 cv176.339 35.7061 176.86 34.625 177.771 33.832 cv178.669 33.0498 179.958 32.6074 181.468 32.6074 cv182.858 32.6074 183.628 32.998 183.952 32.998 cv184.071 32.998 184.136 32.9463 184.188 32.8145 cv184.671 32.8145 li184.786 35.5371 li184.175 35.5371 li184.032 34.8721 183.706 34.3262 183.251 33.9482 cv182.796 33.5703 182.222 33.3623 181.571 33.3623 cv179.841 33.3623 178.655 34.7803 178.655 36.7988 cv178.655 38.9199 179.892 40.3662 181.714 40.3662 cv182.938 40.3662 183.876 39.7021 184.501 38.3604 cv185.112 38.3604 licpf191.023 34.2344 mo189.943 37.3193 li192.223 37.3193 li191.023 34.2344 licp196.621 40.9141 mo191.896 40.9141 li191.896 40.3008 li192.781 40.3008 193.096 40.1973 193.096 39.8574 cv193.096 39.6885 193.002 39.377 192.818 38.8945 cv192.52 38.1279 li189.658 38.1279 li189.422 38.8164 li189.24 39.3506 189.137 39.7148 189.137 39.8203 cv189.137 40.1709 189.566 40.3008 190.281 40.3008 cv190.281 40.9141 li186.938 40.9141 li186.938 40.3008 li187.9 40.3008 188.018 40.0801 188.486 38.7266 cv190.518 32.8945 li190.4 32.6074 li192.742 32.6074 li195.111 38.7646 li195.58 39.9746 195.867 40.2617 196.621 40.3008 cv196.621 40.9141 licpf202.534 36.8379 mo204.419 36.8643 205.099 36.2773 205.099 34.9365 cv205.099 33.9082 204.435 33.2324 203.171 33.2324 cv202.534 33.2324 li202.534 36.8379 licp209.522 41.0303 mo207.921 41.0303 li206.749 41.0303 206.021 40.8086 205.462 40.249 cv204.614 39.4023 203.849 38.0234 203.222 37.4775 cv202.534 37.4775 li202.534 39.2207 li202.534 40.1826 202.909 40.3008 203.925 40.3008 cv203.925 40.9141 li198.991 40.9141 li198.991 40.3008 li200.083 40.3008 200.345 40.1055 200.345 39.1553 cv200.345 34.6123 li200.345 33.6357 200.11 33.4277 198.991 33.4277 cv198.991 32.8145 li199.786 32.7646 200.319 32.7246 201.362 32.6729 cv202.183 32.6328 202.989 32.6074 203.433 32.6074 cv205.515 32.6074 207.413 32.958 207.413 34.9639 cv207.413 35.9521 206.774 36.6807 205.554 37.0859 cv206.388 37.7363 206.866 38.8682 207.7 39.7021 cv208.272 40.2744 208.821 40.4053 209.522 40.417 cv209.522 41.0303 licpf215.579 33.2324 mo214.409 33.2324 213.171 34.0645 213.171 36.3174 cv213.171 38.7773 214.356 40.4961 216.062 40.4961 cv217.353 40.4961 218.38 39.4941 218.38 37.3984 cv218.38 34.9365 217.233 33.2324 215.579 33.2324 cvcp215.646 41.1211 mo211.989 41.1211 210.854 38.7266 210.854 36.916 cv210.854 34.7285 212.419 32.6074 215.983 32.6074 cv219.603 32.6074 220.696 35.0029 220.696 36.7725 cv220.696 38.5029 219.603 41.1211 215.646 41.1211 cvcpf228.133 32.8145 mo228.133 33.4277 li227.029 33.4277 226.809 33.6357 226.809 34.6641 cv226.809 39.1816 li226.809 39.9746 226.898 40.1055 227.77 40.1055 cv228.76 40.1055 li229.553 40.1055 229.828 40.0801 230.92 38.5576 cv231.533 38.5576 li230.541 40.9141 li223.344 40.9141 li223.344 40.3008 li224.477 40.3008 224.619 39.9629 224.619 39.0381 cv224.619 34.6641 li224.619 33.7275 224.477 33.4277 223.344 33.4277 cv223.344 32.8145 li228.133 32.8145 licpf234.07 40.9141 mo234.07 40.3008 li234.994 40.3008 235.189 39.9629 235.189 39.1289 cv235.189 34.6768 li235.189 33.7656 235.008 33.4277 234.07 33.4277 cv234.07 32.8145 li238.561 32.8145 li238.561 33.4277 li237.52 33.4277 237.375 33.7656 237.375 34.6768 cv237.375 39.0508 li237.375 39.8574 237.455 40.3008 238.561 40.3008 cv238.561 40.9141 li234.07 40.9141 licpf252.079 32.8145 mo252.079 33.4277 li251.142 33.4277 250.909 33.6865 250.909 34.5996 cv250.909 41.0029 li249.88 41.0029 li243.985 34.7803 li243.985 39.0781 li243.985 39.9365 244.112 40.3008 245.22 40.3008 cv245.22 40.9141 li241.876 40.9141 li241.876 40.3008 li242.786 40.3008 243.06 40.1055 243.06 39.0117 cv243.06 33.7656 li242.903 33.6104 242.591 33.4277 241.966 33.4277 cv241.966 32.8145 li245.036 32.8145 li249.985 38.0732 li249.985 34.5869 li249.985 33.791 249.843 33.4277 248.786 33.4277 cv248.786 32.8145 li252.079 32.8145 licpf257.447 34.2344 mo256.365 37.3193 li258.641 37.3193 li257.447 34.2344 licp263.043 40.9141 mo258.318 40.9141 li258.318 40.3008 li259.203 40.3008 259.518 40.1973 259.518 39.8574 cv259.518 39.6885 259.424 39.377 259.242 38.8945 cv258.943 38.1279 li256.08 38.1279 li255.844 38.8164 li255.662 39.3506 255.559 39.7148 255.559 39.8203 cv255.559 40.1709 255.988 40.3008 256.703 40.3008 cv256.703 40.9141 li253.359 40.9141 li253.359 40.3008 li254.322 40.3008 254.439 40.0801 254.906 38.7266 cv256.939 32.8945 li256.82 32.6074 li259.164 32.6074 li261.533 38.7646 li262 39.9746 262.291 40.2617 263.043 40.3008 cv263.043 40.9141 licpf93.6782 54.8105 mo92.9199 54.8105 92.4292 55.0332 91.9683 55.4932 cv91.4634 55.998 91.0479 57.0537 91.0479 57.9014 cv91.0479 58.5107 91.2852 58.9258 91.6567 58.9258 cv91.999 58.9258 92.459 58.4658 93.0684 57.8418 cv93.6782 54.8105 licp94.48 58.6895 mo94.4067 59.0146 94.376 59.252 94.54 59.252 cv94.7031 59.252 95.2534 58.749 95.5649 58.376 cv95.5649 58.8672 li94.8066 59.6689 94.0044 60.2939 93.4404 60.2939 cv93.0537 60.2939 92.8457 59.9678 92.8457 59.4023 cv92.8457 59.1338 92.8457 59.001 92.9502 58.4658 cv92.9199 58.4658 li91.9834 59.4316 91.1367 60.2939 90.6904 60.2939 cv90.3486 60.2939 89.665 59.8779 89.665 58.8525 cv89.665 57.8857 90.0068 56.668 91.2852 55.3896 cv92.5039 54.1865 93.5439 53.9033 95.4609 53.9033 cv94.48 58.6895 licpf99.1968 58.9258 mo99.1367 59.1953 99.271 59.4023 99.4644 59.4023 cv99.6582 59.4023 100.178 59.0146 100.609 58.5264 cv100.876 58.8057 li100.103 59.6846 99.0928 60.2939 98.3647 60.2939 cv97.814 60.2939 97.4287 59.8623 97.5918 59.0293 cv98.4683 54.7354 li97.7407 54.7354 li97.8008 54.4092 li98.7803 54.082 99.6133 53.2949 100.49 52.0752 cv100.876 52.0752 li100.594 52.6709 100.4 53.249 100.193 54.0518 cv101.367 54.0518 li101.233 54.7354 li100.059 54.7354 li99.1968 58.9258 licpf117.748 57.5791 mo117.644 58.3213 117.331 59.2842 116.953 60.1689 cv116.914 60.2607 li116.797 60.2217 116.667 60.1953 116.537 60.1826 cv116.42 60.1563 116.276 60.1563 116.12 60.1563 cv115.769 60.1563 115.392 60.1953 114.987 60.248 cv114.597 60.2871 114.181 60.3389 113.725 60.3389 cv111.981 60.3389 110.783 59.7529 110.041 58.9463 cv109.299 58.1387 108.974 57.124 108.974 56.2236 cv108.974 54.9238 109.494 53.8438 110.406 53.0488 cv111.304 52.2676 112.592 51.8242 114.102 51.8242 cv115.495 51.8242 116.264 52.2158 116.588 52.2158 cv116.706 52.2158 116.771 52.1641 116.823 52.0342 cv117.305 52.0342 li117.422 54.7539 li116.81 54.7539 li116.667 54.0908 116.341 53.5439 115.886 53.165 cv115.43 52.7881 114.858 52.5811 114.207 52.5811 cv112.475 52.5811 111.291 53.999 111.291 56.0166 cv111.291 58.1387 112.527 59.583 114.35 59.583 cv115.574 59.583 116.511 58.9189 117.135 57.5791 cv117.748 57.5791 licpf127.96 55.5605 mo127.96 53.9355 li127.96 52.9063 127.752 52.6719 126.867 52.6455 cv126.867 52.0342 li131.279 52.0342 li131.279 52.6455 li130.331 52.6719 130.148 52.9063 130.148 53.7646 cv130.148 58.2305 li130.148 59.1396 130.251 59.5049 131.279 59.5186 cv131.279 60.1309 li126.867 60.1309 li126.867 59.5186 li127.713 59.4805 127.96 59.2725 127.96 58.2568 cv127.96 56.3682 li124.055 56.3682 li124.055 58.2939 li124.055 59.0889 124.146 59.4932 125.188 59.5186 cv125.188 60.1309 li120.723 60.1309 li120.723 59.5186 li121.621 59.4805 121.869 59.3232 121.869 58.2568 cv121.869 53.8936 li121.869 52.8535 121.582 52.6455 120.723 52.6455 cv120.723 52.0342 li125.188 52.0342 li125.188 52.6455 li124.315 52.6982 124.055 52.8145 124.055 53.8809 cv124.055 55.5605 li127.96 55.5605 licpf137.465 53.4521 mo136.385 56.5381 li138.664 56.5381 li137.465 53.4521 licp143.063 60.1309 mo138.338 60.1309 li138.338 59.5186 li139.223 59.5186 139.535 59.415 139.535 59.0762 cv139.535 58.9072 139.443 58.5938 139.262 58.1123 cv138.963 57.3447 li136.098 57.3447 li135.863 58.0352 li135.682 58.5674 135.576 58.9316 135.576 59.0361 cv135.576 59.3887 136.008 59.5186 136.723 59.5186 cv136.723 60.1309 li133.378 60.1309 li133.378 59.5186 li134.341 59.5186 134.458 59.2979 134.927 57.9434 cv136.959 52.1123 li136.84 51.8242 li139.184 51.8242 li141.553 57.9824 li142.021 59.1943 142.309 59.4805 143.063 59.5186 cv143.063 60.1309 licpf148.682 56.1211 mo148.889 56.1738 149.084 56.1865 149.293 56.1865 cv150.375 56.1865 151.025 55.4707 151.025 54.2852 cv151.025 53.1406 150.412 52.4502 149.41 52.4502 cv149.15 52.4502 148.889 52.4766 148.682 52.542 cv148.682 56.1211 licp146.496 54.2598 mo146.496 52.8662 146.441 52.71 145.336 52.6455 cv145.336 52.0342 li146.053 51.9951 147.016 51.9287 147.9 51.8916 cv148.771 51.8516 149.5 51.8242 149.697 51.8242 cv151.896 51.8242 153.342 52.71 153.342 54.3516 cv153.342 55.458 152.586 56.9014 150.102 56.9014 cv149.686 56.9014 149.059 56.8369 148.682 56.7588 cv148.682 58.4893 li148.682 59.2568 148.916 59.5186 150.152 59.5186 cv150.152 60.1309 li145.336 60.1309 li145.336 59.5186 li146.262 59.5186 146.496 59.2568 146.496 58.2568 cv146.496 54.2598 licpf163.48 52.0342 mo163.598 53.9727 li162.986 53.9727 li162.867 53.0879 162.676 52.8408 162.037 52.8408 cv159.484 52.8408 li159.484 55.6777 li161.162 55.6777 li162.09 55.6777 162.334 55.4824 162.334 54.6895 cv162.947 54.6895 li162.947 57.4092 li162.334 57.4092 li162.334 56.6807 162.127 56.4863 161.178 56.4863 cv159.484 56.4863 li159.484 58.5811 li159.484 59.2725 159.563 59.3232 160.266 59.3232 cv161.775 59.3232 li162.91 59.3232 163.207 58.8281 163.402 57.9688 cv164.014 57.9688 li163.846 60.1309 li155.904 60.1309 li155.904 59.5186 li157.088 59.5186 157.297 59.2441 157.297 58.3213 cv157.297 53.8438 li157.297 52.7354 156.92 52.6455 155.996 52.6455 cv155.996 52.0342 li163.48 52.0342 licpf172.008 52.0342 mo172.008 52.6455 li170.9 52.6455 170.68 52.8535 170.68 53.8809 cv170.68 58.3975 li170.68 59.1943 170.77 59.3232 171.645 59.3232 cv172.633 59.3232 li173.426 59.3232 173.699 59.2979 174.793 57.7744 cv175.404 57.7744 li174.414 60.1309 li167.219 60.1309 li167.219 59.5186 li168.35 59.5186 168.494 59.1816 168.494 58.2568 cv168.494 53.8809 li168.494 52.9443 168.35 52.6455 167.219 52.6455 cv167.219 52.0342 li172.008 52.0342 licpf190.337 55.5605 mo190.337 53.9355 li190.337 52.9063 190.128 52.6719 189.243 52.6455 cv189.243 52.0342 li193.655 52.0342 li193.655 52.6455 li192.704 52.6719 192.522 52.9063 192.522 53.7646 cv192.522 58.2305 li192.522 59.1396 192.628 59.5049 193.655 59.5186 cv193.655 60.1309 li189.243 60.1309 li189.243 59.5186 li190.089 59.4805 190.337 59.2725 190.337 58.2568 cv190.337 56.3682 li186.433 56.3682 li186.433 58.2939 li186.433 59.0889 186.521 59.4932 187.563 59.5186 cv187.563 60.1309 li183.099 60.1309 li183.099 59.5186 li183.999 59.4805 184.245 59.3232 184.245 58.2568 cv184.245 53.8936 li184.245 52.8535 183.958 52.6455 183.099 52.6455 cv183.099 52.0342 li187.563 52.0342 li187.563 52.6455 li186.692 52.6982 186.433 52.8145 186.433 53.8809 cv186.433 55.5605 li190.337 55.5605 licpf197.163 60.1309 mo197.163 59.5186 li198.087 59.5186 198.282 59.1816 198.282 58.3467 cv198.282 53.8936 li198.282 52.9844 198.101 52.6455 197.163 52.6455 cv197.163 52.0342 li201.655 52.0342 li201.655 52.6455 li200.612 52.6455 200.47 52.9844 200.47 53.8936 cv200.47 58.2686 li200.47 59.0762 200.55 59.5186 201.655 59.5186 cv201.655 60.1309 li197.163 60.1309 licpf209.488 52.0342 mo209.488 52.6455 li208.383 52.6455 208.162 52.8535 208.162 53.8809 cv208.162 58.3975 li208.162 59.1943 208.252 59.3232 209.123 59.3232 cv210.115 59.3232 li210.908 59.3232 211.182 59.2979 212.275 57.7744 cv212.887 57.7744 li211.896 60.1309 li204.699 60.1309 li204.699 59.5186 li205.832 59.5186 205.975 59.1816 205.975 58.2568 cv205.975 53.8809 li205.975 52.9443 205.832 52.6455 204.699 52.6455 cv204.699 52.0342 li209.488 52.0342 licpf219.202 52.0342 mo219.202 52.6455 li218.093 52.6455 217.872 52.8535 217.872 53.8809 cv217.872 58.3975 li217.872 59.1943 217.966 59.3232 218.837 59.3232 cv219.825 59.3232 li220.62 59.3232 220.892 59.2979 221.987 57.7744 cv222.599 57.7744 li221.61 60.1309 li214.411 60.1309 li214.411 59.5186 li215.542 59.5186 215.685 59.1816 215.685 58.2568 cv215.685 53.8809 li215.685 52.9443 215.542 52.6455 214.411 52.6455 cv214.411 52.0342 li219.202 52.0342 licpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Design Services) (UNC)%%Title: (UNC_logo_542 cmyk.eps)%%CreationDate: 2/12/07 11:26 AM%AI9_DataStream%Gb"-6Bl><>FWgMgnitn_![Qe@-h^!T0L/s-*^<R2eCKQf@j%#:9<GM@W^_,Rqe:NX`*"</1G>(=gMVA<&lOpKOcco=3;Y`+Z_(NN%q#:6Dn(rP8n_sNJjh^(un?F$d0C=7<q:X*nqn(b!rGLHR/D(*mcAH\W29]\6?ZKd;kM4q*r:&kG]=75nrV#9,2fHJ.meGc7_oM4p%GrYfbp%uY1?@UH'o(m<FqteR0Q_0iK?2VV5]A'gH+$SPprcBQ$#%6$\iSs`Y[pT13qn%?'qsg!XB-Mm)+0_g'J(OO1h8.D?rk%oC%DSQ5Jm;H4$Dnl:`]CtFVi",Voq"%R*5CI:aD^2K'E5u>ae))7^s6e?k47&U@q>'hNs6f85n%S\knb&f(+5[%$?VoASnFl;)gXi(S%ioIdEBCXnqK`CL*F3?HN>,#uuS8n%*S(`@%c"GRoE6,S[H!:Zan#Q*SLNd\:m?_[(hRn48l,.^pU1sW#h&BOio8fNXHM>2/N0AC>%>TH+[p\jL6O2$2EmSfSk/m>+'IeD[c\$p4ro\Jiff._E$O6usC%K>>Za)Bg`C:jE&p3W2$0+Z%kTA&Sf]`-+/O0ilqJ_tkPpAI4'%p`DKL="]ju)LjGRojCL`B+FoK$a+(3L[=\4pcn$WH@Yad@mHC<[QXK3a*6FRHiH`W%Y/c-Fas;Yh:I)<Z9&cs590Q')?*_!Il,5)%hbTm$^?7d@<'(#YpLDG#YJ+c/]R'VNn\Z@uJ&@MC?*oT@hlueI_`.3Hr>GX`?N:"/)F+6#LL5OEXkR0i5*oX:?cjI>Hi&6ge),WP%nGThGp\p3qQCje!rS_,?*e+"_e"7Pa^O?.TGJ?*kN.*q:)\%,bmYA7S4+$qogL&ajh`lJk/G\GtRt(7c[r4I<QPn/"qWds%TADce%d8t6oR6DZE5(<OfT+:njiPVdXDuPq1PJINYp-4OTr"`Xas-rbidb?EpKCtSbanWu+V6rMcL%`QZEpq'#\$th?q=sg@5J;EMpOSmM%l^-gR:\\$Riud1Pp[M>\mj$3M06dHeiV))OG9%V-aDYF8r:KF%mG"iDo%g4QG7XFkq=]l/Gn%rOd&Zn*]Y4:5m4_(b]RKnRiIAT@%q!EK8_`%J`h>=D1$,Q5gQgquL\%n%8?iB6^[r68rTDiql/\cT7)W/8Xs8(aViS#T>T8(+?T$8O;@+o>m6R.O7l$N*g*h$1@([m,D%s6[kY?b^C+p6UQ,s8Muof6;/J5((8@?S#DXU[dSfnb)J!b?lpSot"DklZ=/N_mR7&fCmp'?!glC?!\PT0!<L'l;bC;=6V2@Ke%Z7%Y3_Fa]Y;%i]Y$@5?<j(/f#r*%0@OLF%%$tA/XQ1Z*3YE)a33N5G]>i1emg`&@lhV>3;TC3g7u3g^::ba]Js5&>b#0NMfOq5dRCeS%(]M9WfF)bLI=?<fH%%lj3'UcqlZkM:kNP+#LN@t5cL&0AfCc.MemlClkI&l=F%nOC:jmK:<`?0E<Oj[$E`(+T/Z%Nk8h?\2ig+&3%ak-><?fkk4aQL+rdR:.#@h.1)QYeYF3aJT*FA*M84OmD/:+=-rP#!\f\KbG$X*>MCnKOPXZ,RDt9JONuI<<k+'<]5Q\.$Ds&^E`Q%-01.S$mGE(Jdo_,q^[0\O8d"gqs'*c55FE3@-HG+XZ,\%?+EUPF;OB#<EEFKa[I#9GKs?(m'XO4QhG)Gm('7,fPHb22HXmg[7t1F%qe4\aR'rNCBhMphX@sS#BmhXaZS[\Kg1(!QdU4a):l";sT&h7[RlehIo.2QFd=-l4q9Q>Ir!dJUIG*dJ:PUUsDgAmrrk1@/>Ak$:%qnpCnL&m:DO&*IP3PXafOD!fBnoMJ,\\.+aJ'6C9ht?6sg73OA4cB4l4mno^T6p]&$iO`0`-\(tnnF%sJcFJQaurN@+$AA=(W=<,%EoRV:nVE+C.kVde\8L$,D*5`q?4n2Qac3dZ`a^V>YISI3kLuEFIp?JOTeW@m(fP,WlJ,_tNE][HY&taYj']$0ZHtR7C7MC_%X6bh%h6Ct4X#>%J31t&W0JnfW)J:U\6_65;H#,&'Wm0BW(@%&i)F'4@YNEi3CZD`;NSe&#^3e[lSo&l-2gu_c?Z)<\j3d%L=!&C-^1utA%)@q%OR>8f3;e,6l1&:E]Yr%Jjg$ndJRO/3J-4PVT'r3/sPU7]H2eh7'UkYprI;YJfiL2S8RT,E<FA\KkESeWn@hUr,cEAlp'1:Q/%?^aY$Rr"7WN)H.HEm\E`bD+R!8(6N9fAr@HjI4TZS'pAfo-WoGS(r(-]Y63s%WY8d$;E3H9gC1&:ccA(=IR`]g!KWmatu]422Ne>%aXT.SX5FT%^f,6,Lhm[t!hr?-*Gttk4qct[cZgMK+'tJrr($8/rtr$#3O0=>A]FL+;!@c^kl&hr'VD&Fc[=:ahT$ubodimfjZ^-'%T&lXM:OT1Zo!o9.BE,9`:V+FDcU.YW\`]mA+n"Z;Pik3cH$PG@]VdhEcV^;.FQ_aGb4D4m]KA]0hUA$^k:"Z2UoC4L^Zb:A%c(We%jmc&pJfXh\W/%,le-)#ipA1NNq.8=Xlh4uGE5@%,&A=TsU-D_8?;=)>T.<;_VkiP&'r%$n;Y9,ZdE<sfqI(P9NpKf`H:Wj=:]u2K%oR0:,54?fQrh@`X"4-N0Zg\Kl%m3o(4K:4k-ai2o%bHPeMuMcYGd[Y[ZId,(BeLrP5!p<=MEPME\PE=;c[^',=mic/4T4.ND)C9?%kO^)#rKpX'k<2%8?Mt<&AFJ'2XZlFFE<!7,eDS/Uf3@d>mZ/I7>Ob$dMh`l5:Ug#T3IWD!U8UB$9DK,f%9d)\LF?oankqY>;1k1$%nf`l/[(MV6;-\nb>H+Xq%?okKs"iB21'S/PinAmNp_tnJ.2iJ"JnA@A5Pr>cbq?__^2o0!'3iq:b[T))%)"gZP^5/$52&1@n>"B,%c-k8)K2&=8(F(gGpjJd>RDf`>egubC51gQrUns/5_"u3j\8h?4CIS1ecg=NMPZ<XHRsQ']?7mif-p`Fm*Z&a6Y^Rt\!2-H<-W(+%%b4/4#EW*g8rj+Z`;*"W*_%(r_)pFWYs'7Z"A\d;C##s4G",<5!9J^\AZd*BWS8/5OCn_f,1h@Qk1u2%cg1nRfg!)D1?m@!;1"t\f%(:;hPjT]Q\C:t5V%9[YkL*K_=ZK%$.PY=)JbR"[2F3((C2BB*gOBq#V]u=C6+mTWjGK@W'2BK0pJ=VHH4^dTd>eo-I"s5PpOO4<W%5%+-ddgp_#_>49-+0Y`r%1'%#Q`*,UUZ'(a2$iP7kZ7q_&=A0e0Ee8HK'"41&:oZDN'q&#\jW[r)BL_P=>UnHdE&*A#Y[bYR$K'=%JcuHs8-SBO?qECLCD,9`NbDA&AA.dW*OH$q9,:5q%a@Zg9hf#3M@3UX&mCh]>+Q()T.4$;keZ4`@_\9#O*'W%HJ"`siE=N,7??UZ%n.YUhr+(5aTc''U@c+8+8u]Qi;IV"/i[N7d4!>/^OV.=V7GRL)+q:H,_k,\-737bSnTKkB(^\,o_&[@%CD*nf\Q2XH2s.9"KZ$;M%AAgk_e?[70&d+t\,Dq061oVU-n![@?dJ"7fQKp-9B]OaR^b`eL6h$CP#giVZQPQD968pMXh*?pi$-++OR#&egV&o--.0s+B3sk.>%UeX=ROcb@^a;uWN>2kd4&2f;89Sf3t"GKFiJi%&7.K`u0d$C*2&:HhOK+ID0U/XVGN)5rp[HSB<UcOj[O`,>SRE3]>K_TQ9j/49+%*i)JfP,OL:NDDb6m(:&WJ=l.ds-lRhePmMi#(:-=5+j7IlKZ(-Su!pI4\a%LU86c$:DT\=f[%:acbA&XrmTQH^,Ve#32"#GTYEIZ%^Gqn$31taXF7`8[f__st`@8Xb9DJ.3c_I5*?h!k(55iF_-Q2=L-%,P^q"0pBl(:M%rt//JQTW\LH)+g<8AF5JhOjN;bi_V?l":m]%[s=cV$GCg9o^^G%R`?7%TB3%tYn!Bt1nI&sT$ZGW5qfteH?kp.s/?C>r::;M"i"<(o#lears0e)0-5lI;BbVWLcGaQ5mIFJ_Kgu!%5\WHX`*Z@+Y:04!m!jTWs,k3u/ifYZF<Aq"aa6AS4?aTqKu'.T-mVb-5[>e:1/q3lc8bmjJg,4`BSJlR7"I*5Q=Ul^/0&C@*]8nl%EEX(#$/.j<NME/t;)rZTU:2c%$$tYt:JaK_((04kSV/&i8`@GepE/T@#&n"H(I`[^M@2l?Kq9X+/?$Y:6_Qpgq4j'0Utc84[J]MD%7@m0]npkAbrBkVNb0skNVai.3pGm4h.8ftW'Im#(b*BS=V7+Or>+M)rWb&#*NGdQLXVqqTY$-h-'rtEZTODs`9=-7tZd(SblB:/,%3/l""TN#He.oShLRPo,7?:qJf9j-&Znmp9oj]u47[3Mt!q[2bei\%k_>:"JoF4Z<;T^#:pDHI*k\%CG-at$)&)"sW.%I#:`0<;j$%Q<D;S65GP%=g>DObdNMa\hVqu"q/JW13/=n(+8.`mgC@IVE"/<!B3L7n>k3go)V:_k.&c,A&u+kjO]8@di$_=d#6.'DJ6@i&?&u3%=[e=nM&pXb9JN/<\G/BfNh]G`#p,3n,)/K(@?lpfZA"7Y.1oW*[7#3.HUs3S3p-Z<23Db@Qi7S:-W1IC*uP(5jsV^Bp]U*qiZH67%(>N\71;n-fq9X)[?i!::$Cj+ePpVM\gl496EkR00i&Rfh("L-P.UbfS0VN4u;*>>d,'m3%*HPMl"d:MN&';\)RTMJQmrQu'/*`9$%ogsB@\R/+d!M8@q&Q?L9BNr7s>VBIn=O\8Y1jd$%h(MQH^o1+<H)+H5i>+l\]kGXInT&p.R(r7&]PPf!^0Fu&k-#([O#P)jJ(@Q$%kPSL.TZ=AkVu8rYa#Y2c3V7UUF$H:E3W!jnSN:j_)K;g0fU&-A/8,OY[%Pm#R3Do2&?7G5"n1NE?$6Ll[0D:kmSF4a':i1Je06Q5%H^2ql7?@4`BoWfo"VFh")@Ge]3akM.0IF;7+I*s!keWR\;DfG/n@#m#J2J<3bq<S;-m>C`MR>\G%(]a`'W`[pKO<CQMi49H2!>0K%5"g=qGu&j(cnW-J%m1kX$Z[pBHTLqDoZo6^U0u876E)OZQ9-8m9F.e_,9KMP5"BKrQmNAI-F2P@9+:ZTY*_=n$;Ep?a@&G`aFj!?%&>]fHS?=R+iQ+t#kQXnEN,i\]h@:.ETF:(CM>.\UORiX0R_n\BTs,4"BKDk<86Iu^5@VpZ3Ted)VD:DL+pnR7egs@0Lu;O5fQG;H%k5rW-b/?duIq0F.OAAt6@B!dGO[R,"O[Pp9+G9<[o]T1eOO,&B3b`#;,BROZ0*]!3P(f'^0p-3EV&JqVHN^Y-Q'=cl+NhjM8m(N,%_#9eH/hQgrj=.'C=UE=H,ultUUuE`m;Y@$N&OLP_);6O-.][`84sa+#H'OVq[@1*nN6=6=18lu`%lmS/AYfV*/Bb1'(DW<+rT^qY%N\t:rM&/pB3bMGdQ*EV8mODA(N$grRa!]e/at:9mpk>=TR_ETYkoLM.IZJPpfkg5nJ,!!!qSkt:hTo&UhY;qO6Ij\jii?Y](-b]V%<\:n![HM2k*Ug&VQWl?Dg><]$q_TPrPCdA;(*E1E7&MDW],hd,5<hs;,sC)OKDtYD3qN)4s3De4%X9Zl@$^QFjPcq5ACMq,.lHJ9%5VY.49-pJ@>G<BT)a.kb>YIEYb(4qOK"!fSj<NAB9,cQmV5#J&MCaK#h5/+)T<i-2n>mqcmmt@fW!$5Ro0hQO7.]FBRRY((<Ye[3%8F_U__EFoK9`ZNgn3(c=-U#ZIpm%1+HV+.Xi)t\\DI7e,a*td,\"hS-WnD5Om9^3Drg1lr!_tQ69Pqo7MV>1'fJYgJ;iR(lgLr6g%BU]O>MS-r!4Z$I9c2&-&W]oVB>YKUQmQ4qYfePV9#"P+"P*,T*2(#Q-+&qnLhca49_3P<b>BdJT[4%QGNBs(Ph=9'eDf@U8*]Wl1%n^E7=s3tIHp5j.JeDjJt:54+5PDJr34[-As2k]d4JXe+1?T^Mco+>u2b?fuO5Nb,S`U7g6c_<X1mQS7@fDfu!d]/*==D^TTAh2?p%$U'bVK6Cu%^p/nKcK?s]RMU9`=Q/>I+m1!sp?07h_Z`1=`p#!B?p!Qo6%-auE8I+cO-j34l>LMj?r:9M*0enrSmQX9?Ab4R*P>-Q%\oD]YP_D!GF#5O@+V6(+U;]C)DGXDA7B%F_,"h4PU)lX@!,YA]bf)kMX!M]2aC\6&03;J=aaQ8&*%kjpjeC6Qms$^a'"-DEBh.dV%Cqs9[$g-tc$YGeYQn&99RP1#0"V\ft%OVm8+UgdP>)DDJ%hc%@Ek)<^]juL8(rMZ+N,Jj(CO+%s7R37#-0#qQ,o;_3a`k$;_tV.-%e$BjuY7L,Qduj[;nIMI\5+%c7E/*_3ag_jm'g<f$Dp^$aJ)+%um@Lo'[hq3QOQO5MLLYeAMW:;.\^FWI'632r$ejIflF5o+a/'C8%Y)ikHN?j`uY1:cU3;U4eY<2X"h:EZrh;sDe^BLYBM;M)kJ)(.;El"KT8A,%V00hW#APkr_fXPG1+"/0rEQZ;;qCf:,[JV[Mb_2Ju%6$&77J$f!/]g!ud6h87.V:Gqr,"H0=#[LP8q6-1D&]m+A=njBA^1$k.'_&'0rA(=DZXnW'f9\IL]%h)OT5FG"<PQg[rGL+laK@1&%q0lp%a""+r6-KUsnL&!)-fN=G@E8J7qG9k'jI[-OOtou!C3:Z;UIPYk-%7%<bEMER.<?f`J1*HF#t3beH7!!qIi&$Q03l2onl,>*%r$6_85=$C]gklrc,/L!q7g*6DQG'MgHsZfClVmU.r+%LbB0J6G7"$?K:OU9`AZ9&m&3Z<0Q[qD;dBE/:5(,EN^H+JgGVZ5lB[-OH%WgXH%:R9&!HYr*s],$WBa+SKJ=oX&'`FWOMff/89D(/\)8t\e#H&?UQ>e+VCN;KqeAJMM\XCE#ij5de67Ed;G/PI]IChm1NW5Zq/%C=,b1rkrs4k(pQclt:D>6H\`1`W)'drDTTk;[L+/D5pqa1sA1KNU]7``H1G2(X$kLlg,A;=ls'5=^,OEK?_`>g<LAe3VQP.R9]jt%_rD:$@*Wr?p*]i71&2MiiP7k^%3ka6k-Ke)@0jrh^YK"&$o+>JY)*Bf@Xm=78.b%5I1;0$EL&pS$Vd_e>s>,?c'Y"<'Mq,6Oa-B`%X9hLJR.#I*T&o$hHVTS,!@O<hYUO+0\l.Ua.RYm:;og&C3kes3jl(55O"Xm_6Eba[^XI=]*a>l40b58[jWR(dWR(TU*?rs"'gjN$%h2X6o;'&SrURP)G_1j^K;+<Xi;>#O8)F72HMIj+5);I2J;!_tOXXct;Bk)Cl(s^'+[Z(Q16IF3`JlehSd42S;'AL!P*LC%@Im8ef%[/.LV`:"!;T329W3Osp+9>l2F^DH968r_]jNd+a\#UgCll]g%G90D:.^h;?l=$5KqG@\'n3W5i\4<>lAjgdd*rGUA@T(h^RZ47JO%Ru.Cc-]aQ?YVLc`WM!f/X@d#!!`K^KOiW&0;KoC.X+bq(&bi2*a5%eB?e!T3:Y%2P<dp`!4Y'7aV<H)48KS4!e+<"m\<iWd-!pjs%^*;^#UuX$e^7;RG5*gpf=:+5[eGCUhZ+D_n"dE;j_qK_s])tM)+r_%/[2jG&iFFY_9SGVLl!b&mdYO^K9n=4I7&E1+q2))3XOQ'$%S^j/Fe9]1/l=C^EI\G`dL!=OG!4uM?YTGlpA[#JoS+(R<Njs6$qAd*7`@8iF3H<8K/8W0U6cchT&"SGFM3G*Sl-^->hQ>Ch$n[+H%DC8J"O>oauZ]h8K3$EQNPWk'@C@/j,I<b(@E0D5Z;7a..jR)j8mOO,gm^t!ObQ+O7IiZouV\Y"_63>7B,]f&D66Zeo1Ebh!IBDoa%[,UE#"4RiV&(TDBf&L__7GK^eJm:M_kFA;)*fb\)qRPgfiaQ?J9m>HQmMg@G1<4VT`.uge_SZ"Xc/b6&_F&2\:#AM$P[4R/o^'N\%pci?E9u2As>MNQsog_7>m&?S(eJh4uX(sSA^#dB553mR/eie7uH,+@s`:EA$9HO^R21VeY,aWiiN`Zr3_/)/R2S"GjB.;Os=Nd<*%&fHpcF_"g2RjRK)oHbPV3,8maFF.pVkXVi+Luse#KA-4WZ]%^lcNmOJ8DDI4Z^N&@Z=d4DRl(Z\G2LE1LE+L/A_HZ+H_t@\1tf14%>@)4fXEb'`nXFTF0a*BpAV_)cd3:_[UdpB>fr[:\:e_pDfo=bRG)s=XfqV+7aW.HnQk$$cc$h^cbe.Qt\Qi?+(3Ya&d4ZD]rM"Jm%0.K<<e%MK>:R%jrCji&T*mrX_H<g>7`>Q8RGXH+Nke8-<6DJ-?-t\a'50uImkDo"Pa6fiYcXlTjY.U=,p91$WZ[6b:CGm/=e=ZQs%3&3_MNHl]VI!KIHO,(TfQcE./Hu'Ypo%9t-Nsu1u*a?&CYsg0/bH[sdNBYtcpd"*%cV5"_[r1#c4H?c2nah0ggQ\3uqA:<&A]O@D%O!6]IE>rZZfp<\>s3`nKl\`'4o5U4`J&ZpjT1.&og%4;HK)RdBrg?1QSt04`(*igk]ar<8$50Pb1MuhmE^64"eE#I1Zcf[JqQIc?%Q^92e0@>X"bE_`Jd<SmJR\*U4+&ptUJQV8/l*U=;m9b@B&c>S0&cC-oNuhk.Iu5KDTlf`nAq`H(5Put^:cp4Or5VAb-Pu0ArGu`Z%?/%`-/'I/!UUkTbDOn4?&+A'cgs3jDEZ/jPh=e!-fVZr.DT6]mP/]tkgi9<2rp<uJp:-T`:8CQ7ROY"rkLOe=2HAq;P&k%=$m3X:%/OL8Qb:,pY@T@V%:QaXHRCT<<gbK"i>Rbs]l\qpU]NgsN8#F^Tb>_V^>qkRAOZph%j1)1B8%PV'q\ZqXEJt7hY/BZI7/F61Q<il(%hq(g#r5kJDCX?DmS'U$`)D(c<OlsjNpa=2Y5fgo'.i`g)U%!rdC7'bhoX?AhAodc?qMj#WPNQY_Ii$*C88q&\aNsa8*iBRrLDlb?%N80Bq]s#tI&dPu]^UaaO]Vj#r37lurchlJQB68'B5Q(AqqqljMp\rXRpYWW02;$p/5:jSK(B3=X0>Dr6l-nCJmft(#6On:Dd<F4d%T"-bX2C])!K\V=\4o,H"[/_h6J,B]RqZ!rFs0Vn-m19cB3rJUL15E%Frf=g0s,g(EjQEtL2sk8BFSM]?\f'@TTAO-K^DX&.j2_2$%__<hSRpcI.]R-Qk[]Z^6n6b2p&m9FE)q=BgDd'd$Yfm7TUu@l?h*Ejlc*]j'@LrBoo@t5^!3P<Dr22Zi1^jmurc+qRNou(njW(Yt%iQUjd(sr,Y:mAW$k-9?/6C6&rrIj&<X[*6f#M5G,kmH1Ph\&nsCZFC9^>`m+=7cm/jNeBjLVU)g,9/&:=+D?(j:)MFnT<K'XrWiA%"8K<0,>e]4@C]X;l"!rA[YhJ,o^ZYmWkKs@P'@BDBFBkanuFsGBug!)2W`7/!!^Isol1J*g*7PdVSU)f_AR9TkB.-7AD$OAXZndt%GYhf[7Zes;,Pkp2aWZUm$YP>mZnU.%^5,lZ]dcA5-P=55i>79Sp6foK_^7nW`BBi<@INEHp'm4<K,"_G(2um_MW*`^XCe=f#f(B"%>PJU!LCNe*83P(!Y&JmX#A>Ai!dN/E3j(Yo9,7.>DhX1e,*4]pg7"Z:]^*=eZURq&oM`R:C-<Za83\lXa$u=#5\F)'j54Cqr+e=!%1&6I9=*pS49_":[=(ur7f7n;=Gnn!?T^PE@.d>8Ok$:8<4-m/10VY^cWri`/c[:I78tTsb#TG$W7XY;eiU-hc%\_.ed;n8?d3@:A%L\(uC%=X6Y4>MA.)Wujj=n$.K"V<Mo_O.H9JH-/<*HYWA8,t104-k?40r4NV9Rhk2_[Ck=jn.!iNTN8G>kAZsRWPJu7mBImVLcgh%j#BP4L\)_[]K02/gC,UZ0`,b_c(6f#)3Mc?ptalN&ea^f9Gp)"e%a@5okj]Y;-Wk`XAn1:oVtD8GO9P*qJ#r@%$TT";*TZ&'<>r-%,n,Y3WC]Q#)#%/H5\XlbD_r4*"ZgS/TrC6b./Hu,%Zr+`RJ3fsDXC:^U9<uuS.^=-rob21n[3(e"3I#9Lu=,$i$A)aeu0?dEeqi!%,?8a.ppW2(#a=ktOlQ2o-dR#E-u"W%E*H-8`I7QB;#Do"n1a'+*T/1;OnHBI9IKUZ]SaYFVR6<GN6VNs^Hm,q5T9buY75p>V!uu*%YFmCp/+am8p*cOXLn3D/X%mA8^,dD"2+4LP0.He.PM[;%KEZ$5)H<4oRd-0W,!A#/ciAR)g>3>+_kM5WYB*pgI5k@=m+[XZ-uIGO%b'5S0Ns@fr8LRg$j`IdC$F($BTfd=iP0W%T9fI^^og`7uG@iWfP<W8T3.5(]<uG$^NGiB`T;EYJKCSG>Y<Oc_Vshg$AUO(F1kS<V%?Do[JnaDE)+cj,L_MijOrC?4DhXkrEIs".)Gr#m-Fqg1EnmCQ=lXNer&]bOhkuU>(criCFed2f?CcWX6XRErcMFI"BUR/?3dShM'%JrTD>DEj*GdJF#DZlAb;OXqV1]MK+<9ZoskO5!#55JH?:?Mj.I.NRKkntI0%[6r"4=o%smnuD#&7&.D\N+ToI#a%$/=CbM`)MFhI%b=$2PP>&oh3-AhuS]Q']6:6i9`rSAmK'*jLTBWg`@]O,tp'j'AYOp\9FQ;q8dVX>L>p#@cZ)Tq"BBMI&R;*dfC*$JlS2ff&U"YX$%)L9@/mk_fmmDMZLX>Gs-1_5OE#.:/\Ja/LU68dU>6&\TVP6tGD'Gd/L#'a-M@L>id1:Y@^JS)j8ZZKS;BLL:GM4_<eIE:mT*Kb+T%"s2cVp<cpq`SioV3tiKorMWF45P;:MO3IUtb8"06Y24ZQet,B7M8G:<-pT\qAU`D5Dtt@d&bL$4s+Po>=;>'?7R%s&L*>(N6'VU^%=h+$oR>?1.cP]4?pA_VN2fF&\>=Fsu-rZ9NrW<tarOEGY\).DYr=;&;ZB%&PQ9#d/^fpTtEE0I'%:^Bh$Pd=Ba_L+'O.A;(1Ol!.%GC&[=bA\!/4P:3IkV!_o^]3^tda-6hrV#,<4/=m,\,ZEe^Fe=re'@?U&0fK%go+@;5,fTrr(m2="8uqA?qI68!IQ\UgCXce"sS$T%j92u:nfES\S#%\t?>\mN&9F1oQLB8(#F%K?CF#Ulp/B]g8"W>3\]#NoS?n%W!f#\P=;k?sd&&9EPKAS)F:_sB1>"m/g9!:Kg,>Ol%6a.$PI]CL'&FR*5#]*e#2O5SK2`0b3`X=h/6YZ[k=HZ?%Q,E%6NXHuOIlm]*l13Z":[^K[J,SmjLL2sdci"a"s&B#V_ghRK;o=<-%%R7_<3.LP^qn(a6q",Jnro3GI["eU!q]?N.Nd-H?&Cb\C*DU'I8=0V.4p5Lk6Yf>HaPRc2X^,F=s0Sl$eOiKd`^S)7@$,UkkBING%!8-<)#ZuV:9G>e(HJ"e*S!R;5,^YALN>??B_6dTsaKUR\VbjIT3!tip?nsGL0UB_bEQM^[B8i.C[q*\Gf^Kd(;.p":]t]>^0=!FL%?g?V5^Gu/Orra\]a:r:b5?aj&S"*gs-^qR$k)F/@S#dA:hc"$e2W>n$^dW;k@'frq@;/W&2kGQM'G+1L*5O[qh6muT*>I+SXG)2]%a3)2Zq"$*`IbhCX7KgqP2/EqTM>T22jp2f>9o"QPjbC,S72l6EVfS&[MG*j^TBP*YQE$2Vn^qCgDg4iO2:+X'E_FRMnI.;k*,$Md%;qopj8.4tD[Kstl94/-A.g3dN@#)7p!6d9,"GU%SrS//87"Ul_L.":j&E2>Z>K7"BYhGLQ&0K!^VacG]So%*90cmg4_;U:@WMDg;%Nef1e;Gno(JI2W'*27'pF5)"A+a""9^'U[fnqsgI0!rn57:c'2/NRc?P<s6ln/C7aL+Jt7*o[2L!2TZA(`3#J(e[$I:5`f6QH_A,%+uE#R:=0)r3UiUuH5?l0/Ur5-Uj.uF&UGPl[t>u?Hcm#.>%bCFacWjX#3$_Arnr:gq7"hr")%q63$)mV`Y(RSi(S5.2CUMsLmGg]%qA;l@]Bd>7(fBcOr-uA8S$13`DT6k;9+J5&I'=Sdc2h\coS1Z.]m.oT]W&+<FtqHjdD_FXkWshE?t0J)J0CaUMZ[/e#`Jj>TZE4J%d&8TP0j%fO$BN$u`+5YuUO(R`mh$AV>/[Qps$s,Rg+g_bVA:3>q]1:kSXnudQF+9js0S<OU>=)L)&dIP7[o9d\UeAo9O9[%E:=YH%G7L8"b6/1^q$t#X@!&=gK+XWuqB)1!p5=.h+f6PM"td//.LN[-n\f"c-L&=]k#KSqKg.#/8]gRqg6e[Q5Z%QkZ.d+`maDNRZfk7I%CE2)o^g^dUk>ZE[80-Gk),&3m[s'G\&2d)`,$2c=[9lfsS:n@$+]N9BKue].g6P@EDAJ-Ab%)Sj&OH^'rJ*h'7_'b8Xji(5#=_+C%VKO3?EjDBHKZgmdm5$BAL;H)k&IDMX7ZB_n>.9J\3uTm>?T01^Gj6E(6H,[RWL:KM>2qqc7s,p@D+i8Q)-V[C&@VV!"ml:RE"lbZ%19qQf#gFo)H(q5DO9sSVZj_fdQZ@a;RVFEm#)q!iBn<6"i\Vc^nHe&OZ9bNgnQo0g+\fCirQkH6f]dd-'W4EjJC!8?>>Mfh$Fb.8%E$6<48r=rd#;.].6AuN*3M</r%7W_GO&7L@b,?*0lM_<c6Z2(Ik7F0qLs=Feg1(!1pPV1>Ou?b%/9MIuJpA2/#Ds9/8TUA!XX(WX%2LD0IGh>Q!M[eV`*Znr:MK'me<#8XuB],aq'ETN$\d,b1J/0!'X<`2SL<RVVgEpN$P&hbUCgSNPJN[3a.]'@C"S693QSV7DD7!"S%(]JT8Pm&fT/gu8Q[>5,oPPK[[iHc[8&Aqf3!u)A=#-hY\)=>$p58k^@X5>Q7n]jNu-3=*15)1)oEH_bFM)p!=-`MNq.6Y37m7\5B%GoP=D?jGY*YpRmZ_LCAr?<<&B=aNdHhIONSJg2h5$2(O7(dr1!2#)gAfq95i-e&a-K.^'[ZeS#Tq.%OA4os&ND'bV=Zr).<E5V"C%4N[f$Q#IX4f&*VIe%1co?3e\pkPs``?VNu7ps-6j(MJ:QG8G^XMg"=U4ToRgmY%`/aTNNc1RZ"DCg]Y#IIJ</^+0DhAVJB[3BliG%r3>M=B[aS>s7KpMH^(5mo.>Bh&@,0N30F+WjCX,`cm0!o/\\WHi*0s>itt]],u6:!InL3-_'1@[J'4/N7mj*(DH;b?+=m)eA^GC!%>!`uY2(W1lj3Vc?r-#0K4(859`]gs2RJW3fC%NHl6?$m7=g9A"j@1;H:;lYQ(=M*ogG*B_(<f7TS(^UmI;THD<B?6`Q`S$=6=Q'3%[FJi"2s3LK(SX3U9JRJ:."tEAj/:`8]k^<?*Vd]@P>Rsqe^3fadnJgT=0VW`QEs!42Sb$/LUAio(5Zk_[^STanM_nSD*kZSOeHZD%4]S:@"b_*,Q[jpY3%M+IA4'0-9r<os!G-P1.PI9XOGYR8HaG%U@&Z#^pu,+E6j[q3+[R_a_Jr'QoV,d'8MZnd`j5*\NW_"THbUi5%#dkmt#-m8@1e&a"m2sFi84U#(+:-XF,^;R\Bo15>7d/0nVL=L@)-'mL$T>.HJdu<'#uPeS6mbf3nQ8qDQnbZoOPtm`0ZgH$+39TV%<bgUpU`f-0&F[k-52N_H3W/t<X#CtcD9RO\kQ+Uls'WlHi!Nkn>+o[6(GIl^##p;bT[HT6$@II7dM&cAYfL#h=5.CWj6jDa]I&OC%Z/[<Q-AZu>E##kgR"toK>GF[War4c@BbaO$42q>c$?\g?&.jG\?3c.cB9<-K,A_C8U[K$-ScKDReeed:43e,d'Kg$NN3<h@[O/0I%(%M[:XY[i2i;ajb&@O.jEr?`i!gkMc"2_oaAR(K$@2mPq5@5QbL^5%L4('T^RuN2/"FRP:QQ(S]^IW?QNNgM1Bc@UAl1[6Q-4c]0%%;ANJLQVOoY75/DWAD7TV][dun291]q&*P'.NKO8)_<ibYsqf6YRrl5ckXJQ?a?CVBWO)S27g591+=-g[/m!#gl/EG=<V'oKs)pa%!a/S!$ML7]dgBHO?>?!;j(i+_S.N,CHE:Nb(u%7.B'n1e$Y(>?F21o1CQB\W0Xe*7/%g<5`\t%+oAYG.@,rJ(oRO3Kf4rrD0jlR!%$i)=XN.hih<tDnkpgtU(2^k.)&c+B-<hXI7b3&]>NjICOs'+G5fEsE4\,g69Xj(Fsfk``3+)hu(aGKD-^tG_5Z6Lr'HrF2.Cc943%-Cfc>?\M0JKl*#eH<T9Dq_hBJ!GC/G`7E=U[K.?IWb\-L8PKNoc;ogjSo?T?.o6qZNjC`CUt::+\S]#',2$rO:$,.2#Fkr"F/j56%ZgE8C(/-[qed7_f$>0C0\cb8X$gU74mK$t:5nKSmj(nh(0mLLeCaa[G(C/jaUZN>)S!I40;)-u[q!a*^%6.Sg#<U3H855:hhJot@%%$6oS[QrIH`YJt2$_7W++&THuZpi7uTPXL?gW7#o=a%rkEOJ-`>FKOI*$q3CkCg1LM/gqHEOLiUY\CN*Cr%<AEQ2/NHW=G(3*QH<%785aGg7#95hf6*c27gXYP$?$2V$Xu#Bo&L!qfpr>YRTl7#rB$,2LFUffNM?3,\&@G,fZsj'm:q#'t.-OH!;LD(oXKB+_r#^E\!PC%ODg,[%)..MC<=k50;A?=`tIP^C354rZtYoXkRE2fIn3-os2`#=O]!ro6SDSW>.'``g*&eFMF_OnCdr@?>-_cVLr%RLZkOrtLg:Wi%]NKrEmr@"ah_8/sJW)=GY;j&-O9OgK.=r1g&ASHB+uekmFLqTI\#t&N[ZFC@9qCCn(/lMu?o;5q]k,FGOm'pHX4lF=?^(^L&UfD-%c-J)iWT58dD'>HZ"Z1%W.e(j,4p>$OW5<6k5?fZQgW1rk\`oP,W8>KFpkC_lSP^8p;5=Vqa4rH)i_UdXclTr%OtLX-87tcuk9+1G%&BJ::Pk8o(+3$K6M"Dk(H=9.m;6W_qOH2/YU3;&d>4JP-_9t!*%?Sqo-Js>jMX9cWOd35C:#?*^/tka'GiNB6>d]/j+i[G/$Fkce%?Op@.m@^sG0$YJ)fJTK5R\R5,:@rNihV8qC>i6VIX'281f17/7s-$N,fGMpYQ\0BPp;A3lmT+]7a'L=Ji:2p\G6?@Wc]#-3.A>eo%1$a5&0*l:`If0.Q*4<$#K%j.G]F!Vd%KVgTHMTY=UPLu67kn*4_W.0@U%Q_,HOfg70doaWY_bEFSk`amn$*9'gOa-ID)eUP(>$Yt%,&[qo*!t<W[m?b?p"P(:A8=kH#oI14W,8?_(VkN\hOHK$[bXcm*`Y(2bS@QLGW%R#k955uja].<gfP?=gZ4OZ8;0mGB4/VgO]X1W%h[NPn/Qou?4OJQX822hnhPimW#$>6$%_7uDMpW-6($bSk\/&k9o[/tn&!X,kaGU85,:kbmPb,<nYihZMe"4Su%P->m^pH8cHErGr%U>onT7M-6mnUcd:&i7Y-J`]\p%R5Wg+o#XR4#$U.THoCV3<AQ=]\d^Z1hFSOZ"+9TA$@+X?YEg.3&*6;j#2IJhIK,Oh9Z:>K3g4T%?JqL;L06Ml&3XRPero(;#7VjaR.--OfVGRf3Nt(p)9KVs=h]X[1]eghneT#Kh$sk$[1J<uBkW<e"S@_u\DqhQmY[n2VH&_IcTu4h%)pM78Vm]I^]YM=#8Z`!9+)'PBnqFGOC(%10cV>]#f[2!9`u=Mq6%Pc=&;NpH$DZa]%eL`k,].$[*ot.?)l7BuT;%*k:+'lt'r\'=%GcROn+EA)6nY"B"=l2hP\ct&lEI`SrU3ZuG3kk1!6(i?h-`mberdTW!=r]"CR.g]`@ZfGV%3.K#F>bs2\/2<0CRNmk["UH'/UtrO%8'4aLZ+)L7qLfR.K9\A0m6\UNP+N'5jMaMP%"kFc+GQYYlG7d?llp.#YK($(D2MOZm:PfF5k<RmqZ2/gJK(<g[dPlWob'RLaa$:t%jXeE_H&04SN27)664k_bATF'G&8tAk";pWJC>-sP_N/-9"Y4#heY>n()O@jleHh*R,OZL3$8D%1KOh%"!,l:M&/IfrO=jjJ&4en7%OUqY3p!dh)LH4d^pqJ-ulJs]'Ac\"1<K2[]H".3/$QCp1"S<MJ7p%PoP)(NJ3=RE7e@#h7=$Dp1V)0hmE"q1Vj)q6grYQ,V^h@Q6%j#s3c>OE:OI@4[nQ$+qh?H0)ZX=m_ODlEqMf^6ioK;cEflG\S6jRef@Y9[#m<u>?21HL`]5lAFG5pZC9b%Lp8Zu=1:PKX@_]s-_M%[S][1)?tMM+XrE)ntO;E;C)"+<NRE3?pPefRbG2'=)oHBJmGC0[l3U83"Ju.A^+J>iW:D&5-.*oScCKW_2%\E%.lMHh&6?g$:lak%_SZjN0U!0r.@cD?=<-<GNrW>`#P^4$Mh1il)!peq9.:i*#tZJSC\Jt!+u3OWe.:BX@&QC%aW8nYp-/a8H-:X?jtT;`SH.`$%8`5(%Z6f*Td05n6@Qa.[@X3&e$/55R36.l;Fn)[?VN<`,-U@s5d$bSE7g%^6F]'UdN3']N##dOk@qZdUk0=):Vn&AO08e_ASt1?Y.-\OR%m/dO(\gRek.u!nO`mWj48AjNmZ*$W$OGEUfb+bH57e1J"b5p=64:aFh;>+K\PHYnJ^+Ki\gXb(:&X<65NTj;d'^QrsKuZG.1:@?h%7GXoY,b0Z$)L_eYP(q)1#M4!*j%Bj:0>'cCof-8/;a_eZ?tV?]E!3=-EoLI21:8s#[38abM:d'GB9bVq_BBoA':&*BE5@*O8Det5%'#*BkK"rM\=NSiN"*$]8WTDdl5ajS2ZN^ruUj3+`)[\8q5WCDr"j)e"%rg%J2NbM)`'\scBo'&\6Sc&\M%P"6g<oub7@D1g2-%Z3%dLQYl5-g"^9+N1?64&aB1;gsP@'D0@\atst!Q`MoOj8l="9_IMip-RK]&^D9WoBm/TVY3.RS':8FlZ[TNB^&q)c-p_Rgq3=g@8](%[9GV)<L@D@!MjA57GiZiK=^1CQ*i%Z<PTXl!2<,E,7m7fKq`!La/f'1_"pimL]D"LKOEFV=](h(YeUd;bZ/,LMkDle1De6H-8L5`%jGVqu&7/T,V]_MN/M$"T!FGVu]qYOd;@,=BAHEX'\"L/=8X&0o"AVC;C0[?>jjTX%br.*BWEPCs%KpQ;KPeZ+=\@.J`@idl]e9?k%T3tW[Ysu%T`%hN*Tq'+lcm8QV$s;N)5"!At/P@f2KAFqUY835T6Hn(K6q:[g;]o4sg-SLGbJu/7;OT1L^=M7"?s?PXB*?%!0*/9t%fiU3@1RKXjCWMrsT4s!:@M@boQ6@)#J-/#/jDo:&M^XFPJ.U3eP(Gt3h!F=5i&E/*et&P6I28%Z$qX4Z%k1Q(L95<foQ@hS!tD[J%ImRPd(k.EE5pnd2YUNiG#X]J/U,J"NGfM2;YSX_K3AMR*XC.s![V]5?m?@=m=(h]7Q8#[Bp^+@9Pc04i)L4>c^t*3r0d'.UG0LVW%C+NADJIRu,`hK.RaHs1BNnbE.h/9<VpAt]_*lt-p>X,ro]n5p]qY_rLOc]If!TUO5"ESG>KaaN'/7(ZY9(C^Y$5EUufgj(p^^!"H%8+C+Q^R^cFG[EEo[W?<TWb!&qQSUltAMUY.5(7a2XiPn(47%nWigA1j%c#"*a`L"/@fspU74_GD@/0.2N8K=391a/jdK^YRh('5_%_/%6ngfjVN/Ot<*fJ[2cpt(4[71GLS'Ig6s75SXV.W&h7UJ#S.7ug]aSNDCI+NRBnh=(5aq3Mb?_lpka%f[T>;bc?j/35&,eV]RM%ch!L:-Y)U[<Xs566K84+3La;>Z2ha7i#Yr(hqQ@T\ph1]"`cVJ.f,O3;?iGY?-N`OB&\''@91+(,]\6XZFf/SmJH"B,o&8@1(`qR%oW)MdfSCu5$<>N&WlbR+&_7TG':S'o2tBtP0/o0ncIaXJh@2u7hl4U%:+=(o"f<HO,(W3N+fDM?@gb1c=;iH%hemc<pGtL"=&I'<%`ACiJdB&7BR](b;\+a^j]E,XX^>+*2e8*cDf=Q<6+ia^bSt#[5hQ5m\Z]B2eqhOKLQ]eEg$[H!.Kp_QW?pL5m)u$TQ6g7W1)iV>\%?\4bsYHtoJk'eeqediOLgO!mT%qg'tI48,6ULp)65BF&KOr9i<2/m_-:WEIW=g9g4b+4,"#uK"h%JCgeFhjku1:UQ,LBY6rWO,LI%,*RHg)>OgQZe,%4Q31A")S4f[NGDFYK[Z*!!J,>=E%l1j>\jZWjJ]jbl3P*7@:G@prH-%&N)70;h_/Z)U37aU<jFd-lYJ\9=k,!o%C-QaK,\gel\.Sdf4!;rbBJd7KSJY"T!)AJ-brjMjN*+1V=:TmLi%Pj$F'N3#;Wo2&UHon:CpZXTJ&Y$Z-IndL@<"s,87IgQprq]0%&nM+NW0O,H^"4q<"XAV@(1XX%HdE'&DU9!0/Nl8WR%XMq]2O-*6)4HHBI(4'-8Z'YI_=XUVAGtn^e6/[E9U@P(rDYi1XjkpHMRN*%%!,!7I]!T[f,Z8dW:$@uHNsrj2,O+/7'7=TH;W<giHjKXdr:5q9EoO,6W=TN>$-KV&7$Xf,:r9C,fGSr'S(Zj8IT,_P%->f%GWM6%Y`::UA2'5^2C;Buh8u01`f]s-T`u[DA._-%P/R2fe67QN=`Lff//DW9CW"4%B#Vta,^)DO`(O[I"VHKafbi?<8?4f<6qW'A;JL)7%R!nHleWRoP%]+G)B`hjVn9>^#,qs6a'sh"`iG$)ObK5%sXh^pdg0NCF/NC">HTSit"/kX"(UnRmE$&S6Z$Z3bln.hN/_Smkm7&1A%WQ)''!U!3E9>[X/gWda@M<&a"AR1GAVij_KFIM2J)1kit3VPI"kXuLhdiNaiip8gO3k)deAU`Bre)YE>X[)W1XEm&2Q;6!U;t*V(%AC_J''pfX;91a4h,":MKD8;b1qJ]Q``skp5@`Ln6E0bNC_$_3j>_nUWFUU9d9\"/'Q4j""Tcpmbh_Y<^`?@UCAm2T:B-C32Jtnjo%)<`N@Ji`+'brS;:FYFd^Bke?'Fq_JIQnLKqW>`U8A/ZM+b1pcCB;;G(4&1=3"rpZ#["\1QQBR3%*n^\79oojBEGbaicrVSnE&MTa%=@kh?5a+9],oP']Ys:WE,u/+j!<_41CG7,s!mh(r'jtihj=jK.05$0&ck4pk2JiPM`9!e/101G;$BTG)$:PofRS$.o`%$Z463e^/%8d>DM)G^l*(7aHs=<bmA!]i[MPUS<^*8C1n^sck&TlOtu,!%3kdD7a\Ygbo@TTcc@iq$k8K\X`[k_#\:K@Ro8<tiTh+b[bLKj&.B%Ck-YQ?_Bi'WIY/*,,EV<QXs-Ydgmp2;e0?V<UHe<7"7`GOnRL[irDQINn'%fA=Sq:l?1P_3!l7H<st3hfB_.A_q''h@@jsJCOO-0%G<n)9FbL&dnn_p.M<%a1gIB;K))-%1N`\Ao"iK:'0Ii>KSf9@K$;'RH`c;fiFka^.h1jD"2'gd$2`,]?e#Fu&R?Y@Y#:"1igE7Xt%,Fo.0j#'Z/TJG(d]gf5(\tGn"#+F170[\2YXL'l64W(+Q0Y':IW<5C.'[t(1=XBuk(C&g=6Q2=Z]`rpq$g#f3S7qt`>\jCaNX*jS%P(*_nfZ)X*:gNZi^_r>;4;X*3U4rm?%')h2L7+8"ZS6@sIWE&F0Z&Q=kU2G-2_-Ra,)hTi1`>3_P+7WJMgQBB@qV'SB8O.7](R=T%8BgN*oTF,SJka:\hCEQ?`1P*/Thli\9E@L,5leQO+U[aMOTBLc1WM'qnOuWPPUd;_NGU8d@*ZGh,'iJd(l?'H#&C$GjZ':NS5s##%lY?)fLNVu^^p!p,8pnj0eTolQWu]7uE86dBDlHpn?[]-OE`k,Ze`$5KH,ZE`0a5Q*.u%bU-E^DY1(:gs%^-]pO`?Yu^1%1`>d4Sd%.lMM'=0+YlUeC<:_,)STCfiEZ'Q]PR@KURSYl[4!PUEXb[Kc>3KQ",Mg.s;Z.S.,%I_m6SMs?]>e,V87SCADf\cLU$f!;/-OM`#Y%=g`s>=[<t">Q\r@EW`gM6qF^@F[\AJ<iQXF3]hjR9npS*/f)g52q04VIRE?c9+Rl#g@eh=r*oeO1'_Pq[c?5ka#K,gi*[5&F#uXi%i)Z?[o/A&%AKJ\/D^VdYAdhh97(U[_$R_7C3'ODEV%nr+Xb<G[EWk#Z_H,eI>Z6&gCFGWsP%5nIQ[/jT)09.*MqVI&.N7;1a^(9$%jAp<QE#-#A=1AV.H4g%r)[4(b/2AO4ITDT27J_[f*f:8o,ZOi6jCbH834N8nSUbj-?_C])`l(`hP/#!5hSo,DP)_@7XThJOCNgHp%30;\"pBs4p\f4-n!rHA<.*i9OU)`D)+AgT:>qH%(A(.fj!/sL054?;r`;M`;#LuU2/r$ig;3><]!+7.S?,r?A!M)EWnI*,PnN"&>%XO.Vq8)SpV1RLr?p<(IMk6=Ef?!a),N*#JMoO.`?Y!bLb)6<4[odS4M<AM&N$D,\+)5p%.^r=gVIXiN8$G2jTAIMbNG"(Y-0N1F(%<Q_3hr>\<]d+TA]F;`\\\Z8VI<p^)XT0m+N0o&c8-mmNj5"=JGC,-LG/7,[r@S8_[e#G4.&NDJV&ZgpG@hHI0S%EX@eZV\W0[mn*%-OaiTQ$F473%bnd[=R:ta$>?2n^*.-0uJb=mtYclksqt81AIu5lQl+])lVa.T#9dW,Y0(b1&k.6CBge`2M0206IMpUHiT?3?\<TZ%6e,rY=Hp`qO]S7bSHI[f7J\$FHJ@cS^-X3A"K*.FCF7(,3!3hJ^1]Of^]?.rP+"u9;4B&jG#>a^,UR]b+I@.?"b%k?-DE!4'sB#[%MVQQT]-pkI^l*XB7$o8XE)\@>D;UMG1I@>305*lkT=&?mPnF.*;?!@pQa@=5UY9"l09Y,G!#OFhm10LS!BHo66bF#eqiQi%qM3Ot%iZ#fZQR!n9_r^VEjVAIF.?Z`[Q2\4C9@7[66cW_$&/qkg+%n9Wj0Zn6aikW$Zr3-o2HoMd*&Eord-CpWf1ao?&/gBZ'KNJJKXDXf%ULH5:#7XlqB2lhYP8Ubh>BNf##plkV6DQQL"hZ%7/7_>Wp_mRl'-k%'oRSd3;NS-*>%-d2>T/g:<[UlGV;tGAmlT2&.*KpVaA?$@%=.#Lgkn5$C?E/;bO_(RgUlsKb!Mkl>AP4;Y\LImu_lgMJf+TuW"iS@R0lpFW<%^iHaY-D"E\:5r5bH!=Jbb2q5/\2WAN1OPn-W*=%Z7UJ!;m?taNMZV&aBC'D5tlJ2N[+Ft!4DP>[?Sd68jMq51a+'=^&er#?`!*3!.C$b5U:Be8%HSE84*#A4,?kH*qk-QjamtOj\<Z5%jB!13cGk0ha)H(N<YGqp;UMJ(LE"ttHQ)#*&A3^c4Kt?M7Z.OsQ?Wl"^&_KlbWa.eWi0tWC[YrsE!1-$-l6pq>#`O"!`qcha/F/J%"#^?k!N<^=;Sq(LGstP&,3YlO!n9JI1ubeJfE$fB=m1Jh(J$YS*(2ea!"DJ><_UOC8U(mo_4JG9GTh*tmqFL[BPbj$hJg09XMed[%'03&2W\]M@8JQ=R;r=l#e\!grMB!?K4/9l9E%.Ef1C=,&3WG4=A?;kMo>E%4e9p7:IEErnPT/eL5;7s'hIUjG.\k'MP$*]?7ZjB`%-7`='UW>]ue^)3n,%LF@Td\,5@'pj;7RdDdS!0e!`$hPdk=.oA0U+k87KJ.,9iI2XS%r3Y0FCn^cJ0?V"Y:Dr-6o:YAMnaB'H,%_%:ib..-if4b`Zq5Y+=CDCUAu:l3386>A4aWU)$OGLQl/=s,Y6O-.n5Z-Ta[B@;.M(NR>Za-&YmG#ai-t!UB#75g;T!p6R4rK1S\V(%P(#2CMC*l`dL'bt2+jG2@94qC7B1OU-k)tlKo&YD/$sY2'ZR0CIq06&>dI[t`f)+n,35g]MMB6q;?fUQCCmYu)$P[dbKV*N-if'I%[EXX3<WFH)O\l*TW\Guu5bN./AJ>.,/BQ0c!6E3b1C?\$nQ\P$?kg/O(cP9^)X-n.O\rn46mB\sUAutqTb!(`=&uJD&k6:L<A%Q3%$35.7@:p:o$d*W^!GLEe`,nJ"(de_51C?H#OTLqJ!#dVH*>q:8j,Yi,UW='p0f"VkN#mY';.M4^26i!sEM-1/lq38l%6*5"JPLod%<2giW?0qh:!>"-?-\>\p0R%QDhtIRe;fj4lA:29n(B/V:TUa][=8/ED`Hj'BI`.s'ST/g9N"a#i1PB,Kg$eJ$9*(>@:d3K@n.Z_P%rp331G-W0KK!?'lP&MW\p:R2S%H,V%(sPsO+S,bA"I&u)$l!P'WMr>@-?W&o]lkNZ5WW"uD`;(G.N^k:W-m\h0EtFiI1ep%E>>k4%c-j8X?a3fflX3,>#)`Y\VV\Gj?M,pI>Ia1,f=J=!jN[#r+A'dG%@'<8U;k6If+-jR8-^[7m05*XSIQb-Fd@f60p)8!PNZk]<KLOr%9ClbF`OMEl'TM+Xaob\i@,<41`_ajcTc$5a?!M51J@ea,BIie.U"9mTS%f'>?%E`qa,fHs(^Dr=QZ3X*gHOGef?MaVfj?I?b/SJ@%KfWW'%-DC.N[KAk\tK,jOT`8kNO,W0B5!b[059cq"R>.<J8\Ls7I9PSH3D6=%EE%M`6bqgGNa1U1iN(hCgB!p`I_*\H"O91;Y3L*%^Sd/>6c-9BRrC()$*_'lZg%#Z@+DOF5Uqg/r+$+(^c+&oqB4;!Tjh`6^lGQ_=c[kNgctV5crPP!Rq$ln7'EbGC%7jr8$%f43WhZS%%<@HY#gTSD#9nN3EVBMj&s:ha#bX3c7r2`d#g'k1Fos0j1'&E6NZWNH>R+'?P#(:VpMO]2OjTgXWC[BX;CA?`T)=5`XTh$_gEu9L%<?,$d7_]"VG=u<35f].6PEdg<oN+&`/=qdL$;dh6OihajD>?M@d.d>#:B3HG0]H&CB-_f"[tOks*/g/jZI]5t-'T"/>/lihO85fi%Xh_0Zb%3W_CBPt47aD[.>hY=?Em7s(TFASfZ(rAQ/gg0T?5)1p;X=C2_Zq\$4tpm?`@-MeXYhX=G<1;#,s)u/)f23c<j:AY'\+.Q%SqII9TS&e)!'i/hVH[FK@NI"q3XAPF!E"8Ldah7G>9Vm)clMbQ!<sR\E!V&M&.BpE;QeUi3,CoGEt#ccJHK1$5[E<]kr8m]2eq-e%`aXP^[2FsmFqbq=W+@5974r2?J6kQI#,kBe)EK_ok(AB#/DKa#^4NGFVt:aHD`Or,Bd7u1$=>3]F>GY"HF$CBVg'diK.UY^;2nnm%&tH"eJf`1%Vr9+H.OkP0ZLb$BEU$Z(dbCoYT98K>E%eiYZf%h&-3A&8bI9K^7Y'!>UI%du>Gp(H%)%65Y4ALe-&Z^aLDABsAXZqf%HRoNA92$_U=e`8_KI+<JZpQRqL3/t9mV2dOV`Y^XLJP2$%.>Te1+[RZ_>-W"dp),A3kFI:<'dK9h1:ln-F,<,##dpkr%X$iXq^Xu%_dXjN!6+7=Wn`OVD:)IaQ[5#El5E0[6!0P!qEDs]0U,sM#lqi<Hs"5=(5(L2?5G;[/#.VD0TCE<mbte^j2Oi%`tcP>`CXau$gPS'%alXs9l+g1OE'Q"hCBQ8l-&6OJh4Hb1LCo&R-`,@,ZcL$\pI;Z3P$:62;sNh=g6s4<NKig7I)#<!"JWk1hX=hYc:V5+jIgC<cl7Ge%nL-YF4S"1-6ea$^MP4*XJJ"3B>ba')6h`b<anB3u/7G>X*jQ"kSE'`M8@9]A3#p6qGF"Jl7E&Z;Su>"%!EuA>\]KP`AF^@dZ9#9#%aL+YEW9ZcN]<NrP8p*6G/J9&Am`KYCbq:jo+pm\"f\(Yp]"eWKTr>^/c$hjX_;icNHl^$-Ji:Dq3Qe6qJG&g6R`WQ.J9U_19Mk%T%W8&>RS[O6Kkhm@TK84dY4=;Ur+N`)tC?oT(!6_>?3:f_7_-+'JX[n`d]ht`$hk2)LJfJO<#OH0m2k(>L!7M`[R7KV%@*ou'RW+5S%<o@s;-e-<?bamPUp\bX=!,&<8)$)^\a:]I&"_Kg3Ago"C[L0h\'H`=i'Gb7W[U#M#;15VHD`@OmB5.DARG*/IB`FL-s8CY+@#\l@%@X;96S0,k'OS91i45eFC+M>MVS)F1:rP<K8"HrYIrB]4jU5W1icK1@K$.s4)X#M,ig!\aE%hPMS1&,F4n>lpQ.6;YfLC=_cDA4Dq%-AW2A;!rW767M;8#P1;V*P/O?^]:l\Bt$:a?'&Cb)iPHo5d`dd'3B&$V>u4E/R\b")bF-)#FMWXBik06?=@MY=G?3qADkW00XkWj%"%IP>#t*b:!1@Z45L_g)"auJK'rb*=dg=*2\2HP_PWoo$s//2\HMg&9cF02qH6>K2K&:6kYj>@`2>bYm&Z?HN#2:c=Qn^KV3*B=f%5VR.oJJd*aCP2$FS-!++;7':Z6&8!gh"VVR($'tf:jHJ1&Ah"3^V<a`:p-:ci&(Wc:llBP<HD[^fM)p"h%iZq8Rct/T$QE8)NA`,%CD2@Gj`NVk(h_mX$97FiGjJ>3c-a@.mSG2CK\VC*=,)dja:c<sJrg+a2H$8TJZbp0>I8!M,c'`a#QY;_%D@?K?t?j*DYqM&'195p%<4:O-:T=HL+L67UC[+@pa4:Hf;/c/"lKntAE\V("-pAX331bsbL:CF7pS6S__4H)%;dtp\/:?n#g+egO'a]4TMh;V4#,@jD2IX0(%.lCfK.-`FO8fl\YB[,$W??dW6=BDog<er#YL(FtIC8*To-`-`P=Brudl2Ch*ce^FENF2gbIVn@"**:7e;Z%@9VX+T4$V###;]W0$%Y7dX4S&,MGLQYd\MH>5q)H7s$Wj[gpi'EOUJRSo$]3sd06035VaX@:&6R8PLM;]DW5+i39QmGH[2@g,m*.X-8,]T"M3(Rb"1hY?Y%([!B;[WVeKAAg:^&/VP%#f$jB/d"qPC`V]OQ^U7dM05PZ%I:6,!'uc6a2,X#pONMJBVO!#M\OWnL(#^UN,@[b2CKk=X;;G#NPQ8^%H.r^nFg0p(4"toc)8Ks3E_mT$:.]tS=M*Le\?Tn6oJs9h"M4\D%:eWf^k$7ScdNo[6!m#6A`s7X&5V;FX=P<#L'%cN.P`[nR?m$J%cJfBL$j0lf?_fq8?32dNlB10V]+3>5TmWQ=D5PZ=)AU<GJh&5ceJ<S:BXa_701W?UfG"r^h\;7I9d)UV_%cGQ)VF)P.<X721>56I%9P[6lS!>r6Q;P?:qM<MF%3_0`o,*BZhRCSmJ3CGppFJ)3?r,n/?O@)\[d$8eDq2u,<h16bGHt`/+n1PQcn"EV.Sh`,aUQ6?_bf2K%%&NMmo6EocP1tgAH#]l_Au"ienGQCaHV?ancVH>'NRjV.*;eYoPfUQ5ACd?t3sKVnU=i;u;\`t9:TLGa:aL8Rb'FZu7fR?!/"jih%IcUIT.pU&)\b.$HAe2Uf'hI`QQR6PQB#X%FTU>!^(hlr>mQ_K83*'W5_3i,5^obWt#.EQ_LJp*Unl[71UX*;3QnXb,*(iqaLK`H0%_%KQo`QelWE.b">V6h@"H?r"fgkgBn(^uCdE"ZY9J0CF,8:fGKnA:"b56bg]Ve[F;PbG4M69k+b^+i;LbQAE*B*TQ1`kW8%3S)G0%.c'PTL9j96Xs*5PVq'rJ.*/fUVs3&ObUPPT2ct-7cqC5<kRftkm25`\AHltK';29c@n`#OR"-pf8<p,.:.]Ql!F/TDcX,t!6hD%N%J8CKLUf;M!;,tM"i9<"9Lt0p&oQ/(2Rgh=l]teY-0/h?@p0J)V!dG,@PKf5"Rn7L%"0:iaLR&u5@A\jk.&.]u5siqTX[jpg/nZ&A%'Z<`PMO:]T'bgoB8pl%QTlu[SqM\1%ID;gp1WOjtDHi]Y[fVU7f:[c_K-uXg=Jlhj8J1fHeS%`4GhAkd>Z&R,<tsp-Z!$t;p$nKC%[1Aj^U2Acu84Gu@UL]Usf\IejFmpXX%>3==5=%'i0?NJ0&mUr<egUWS)@;B;RP=dInhNLb&co5f0[hR$QpW#U'7DC"P<R>[XNoj-%<-&*bKfsG];LO26;F?@\L)XfMl&;W@H)s-(-")r^'WZBML:2&FAmY"q!BBYG$*894^rt_,#08%Y.1\Z]!SYWW[[g9<?<_a$n&UiR%'AMI#2T<2cp(OYd2-@&Pa0k#il"F5T.!cEu,ah>6O^^pY$1IH10S!"UR_U+9PqG%?H)kVljB4ACO,dGfEE2>T$kcnfCYNsqY\<%f%+A$1i],>/)4CnF"nnA=>Z>@o4-ECTlEDuA3W1l&S`=d)i$U.&97>cM^AG"h/FEr<p\6\ZtJAX#3P8E?KSJg5U&$1V#GSNVF)7FP7%C.^-#dPW.402<tb]$^^\[;(5\&X0$>Y,ake5k;<VH<jB:A^CGcQaI]r`I[*1&[Yc:g1@&Gea>9:7NFSt6#q>4)D]AtZ?0=77duh8%mXQ\$B224W#BtH,40O"lTe/@>>Cf;\-X68`m"6\%Vjr:=D&bX]59%jc+%;k5T$g&/ikUU.$AHg@VietO@4BK`(Tj0;)$3mi5c!bR%Cb#eC^]/btiuZ@A#"/X`p9*#)N1HTNm0[a,27Yor*[b#ZDD%`h&pSqn2\Zu3qpd]XYB3<]h(o3"8?-GFatO9iGp(\O8:G15U`?n8%1N;9&P:IZ2QI'=c.iQ-e![nUc[[sC9?G;VfF%j@u/VW&:C^NslnrTU_Fqare="?%.%,umUnHE_PipuJEgcNQG"L0qhfJOL*+]Ef3%i/+[Log4V^6GGNpBRL&C_DU<@Od>&+qjTVbB?8,nCOF1&+_=&71%,g5cC0::fLIN]Hu=A"'`9`8-D>u8[^T0t0pHD1ilg!6`BFKs%^pZ*umUGSj/DiT&]4^<F3SQWZ];KiXs%]<R)POWrJ"5,?4qF-"H)WrV8bQ#QX%>[[:R"M5mq,,M3isnEi<37Cce'I^'thd-0X0au%Z0hAa`PK7%&2*/Ws0hsl_9JZ\r<iCqRqJjAJfsa*A"bt!;P^@EjQaru$+h%%ZN>2?e;\,RU^*Fj2]TjGL.,Fj>Z,5W4FIhP,_sX8%!0<b*4:!1NCA,Hl-i;Vg!5g0-#_Ek3ZPg'q81S.S,D1O*ou@G/cc,@d4+j,bho2_f]<KBdV>j-*>X9^<0((Gr]trps@pLLKq[SB7%.MtD@'lQ%g,9mlc&DWHheg'P>P=J')^3ZtJ=ZIBP.E_BC.gY-QlM-jJXPbOH_d>s^dW="NfFA`l\U)d+qP#A<AKM?5hCij7CTn>h%6W!f2Oa(a1I,^\u<,--[o84Y-#&8DS*Fr>GC!&U.W9%]RK#bXR]@KjCK)=<eg7DcPWp1UWZX-+6\54LP"%=%E\po9^#&D&jrH+4u%NnmUAPu6:hMc/")J<?jeD?k-VoUK>R+Rh?S:(G^V*03d6N*Xq\9LBUmhD[4(G8%[qEF>u[-m^l.+c)CV+)V9*,E!85JC[$lO]8Vu%R":!"N't<eE2";7TkYR:qZ'/gi8l_[8mM&D5:AHU<"ccaPIR!/V,@He_'[lTkrVR9\Cp==nt<@5(t`*,R#iPIXKk+lCSDKh<G<C&%k9`PSCgpHQGSlJ<h9,I71`XP;/=Ej4(sH"6d5=:WX(\>14oj9!K6?sF9QD!5OZO+_`9Q.[fP?YY?@f-hn3Vo1a8mT39@->h0f'-P%f(";!R'`E[0blDET^s/4a`3-k?MSY]SMZVrD<$G7MbO43;bT+3erm#6!@(*#3NAlD^lTg0Oth^,Kt#?!fV.K6DV1okcYa!',D3Rh%HEdXBdI.4^<>d%WO`))\%QU3K>_<lD;2S.bTo;^\7n&:T`Rt]UohM2Y2-rZ$6/[pS_H;5SJOP+QTGF&*"/44?@%btqj924VlMt&i%a5'$9"p_g#P*\<k\N(YF8_cJFE,Ak\U;%\]'U1S85U)8LC,R-D"2;MdpPmL?-rNgOE7+sb&>TQDH"_D,ZFXV[$4/giWcrKoe#<!E%8%@_X_G<!cU$014JM-du*BI<E8`6TLn?K']KOcHE!ilol)fMGjB"d<\C2CQ5B\'^G)j]ZQ2T3=R5sir39EVrRG,Nr?El.Q-+luOH%,V7=-,r44(*0mg%WV](5[SU#fjg(jn.<PiOW9(INNo#<&Qn`/>81RVInDAJ^)qa0B?4r9.hi?UqdaRhqCH/F\nD42-Z.3U)F9D*9%fDpSO#*.,_mR7c2_hJ0Tdh7h6UcbgSCWNT*a'crN8*8!h)p"Mmr#MoY%.k`=3,lJLj`TE(=AgYdS'\rp7<=d>p@CC!i-099"'tt;%]8VK40Ed,>)'XAq^4s4MD%tl$N!e'=6rr.7pV>f*ZfLYWp]FnO3>ce'#lpAR8Hnpk->sD2cs!i,oXD5q"aio$CFp@KhL>GpcKJ=D%<"n@[.&T7ALmR,&%1l3j"?]7Ik+L9p:8o@<:u_sX88aAR=/7f&:a.-1A2HU)'8\#*=4T'Q0,5V&'>A2bZQ?EL6[8\J[Ud4qH@^:N%><%cR>r7jj:kbb]dhNaa,7ajp+cU.MHPBQ7LH;25\=qkt2mCGEYB]Y#%j;CK>TaatUTN$>l:'FS\ZY?a(7N%/PpQ8;!srN0\P,2G%/*TBd-HfJ&!m$l<fKI0@95[!DA1LDm]YreXjq=RnMK%8:ge5"$4`Irui;rt.8D4(OnqG4IbI@=2OB?^XJQcG$nQQ5p`Lc$$(Zhhg%>,bGt%TptZ!o6ZhVcX&BN3aMfk1G-NHVIgSIO&kub9V;Y+Q\juS<n=X/4V"KYsI\U925`?-0dbF&'/!*E]kbf?r3b%Bm6Ek$YjGL%Y*[@RL!$fL0eS1n8dBB*.+e&8?j[MYf-Fk>^+.:mR)-*'""0]qY!=Rgn\Z7h+g;nCW#rGb^&T:.X=kT9@Z9oF5U_K#0n]bd[M7l@%<c2eq']P*(Z+-S$bEcQZg_rXkkpiFE\]b2@l5gd1j7W@?LKUt,X=4iq>?L^q<?<ca6@X+%)OI`RfLkWN<qL8h2UdS#cHV<(L`YVs%ku8'8Nf"OO-_;ep%?_f,e6:uYfiRF)0CaS=(>SsDV7E9MLk(e?HfCaj7f)5V(._:r6(I(H64!'ZhcIC(?q@R0ek-sLi>Oe8."P'i%TQcjpF\.[.AVMh>Qb9Un?fcT!B.]V=0`m+A\<hL+X:;P*.]IP-?Q`d+>TOV,OK(cQR)hjnR!U2$=O*?<cD'>CKr&kmMn:N3-:T1Z%*6$pa!2@2FGda;U"t6L7KGW`61.[9US?Q'`,A9n;D6PR--U=NY1W,M_$;g@/%*4EKoa[^<M\j>d?-9NTSkKD`=^ogleXVo3EHt[%%?(cU\*onprS_5O8Uapus$XM>Q!/W`Q[XAP2(9N<Y98"5j(4$^4_4F!f3T;N.[B(Q@&4MmFEX*TMJqAo'g+QfQ!orroa^Iqb(V=5:%mg2/ZFtDgu[=J=b'$(mbU.Qsm/il"!ruiD-'=5ola9Xa4(sWIq8!?JgJ@B;kOe=$u!Bo%-`oo,hTgasV>5P&Vj1PcI6#pEle#^_\%3ZCqpSi"P=*?qj*Td1!2PmC]2)i-c[8okk?%("A-gF*;SZM>7I%1"B0?'Q[,'#>L[E<g0(PR\+?N$Vp]0p]?c?5g]t6@uuhEu(G=%!p!:<2k"oHY?P52/7XcNmP*Iq=g$WN!+P2rRinTK`**;^81CuI/k^nDs$9V-=kCsA?k5'tV5hORC;23Tl'%s%h4t.e-3:?$'/_i0%jicloa>[bK#uK3*$/gC<+_dATcqR7"l(R<pnc[k^oZS*5"ci"UP/NSO<Woel(!2%LQA)N'JoE>7&c`t[74&,/0AYPCUh/Rd(/@Up%EDe`#p;PE:Fjr\pOAeJRPLbm"gg]d]HF6<Q`@;ThIMj()]"&^d]Po#PU[Dcr)'GgbWuX_9I('A(9ZU+?:7S8C9SEU[h&R<:oF=P0%<Ze(';&pVuLLeG?fep4j3u+c'%4Jh0=uKB]QTFceY?:OmK-Z&.@Db,+XVa`.J^GkGAdWLk]F6@7>p_67.5][mk<TQ0-ugt14/bas%TupT%H9kXejqX.pj!2E`$!q%^6'I+9dt>:T8Tpcc_J-SiYVC0i`2Wi,hL+F;M^RQ8<91/u)0["[#&,3Z18piu1p@ukTbF\`2[5a>%@`5<``2"N-'ngh<FD5E:(eEou+;``"?BNPn$2\e[8NF@OTL?.u+X22s$k,^VdK/qrn`nN-36A%L3Uk#$$"Anu\O76cE'1N.Ttc`d%[;,WDFQE]-CXO.`U^f*2X:$Zj.[e_9BA?lTm1mXMfHPb`N1><MDETm1^r@5!d+3c%8Z`E"VPM7EVu\+Lra*5tgd)Mi!%[RQY`d,%%n?(5'/@rn0/2'jpTN+\8=EW+aO_CoJO4^G*>?sQGE#"Sj;!A$GOmFChLXgDVKH)$'R,u%u&DWWS6VAXZU9UH\6SWo#D$"?n_dK_X%3P)bW]-p"JnR?P\(gY@BU54U<:f6+\05!tu<P>WfdGu67'^9ubWpEgGc)@3'`/I[c&<6o1Dm:^".$[Lfi,Y]FN,YEJ/+uY-Y@7Ti%8PaCP-Ul*`9Ou!m@V.!TaG4*Pa/E(l!R:]AdJIn3N.f>G$1T,fG]A$3>ms>7r")4!f7&!bj_0M1+E`V4glX!!-]pd(!k^Hc>\02R%+C$0l8m:V5?=SnK;7(oloidBU$31PdWoRE1"agqY&lKTm?T]?0%g^sY<JC?B@1KeEc,jD6dNc%$U=XMe0^O@M:<6Cr4Z$JqK*aYt%/IJ\PcE`2l':f(L@:[cdggl.tM5&kKN/Tl4>:U1#X\8*$97e4Te2o'RCR/M5*T32m1=%:T.c/<NXR\)#5Pqcq=D`k'blnogoZDAo%![]YFO&5jE.LQX[ND?<_[R!R$7f>ct.Q&'^:L15K.Zse"MZYM2R4Xs%,JW+n+<^qs>uB2f?`$!f;0J&q6P;^'\Ia,SVBF0C-"-UA%I:Kg&#N>l*7+ejKnUGlP^fMo;:5n!rR"E\@^fT5[]cRTcMp';9Fu6H_&]e3W(U[4piMtB1Cm7YA$S!Jm4-0PA_r.OS/+cO%Vd#L6%pU"Q[1WW5-5:pb%:Q@O<(MtbDn5.Z=ea!T]gtkPM^FapH%->Zld)iDZ<nPt0hdT)4\D/UPSBEHmTd*`gTC%ji6+Wl+c`6bk2[N#R%OV1)GC-W9#5k6;2iN9"XqF-H.SURH/+fd*Sp$VMR%]q/B\Ob^C>RkVI\j9di6N`4gJ`tB5EW39mT^N,JHjZ^["LJB3ek0TpOt,=K%Z3fW@@uIL@mQq'L+UahPo3@*?%-ln7FQf.AcLL*0\S]-Z6SipV$Trj?Olfo5g_.fIMmoa#c<N^jJGi8G(=L_XNrWYiR"u[VR-@'T%(2U7Pl9_Kh!8*4/"MO@/6tE-#5n,,J@']!pr/u/0\p'_tJK`)DHcV*?)UY4Aojh0u%YAl>4uEE4Fl"N*3.]U.Cu6\a"NdsA/7(#`%W7!.siJ+d<%)S=X*m<r/[E4=`"5k:60'HC!.4!;tV4:QT&i_&S;B8gR3R&Ja]#!.Y"5@G[k]P(J,pN0mY7HAX<<fHR%B_ccd]^/&%i8.K^$Dl6JD*VGrGX>b#F^S/LG?U(a(o_8#I"2_F#SEnjTI2Ai"r?18;'@N]RBI_kMIiArU2\G[P>)i%Da6mpE)]^)a;sb5SAf5O%='l1@0,uVF^adJ<(1O'LMR$ND>7k`]="^gchU]u8A@_)ZAgSFu,n?gdp6JKbOrtnjj$$*@]iRW6e/>*8i7-+%<#j+?L+0R,Q3P%\%]<G:*2I/'lpj*D;J9Yn5j$p=BJ-hCUcs^N;fGQR!_h&g>Gba@^RsPF"Tu)>c[ap:V#`]BHD:Sbb7P/Wi.+FFKX<aH[U(LjdJcmt7%mpm"KQ>=6%JJa4MBGhO9U!9Y8![[u@.&4>10Nr+6&YtjJN4.WLXjbN-(C']ZNpH`Wm%k2t^kOb>L3SR1-^FraS^_)%BJ]*[oodr7%$pbPr#>3%dJXU%%E1YFoLOhDJdKWEOZf?2Z:c)"9$XW-hD.UVreHPBYf'!O$$D7kq%h@RacWd#H#BXo`H76NV=seRXhoPQ*=J6C@%Is\(Ee*%ePhM^P$>,j6n41VTrZL,3&U'K#&ottOX_V=q*>&>[.T>FO,XqiDZXF\S3!(M<k^2U@&q]8U6.C5.e;POAP]J=)%]l"\j%-H/:rn[dXC@<[_:IEA_Y-+@4=Fb,9kgT+6?NJ(7h0[$]WkhU1Xj#BN0;8Q)im\tm6XjidgbfO9s,\02M2)/aRmk@B5IQ(cSL#Ng0%M&0<1n1Bt$AW<oLIs+ijDmj!r?\XBu:6+7]7Om9s]4h#7o0P&_g)1uY#P'=fOcg3M\51XkC:p!!nY'MMNe=?j][g(X[f`\6>[rcf%HI0%WWbB^l,dpmdlb,j%Z6@543ZQ<:88RU'!5:Eq.i2cm+UVtZJ`7,_cpO_4,La(o.\IW\q;@E*n/?Cgd/XeanLMOb<>Lp#`A5R9%0m63,"WU&?K+5-D8IZWc[S"o$hOL"Tpd7-\V5dr,;>(/\eYE;-d/oh45sE9q0nbNS,Q$<7]q%VI_2^t#Dq'5S(u30iN1_pF"<eO+%#=6Xa54AbpTb(q:![K^V8tpbM3u5Ukg,r;-],ZmMiKnp.%ab?D/7;Y/"d$dj^c=R]@mYl=gDZpN"H`$j#0THXR=%@'cA]2#`)lEH%(^?#Dj9<UZqV^B*ZAm^6cn$LrOsUCK.Q*rZ;KPt.+RmC.`>f_HhX<!J"(X40$],2,;'_A]%u0<Q[\S?S4lhtW5LqY?XM_g^6</=W%VX`5'`t",Dni_f1W#"Nj=AUb.D.Uj&;4Y,/L$+Pm6Ie&iaK;V#8Ag_V.\]rMr(QIi!r8"tAE\PrL7n^`eNT+p698L]rfCIp1)jr+%J6a^-!0GNIUAMf,HI&l%,phf+GoCd$N<!,Sa$M:Z3j9OBQ8SFVoS4VUTuXu!pI`C'U]\&'@T8Z5;enu*oGb`e#-&+I]a"*1f:[^E%THB`o&rd]tKGT9UT#l<J)TS-,X]MH-8K#',rOrk\dcb:8p-?BY05Egr:b+;[(ICqdD9Igs'#YEWq"\u1Ym5CIR!@AfQU?@4WF7,n%\H..9*95)kdpl#u;=ohJ47.P-9G3nD_dFW<cp\[t1/j,8Fj^BNfkUoaM`".DHS/<!bj4GbnuSoF?Nj4j9a5#&*rsE#06tlY@U^3$%Buq,EB9>7XJ3E=H'/n*C/!5j*)C(nG<;iUe5R^b\%f0U&h\uUn_PjljLb/tb2YY#Uc3;R:El6h8M]a0Od14]qE%hDWOXAIqhl4:G%4%TpDZK0hRNFfVR>_:Lp\T(Mm"Dl7N<_LTSK6`tI6Q/)CciHe);:PiS`Z*UN+rN\<HjeTTWN$K3QK5`@/%':#?/%oD2?IIk%QBR"%69$/lo"VuZ^nI'FPR7"F(`<=n5nbs!*Hsm'EK$>f+,S";q^;_]2,RXZVI/0tUO#mei2G\7d6Ni_/1%NZ5*8$Z5`)*9:KNXFiGOJR%0Gg2c'G`r!G.Z`>Wf5(]\R*/Gf>T$LBo<97p`Auseg^S03F*f0-u3R"s#ut6,&Q#K#<:4AF2!dLT=p=M&#;NsRrU)ueEcP7b>\hE%^EV:j3ZEdgNmqs*]T.%(-=:Qq'9dLUAI8\[oQA_"YSb%;agr,:%abI>d4(NP'FCP20h7;`dMTYE,WWk4M!5!ah!pMtDPG(a,r;3l%#,kW1@DHh.\XJgiY!@;m(3m(+!$]CE8?@@%jS,UHIAth(K2Tnk)V_8<BiX7c:7SKV3Ar6/cq@c\>XA`4/]T:B!Q'l+*>l>j`prl_%d)&iuDW0]spQ.e3J9VC6#[V=DE/>#-0BF5\MCf:0jj%cf3$ZN;o"l8C&;MG"0-,TT=h^7mJl<("#&rnV!^q0Vp>Gf^#H!kG_DNXM%GQ@8)'$4'M>Rj,L'IXtuQ.6!uUj/*$iLK/RE=#HPMhC$,OGqb/-c+cmIU=&7LB*mmOCG/:l6S_?EP`)!>358YXZ,UKe1nsn%Jgp/%n#c5^3R%P!Ep&EM:gqo9+K(GeXP96ZaB*q^a8'-6V*L/PoJHN+-dGdfB\=-?W^rK:0Z@GbfE7WEW7d+3QTs/AcWH<c2Ahn0VC8\d%X2.EN<g:B<X9P&EArHL<;C@;ApHW[d1CFaca'GnPPVl(L-]-*aJqg,V"ke>N@PW-m(/q=.=;<e+$q>&Tm5[6rm!,i0WS_i69eUe@%h>5qtZL*<$0d51?_c"n1.TZiHhNMP_!LQ#VQM`oJ?:?F$m.YqW;(?:a"%[iJ6^$bj,g@\c$NctnI47b[):u\.O\KbQa/2c-;K!VI%3_^VS%mYpR?fD)3=ZT)oV\*[c7;f-E`,f\XD=>8D8I#l\2Uq:(Kr$]g""-Rb[p:49Jc$A,01<%c`L=>>oa7ZdM-gBrVZRPthrD,M%o(^'Fds/oa<5nQI>(Bq#M8N4`#>l:.r.shsXh^M#:-K9(dMR<5VGLF=bWP>.f3U$p:O,[77\E^*.Bd3UJW(m(IfXRP>I$$g0Ac&>%daS#Gs$;q$<&KHE#m5!kE*Q?SPTQt![6k\,]iA96O154p9hIM"?!IWr<W`'3lYik"7&A0Xm58YaST\Z`c=RErE_o>i--o8=VX@PC%i"/iRKTY+_JcXFan,bFQ]d9LsiP]B6bW&.b:n`Y!][1("Yah4WQg/7"nh,IW0TqD+L?@#u,\#)3)H)&-%J1OO<-P'6P=$73,\1oP%o@6$,=+Vug!)-S;!^)/$^1R[Ud7g'l#1&D[D1NEm#"kCs8=JR?HEDgq5*he`[[k8h2pPteUorRZ=[8eCg4MC@eX\7%*f^;d.eT&N%;`0_i%<\'3_C_f*PU$;ZABjYjUJV$X:h#<Kg'&>7+atIq/=SpGpZFE<$0\;nHK,X[Uf.nlCR^9`-5(Jq,Mr$PoKom<_YRW%h1QI1%o:X-rmT7J6<m1tT%H+4TMDjL[h=JK\i=A1=mhj8Wrb-Rr4a'*W'RUo]".^9ZX(C&CVV`VB&/:&l\h**TW(fWhQi)q..CRsDIfIK)%+Z>iao!BAk%]P+V+L53f=^pO:rSW2h7I'fKU,]XI\$'%8@<qB?=ceo4np%]8+9dV(!d`)i%fin=foB5-K",4BE)ofNo;oPM<NUJ7%!=XA0CP&"b/++6*#4tMBBd?Y]Xc-<F3qo-B:2X$ANCB@krI-CAeMLN&RClr^f*BH.[A[pi_Z>DJ#.fp-ishen$\5A+@SD/[T[V5Q%+?"3LEl0RIQ%#cYRUN(`!0'8X6=%Qrd,R<?J8$D9JA&mqMCI.mll:,/1iVNo#Xf9.h1o>`$51hQZ4)ZOh/QQ^Q`n:A&a6eNTHn[s%nKYl:R+dhApB^4L3Ge!K-lR\N1jU)b1"8!Xb7NbJK!6i;m1?!/<"@m&2[nB<JlXo(8<,TWp$$3J$Td$e"aZ!JN!1s=%]oenB$_hD%gn\b(p$,jNf;0`2j!JLG;@[3l6n.?,2hF9:1$)Xm6[m$:#"ttl+bq3C3Gud6(l<Eb#pi$/TOD3a8"#j5[d4f"Y:,<26+KT61QZ]$%m(]Rj"?r]#b5-V?q\&QMNb%JU"aGgB2DuBt192m?!H0*r@#N!Sp[Q\=)N`A/mM6l$VuJ95':DkN/I<ATmGY[$Al*SMj;s^,bDGH/%[\<pD8WF3Ub-cm?*?\%n0h<QdP[fZYK(0/W!cmLL(7jP*#>T[2JU_1:B,B^k)%s+r<rV;r'QD]549)TE,g(b*$bOrfkE(`6/A3np%\EIX`cs!_i6#[=%(tg(8L2Y3oFg;Xo<Uk(AN(JD9OU<-c=#EMm(ig#WnqNnNZ<!"%57+Tnm)j/dV.H3BB\.3h-oAC\4(H0B$2.AB%7uqXb/p_3K,Tf1d6=rF-hXXR!(j`"R[B0TYQ630TKo!BANP(mKfQc5*m7#+17kUi3SDrK'Y24kkH(a[;3Sp\#CS30<_9f'jV(.$5%?sWK/OqAJJi"AmS>oD0Z"pQWOh.S@,QefK?j#G%;H+T"K^nS1!<oi:Y'$j6a/u+Xg?#hpp,5$boKQEG`7kiSg!C3P3`(*]GQ@O*L%C06J4EJZ<R13W_5S'#PJoJO3YC*_gk!;8_gG.?.ep()9h1M[scIG54cPXl[<BOsJVa&cN]kob^a*UPa^>$3<Je)kZta\;ne&`QJT%C2;<1h$JX6=J[`K5Z)-WH@o);&RRY.X,@(2FL&4TJC(9,(4OPc)?<2=Td6WPTqo^SE\B!AQ>OY"Nef"c(K$n3rY:B9/H,\48P6/q%rSGS&CBYI6ZP@A/GePt5$eA":j&3`L"J2q;^i^Pg\E"suAPJk%YkAHl+lG7+e;-ar(H<i$%ODo]o4kE@Zl:_VEpRUVNQm!.i$o6A%lt%V5%]9FJ(GV^>g6//@."2Rd5\ETJ+HAJm-UD)IF3=d1iG]./GtHlOR_cGP>p\Y;gpcof7MiPP@o>6hD-_,OhV?KHZQ'fdM8>jn%Xm-'598V4-p<d7$0(:GDn6M#ToZjCSIN\9>DQb>f"5,s?hdb7NEhMR8Y/Rcc,OU\>Z%gOD_*lk),,-_m@j>5iV4R0uV,]3J"_k=Z%=DTl:'3l;l!:2A;?*M]DBH=)6Kr?a0;Us-Yph2<7#)rdV(*^_!Nse2c]H$]=UcFSud(RYumI\t02/uq67d8R.WC'Z0.N*,obN@=X%1G9nB?snQ:k,u^n_!?"n$TJbCi44$n-e6;,_^5C.<$P7q!/'eZK(ki$Kk^]c@\7+(UXO!YEo:"/gR=b0<J\1Vjeu`<@L$]O"@tU1%HF?5T:67:`&4`$s.8aUV(tRCK)I.o97;$ZGFqaC`.A^F'Z0-n/n>0EGlT_HU`1R*<'9k`!SosE[&>pKRSRa@WnZN%rl[TmrP.skM%8=S0!_Lsff6.ISKc]FhOe)b2HDuKO+9Wo#afhj743J.NsopA'F[s0)@g9?apLCanY,#j:r8hWqeO$hDc096GplnlEjZ&.qCK5>@,%L!!*DNQ#oL=-!Ys"huq1),M-D@BB^7<=%:*4_Ub#`5l%S2%8'D`G?"(&Gl)%k8O;,-Uh/`51o3*"IOmJ0G4(.W1b"L0Z!Fj`\XE#%WF0fTb=H7^=Ts:`<O90hW<&epB"0+l2f3j-JZr!%oNWt54Bdq6C%6J5^i$r];:*[SVCHrCC9/l&#lN0ILp6=gZH3h"CI5s9>,r)+%@mpJlc'qlUpe"[n2S$ucZTCRhZ<@Vk+R5),&@`l#K1Z>[F87Yg\(Vs$f!Y<h=e:<I[opTh,lHpI.!WP5Yo#]KBsbdq+qiQgVR]S,%TQmKbii7_b^u?W)/_15\].%:)[Rt]<$m,O6Bql3kZF#$Z$b?CuT,IjPGlX>t@\Icdm&lE)6=k#tI'qa?bL.S+8/!)(.r:M0^rdfj%E^&?&gj4V)X!EOi&ki#/<\?:2Dk_&DbKquWoWaQBZTLe7OdbK.&>"CioMRrMQ26V0Q@_F*I$M>F77@;qJk&ceB`RO7;ju<..4V9F%jW!pQA\[<[Y_2K*L!d=?E6M$&B,R5&'#Qj?CpalHh/dWtmnLphL*pFZ\nekT`@#,/R_$_54tH5EALo2lJ<qL)79g0fSat-Q]]hc,%@FM>B@W<W)-j:n-[O<SBe-!YknIo__"Dp.)#4r':DYrd%LOdRF$ukS!<KD;,MZ>$TR0I@nJmjr+AhkN=#X0]<`9$J,lAS?r&g]+h%e"ZbmJMlMOr,6(jZSi7q35.EJ70-q-DfM7C04jEk05iN4J/>:ijI)Cu((7IU/2/]ikd$M_!2.Bn`>kOCV1>4E-0M#K@Z?,D'+-Fm%TOEP48QI3rR`b,]W2qqrJZM8m#ZHsWZZKD*Yu(lE.F/R7(c>;-,FEFE_jYNrjj:1URT<#(VR/ZA1bCFoLrb]/@F,'87/97&b4_?2%-*+nFT.k#VEA0KDgS,FpheLg]>\aq\0$uDpCG0l<p-Xg`=`1c\klmqWLPQ/&Kj:q$VX!YKk[8sbEBlDJDgWR%ZIgQ\$S-G`4%$q+%!JSoES%c@F2Q02f9DclM#$cKafW^[Lb:L\i5o`d-Ua2&"fhcnFSD\6&7"/iHFrl(N'k@VFX%P6=-jG#kKX/Q'W5ORjC"\;RW),_.%=pqEJa1iKDm/i5%%ejq^Yc(rqGI@fuaTs4]NItktNJK263X?V8ZW#(@5idDg5Y1u/)+7r*"@X8eOH4D;]nW6"RDD2b`:KhH7/a8=%:^uffA:QQF`s\4:BEh93"rMT;agWf^_s3?[^l.Hk[O@/A-2/U&&3PSQZI/aQLfab])"3VrR*EYAlHkPR3NB)m`m5)5.Ml)Jr!":G%o&pXJ$WI,4J-6e]`<<CI]cC-">]U/U%cHS+LG#!G!YE:JK2dm:H;b`Z8ga(Gk4_dS2MgCNiQ`$t//Z9PF#aoHZZ:[^bL2;hC)YN6%Znb93WN''^A@'X9QIs:>g12lE8.\-@fd<Mfl5qnaR`L"YfW7##p*"V<KfV&s6"N#u^e^9,31C40H\8U28ibhAYqj)[+3X9:#0G"o%0N"5>qEa(?a<-oF7jmn7r*T^(aLnR,[?rmqG-^2!-cgDLY<Q0(JR@WQ?#$>KJGlnqq8#^<l1/q/P_q"`L"b0g="9VcC'=KtQb:%5%Pe>Hk"5.9V<G?uT?;BWVA0DV,m.^p.AF`X<j!?>Hi_Q@)F7>@QV$`]',[5j\%rK7HJkn=lF'QE.$!=*R\*#D]WQ3/^1fn/J/Nn[H%9'hYee=G\a=?Yc;<4eiP\XkdYC]M=4R9@Y*@<X$h(E8qlq^WV6[]7U_R?I`]VanN!/'&FrhELCf>ieu&HhCd[:k/K:Xp@\kG@rRt%^Un:h_8<F!T26rQ4?3LiJ#\T[s6u7sD*qp:USEcs1eEoVS,W:fQQmBjeO2-n\K^O1<Ks.AK0l^QX\<_hik&LXQFDLN;(GZ`<-32G%fKKYp+uh]2,ZfZK-*O$u!5cE!/>!/o[8mu/.+WmUG#f;!-#!B:*DAdcPM*%IJjN<g[ANc%RKa6OAKe3-4Yd/&&$%/DVi4+jDqgeb%C&lhEA9(G"QNnC.<td/&"\PTIhoSCdbj#.u(K`1%\0EoAKGGMA1g_JH.+2@Sqf_H`WFiaM!=*.(dm5lqAO@>L"Ni/bW$@;<qH+o_%1nk\o,*EaU,rBt=\''i^J%Upgpf??!dT;a:@O%"nE8?bRc<;P"kXrb!'!aBN[KboR=AC*].qs7jNTCdV?lVu<\AZE\M%'F>s*Q7m%2fMPh(_ubT.V)(_6u*,12[Po32^H>C$9<K%aQ)%l68UW2H?RXsQ\V'ISHTq!H<b4<$Jr&Y2[,a1pq+"TeOM9d;#%6B4@0r2NIpG+%]`cI&7nlf]C"=knS-ao9Ma/>7Y0b0dHBh)m?*ZSg"%+!ZZ5tS<Xbl7n8[u22C(aP.Bs<07'7"=lp#N+iP&(;uXYQ$:NQKXWo!E@t%VdpQs4O$TlqGa&P-;P#5Vh>/Fo!Hn\JikW->"Y!V.Ou_I9s1hQPWV?Z>!$@`0i*I3,f@ICQ`DR+:\.t'.\uXbaOG'_:2f]F)%eaR%<IWWYa[^`gpA^.c0;lRc]>o!@:nr;/o,28F2L4RcH!6\"c.@`'*,.<qOVWPj;km4.Q-.Q\j_6Do>*qFs9V,9^SrtQrj=0%36CuaT%:U;HFD(TfoP0$WI>D$U)5b9U%'m:.!RB^!`,8X(%>a[][7O5CZi:Ed5h8!]dlVXE>bnIp]aO<\_UHC,%SsE6F#*Yr.Q)CJ#diur`%g>j^+/8TJ.]=2c[WL-M6*CUZoVXi5MTeUg2<1[8[7M;;SVjarP5rVK/(+)g5PG^;?PXZJ[F>-lJ:]K?Q]Bh[GCUrr+r#JC2Q7=CA%8(DLD&psb_c+ABp_-O@aVk6@]NX*SEa]7\cI2(s.\F,%2O[u=l=u0Q/e9=&&;)sH.-S\^P9A1X*,Z3grN1\8P:3(h#jL?PC)[*>R%\m0EHP3((>.^+CMTr\lj@aNbB._-,^+V]Yq&V@t4(RE'uJ5X$U:n*'=@9#Tk;oKoh9@Oq$I0R(^Es<'R:h!g2>.7YJ!LT7?>N_aJ%S$VI[Ka57?OW3>NeVm?:$3N(-U-Ke5!e1Q6)u3[9RYM)''Gb[_UQAX#.XnQ%8Al9`FWTs#$t!oThX(:orXB!Wfd-8<G/8lq%RA2'%B3/bL=C'U4f.2t.ONai70ErSL)/P8R:n@@e&mL48@0[js(YNR?XNUkGYfM_G(k+`*m#fMT"BNP&IKVY2gM=lWdmcpF?7?2B=^*lF%LkhVDn:oIY>:.qBc.*ucIXq$o!`K\6;ccqaRA?q/AYVVO5bV1&5/5Nt7_Qn_hM.k8A.G*4ZVU'bZ@5E*h;.I\.E44FN$1]m(Zjb0%]3C:\ag+=%5d1MfHEB([jaa4%/'Ea"T>RA4N4<T>B#Q%*l;('aiu27fS@D95c(Z:mLBs8<EqrQD!%#L)'ff&7HmQE&LqPP^0o9"B%>rQ=9I@Ydu\o.;r<oPha7!O%g\e#M^CFBji#8ddJOb7Ii-0lMbh>&8E)Y5C&Uh].7BIo]-kFJf`A:P1HqehWjKdVDHfW1:9%U5Gq%P)gt%-YS$8;7[/MiK`\+Z!?=-Mu3h!A4V`ZMkFL"9?..[&Ij,q8;U-^mTkpnZ\HO>!CZ.>'#[]1dAt&&nVL?M'/OEC'-mBR!Io5A%m9-:&[]E^ojHAi(V<,:,42d(oY@-\7XN!e%i`T%7YgR$qP\L9c>4>hY&S1n/"?B]VXA[(qlXcu164=L/e.VR$#6sH2<9E>uRrFAO%4gWjCX9-[O(M%lWMN9DYKuN"-<T60'21T`q"uVoXBkYHJ++1J4j0StmJZ7&7Sm\&32*IA^,&o=(P]fJ%(3(?OH,Ni$gFbiU!P"]C%$8rW]or.6hgG]p\]XR+/D*;jM3$B"(H>J$H&P-<SQKM2^SVX-nPTs.<E\p%%6bc^kp<pns)S=)klt]<nM@)`]&PL%KEUFBR5Rd/(%OOpG\cl:rEhH31qpqL7XcsqhJIr&k%F;4^#1^6uW)sF1,+/OgP8k1##eC">.l,>0X5Ts_dW\"l>ER:'lnlHA946jjOB!F8e'P<DP%E%R0nGgNXNh2q;=cgU<0NH@EK5\PhZ8)oR[e#G[OJ6%5eG.kq=E&D:#-qIQs#**[8?DVA[qCsN1Z3L:AR6h"7/9*^=%[KFBiJa#0%"26Mf:I?VR/O.$FPG7fiqguNS2*$)?W0cWVd9FWUaq@p43p?p&Iu.X9"uK_!frDW+p"BSa;Mu?#Obe6Np=+ib'mW-fX'=:I`7hl5%XWZYfR@gki!L8A8mO8V8]16\+C^C1\a4%UL]eeh+.Gg^"M&3N?2[WBqX(72:.4LRk1?W&m7\T1;qF>l<K<g;HF+lU7O?AAe;3=0(%?l_Y%$0">j0EO\XX?$fcZDCi_I?SkL$ALoo&!<)ENqcS"BhH5EU=r]_AkK[51'^V^;^\If"eT<_L+<W<ai6b,HFbI"7(kCp@3Je\%8-+1+1tW;cR9\ntD1Ab`EDY/5PGEtZ8/p?R;O(kG]2G1=M(%Ni&HdX\46.lL/We$_,&0la://,BCIu+1jN\r9A]m,bNWhCfe)<tM%8O0:alfA>t>6_SAG):Ln@,k>h'U@4t0%o:d.Dfa_AtUH>gbN9$d9<n/AOKQN<F&'OAQF5_rK*=ue<H_MJE&A0ap[i$kOQ!)aV"gq%o+$o<A$Tf4<-kmK],"[C+cFm]RVug7e1;/f^h1e1ZFJ3-D*D5Qi2cS\JkWBSNAt`#_BqVo"Z[P+$lE"hP2X@p98BAF?ZiIt@KEo7%NlI$KQ(c,m;'\(1-8Q#s,%Y.^T8q.8TO#Xq5TQ%rMCu.mZnX0?g'S!@6X5kmj,bD$8g+9O"KBMZ!jN\lM$#(0OW2A8M_YX]KeF_V%T/(q9K?>OXZOejDJ4=:q@2ED114(Sf0Qp#'gAm.+P/UJOEr:SgGJOd:?lV4T&aIEsMRQ?;'<(sM)\KFOI1_o%W(R.Xq-fRnX1CH]%=P$e+e;]JC;rAUlG><m?b^h>R?P`3GBY`:-?7dJ1[EqW3]4L/<&o"HMVFlhA<+ar`eEClk)]^\P)/G)0W*G/b,i:m(+uC?WJ%9fZ%UMgR)+p3KTg,\'rk_Z<!7V*(q&4UL=$p<U2NGolBg^pEJ;94q`R7W<XHOG"Q%#M6r$P8u!^jk[0W)0m%PsOF4Z4J0N\jUt'jk\_T%G]`&%$!_$gfdfL?,Eg)];oSh&%&$G\k7ijATU'PQbUlL(HTQ;*XD5>`[,OK\gLm\:LQr*P2XLR4K_EF?@tBQC(Yr"k`^e'+2=mRJ%&/U&&N[dC';CX28\10iK=gnDL0&^MMR42>JM..$j@XOnS2?S9u.hH8bZRsR:(bHnG<"\Rb#aOAk^o?PV!F1qI#/;nn1CfYm^cV:M%W\fhK/nqO&;5$0m9?k&PH)fW^@-PY1bZ*[i4<'VFCnq$qV!e@H<d3:nq&e!.2EddL%4^YP-n/F?BY]/mcn&-eQt=OBB0oi[:Nli]%+>n:t#q$HFL@k1cn5<^d!<hAk>t[,E3=aUj2=hNS=C`\@=CQUN`$??=+3Lji(&7>#.R`bH1j?j'5h%:T`=>O+1U#7?-idE&.:"'5%c]AC_Qc!U2Shpn@,"*3A0<)FCm(SSiRh4+=S[?55&M+g9#-l>i6;-$T"SjtHiY,c0ejfhB,j;j\VKo3nV\$ZU8<+Qs:l<]7Ei(dj%5Z43n")(L_i^1b5VT+?&M]@Y3=X[-VRa[9'&d$&qY>H"6ei5@KAIU.)444rO"pN'8f'$4JAYBqZ:<da53Ct5')iiUp"h9*(%]GQo%_4XT_(fT0<>;`?^1QUOBRhLX-Ab1Wp$_0AV92k$agU5GdSRhneI*!F[Ll]gP%$hf#?`1SM,sAKoCI%"0k?3AZ<@p7[+ZH:(:t8uc%=G'RL?RJhTO]#@ThGQ_2V#gEj0.VmGe>B6f2f)hI$XuV0=_%<qb*8V4k__u9T!bj95]\(Nh`p4+kkWXK_85DE$fk]Ge`*alZe7"A%N4)-Z7oReX9a=J?0$"nCO9!m`La=fs\6:8a'(lhM]d9bSl71j*Z0k\Z:8j9J$W5r8X&S3+ISiDYqOp\8/&V864L[Xnj<EH!JHjj@%K?Cc%a@25#+S6C0*.s+(@=ubQ++pg=EJIO="+adZAWL_1C:gBkS.6?>%1,Kq>X<F&o0E+ie94i\a!k#cl)!TD,c>_Q8]W'QBdf5d%*C]a/RqWfM@[_2iU5Pa*dL<8FoaKGq%fd<,noQ#UJA$QC&6WF&8rpn)4^nF:4hhUfPQ>_+SAA/:d?cP6WiJI&!D+@Y>:Rl*6`HQJ%C2+.n(R2C/js12$'!6V;\H5uCof@@uJZi[k@rlAo^?S:ATijE__sLZi9qrR7Bn<>o6md='k"tS9;0m:DPJL:3<F)Fg`"tR(Sgb'>%gu/6EN"q:7*,(.^k3(_$Q%72#U*/DL6<(V&/L*"uTa^5^f>u)N,4n]+4FkNi1m^9hkPM?^5X_]&"goLr+G\f1.&MbnZQa`/b)Kk,%7"D%7'd%JcbFs*9]p1=38sBJdURpR6<&Fr$X[>LpWPpX;&5%(=%KRC`QY]D@.rGV1\On.!?jr2X3D1_TDGEnn(cl=E#1QFZ+4kI0%GW?M3'Cpc"AWc/HL&BDo(Bka*Iql4O2(<*07-ZTQ$Ch83$e&.&]\Y&2PH0lf-MMs=>pCP9fSU\b*nUT]mBl#t@j>[,'-Ut.F:cig%XH#MQ]OBgFAP&Xs/BR2nD:=XX%H,UlM$ZW`\RdlO]boJ"XJWb/(5PHn#/XOTbN`B#LnYOK&Ru2riKn]'a6j:<+VA!o!_a&^>1."R%JtfkeONX[f"M78>;,T5Z@)/G^6Rj>uZeao(.Sau%-F!Um:4,flB#t`<*>#d6f1>-d/.Jn&e\K>R86+!K_OeYV1`-m^MhVEHfY[*X%7PdRa8pps&=B+Ee;RtMg8TZ-q=;PkTKuB9ELqo,s(bc1d(;2p;^b(Y`<L5\=9sfB)d"<Ued73A125ZN$F<Fa3LAaHqNaPu<54QiA%f1&JpiXP:*]I5XQWL(hp8lR?(0.oR)AUsAX]o%LL6m$@#-`JRi:m@j?judkhA5*u\8aJi5Hct3`1-pL<[43jqJoD6rqHuc-<d9J7%R>?a,j:dN&#^3QHiiB4MM%T1hHXdmii^-tgl[g1C33/f;1K2m93p8nJp<4GU+hC`#=>^hh$&-0ncWI.(&R)b&%im2K:6LRr<7MD*%+R@H5B+bF$e2=7P4h#;i`)$JMYM30\E@5t/V*bf6HuMno@OfC76f`#Uf#7-M`RH<+;;g5[+HgpP(*<&(GVbKp;%MT`e0^nr(,N4K%$%p*t9UWEfCkAjb@:aK9lf.Y$&Nuj8RoBSo:Y7(`\Ih[dl>"DJ2`,M;_=K9PJFPs[FDaM?R!@dFU(Y!k9,NB(pX)8M*D1#2a\Pf3%Ff;CSXXS-<\)jE2SquT<s.KY<rAs#:HOU_Jf2:5L*^mN;>+eSVa`7o*;mkg["7,K=Sl&4%S34(XhNY%ELtHUcfJR0^jsVBfN[60U%:dbo"$=(D4d;+Q.f3!@17/3'ER;<IX4agfUC(_#NnD[]<"_P9-btber0fB%Kbtpmjh-f/[7(!a#</3LjQ@b5.ZMG>8`.p"-Uf2=e%'!m\qh?#.F(4ti$J4ns$ZKm/V#aSG,9YK,MYrIqnVkCO2=2_(;r)$5SB_b0)`iBCRq?*n1!R][)]4CJW7ZV["*^L8b)([VT*0V9u%NnNFZ<#2gEQ@N;94AT]HUP5DA7tP-Tm=SJ]O$ObUU]iJt)(Msf#@dZI.][;Ro#M2MGNlAXcJr#+O@G8VYlu08cl&M`=isfoNb/lg%5*ukcFqtLTgnQE,D^A_N'S#MMHI.A-6e<8.FX5%#'Wk:OU$[XaD_,ib#"Ia0D%9TK&TaG-aJ<!/^mMX6dnudWND[cc#[%E*WfA=V%lEu>e^-n$G734"ND/VdLViYWA.I\T%Uu<,n2h<5A2O.9Mf2C#46B4\fOXLt16pE=,ZGHX8R3JI7TH>$aT%TCF!$:be]98!YF2Y4R%];lFq5L>;7<+QpEjEd6^Nb"ZSPrdNYL(9@.A9)EM%2LuYW,9RcP,b2-JtA74)%J1EZ59!3(GRB*NnC;NEOmuYBh(3N-J]gl;$&LD%Vou;3/<W]GWhAV"[+L;DA]=eMXi(-U%#6uOb)-%q)G";M1(hp"pOI*V4d?77#:[11Sp,I1]r`K+[M%gk4(M?MjK-E&$fp#uBl%jd%#a;Pj.k=sMH9$#FX:0TM>I*f63fV4\1s-]=?YHjE/LF^UUZI<bN0q3tY)InGWFX$1@ks9LGn,022-"a!"BME:gKaB(@&n8g?n4WM%5]_S=mZaNU:@rnom`J8?Q5=^Oc4)/1,sn]o8U<E!DTGPQ0&`Ph'Qf.g]L<51'Z%>j>>a)3id=+5Vp8pY<qK(E=JR/Tn@0c,QHW5O%"iJ)T1AF<SV8J&0@pW)$5#Wf&Plb)='_Or$&dF7S8oAe,,_L:F'cl+EF55pR_(J,5EmYUDkh?u&SB9c/DD+DDW*+9l;(0p&dH+p-%<uVHG,q:a9K^;ak$?@$27'&cj.qm'JLLH_/<:UkiKj;ljUoHgZ(5sW/q6tEE<TSQj)[oFLWDe_#89)+1h4pS5'l[4^pmn3+(h6J@%?*M7!N")I^M$!Bs,%;)kG\Q_)2ll;M(IZD#7(Jn3D3Mo<`L:]7>RSqK;^JDa8UmQ$Y::$,!C173/[RZnrXVfJ_Gn15BTt2=qUu.!%F%E1RD_>ZXZltfrK6CKRCgSh5hh8)iA\h?![,^X82!nTqmRA/l]j@-XNHc)1*\Q*67't$k8e#OP^ko@#jd%MIDc(SdJ>ES"<tM6'%7'H=jJ0_FUqoQ(WRtIF/n6gbX_N;]^Qje_bHLB=9>j6M8pXZH1AJ2')5o>cmFPg/s2MI>!L@$HnFY/ltO;4'fKh`Y2SRi?5*4qVM%&22*-K['YKO:m,eK95@r'lag[-+PE2KgAnNZ3EQ5P"RK\&CgbGI<8:?(Rc[O^9<WV\5O<7/K+_P6f)c=/`)&7hNH/]g2AOoTZN]b%$nTN_?t9;V=[OW5R/-A^^l[UOX"?H9YV\/W=eeAXJZ*I@h(C2q?,jHSUj*ndLCCsimSmTaF&iF5M,75IY?_lLH'BJFW^:VR2<2pa%%1k;u-!\hf=u)G?&9n)`X:ki_iIF5SSDi#7g79]#*uNB3k+dLsd><MH6T;QgH\+G#-J16i(eJ8nNkNCEPS2?E6ok*q"s/DJSoLjX%1@^(&JP+AjC't_CTN\fM;8LK++_E*p*lneoqn6U06:ikeAJ#8Cl02_I&q`ZG8fhleXH?/]jrrNg'2e-Kp*=s),qLnLH0O,&jPa)>%.+%%SlHLi6i32Gp_BM";[AElEX`?[m#:l8e6VKA?K/DL<LN==R.#;!"/2#/a2TK@@C+#`p"nOV?O?&V;;p!,FWtl^!6Ld^hD#pVl%gt2W6%ts9V&c][bKp4.BK:$:@K\m-m7U=6A*5p2lAUPVGqd.J2%[S<M4p,VK$<AUk!;;C[#tp0>VA&%;!X!]."G(gEZKf'Np8bDM%i:.Rn3uJ-c19AYX.An<jQ!2-\icU:8S=#_-U.*9f5+'F$>S2IcCBr$?qR.3Mm<S<XpZASH6qNe;`53Sn*dL5k!,GJ4h>N&0QV/f6%gNA5o3/"6eAPmXDX&ItEI+89?bjI&pnU/\im]af$X%_E@e1-(S`T\'FblbmmJ)feCfi`^m\,M7N"d\QTn8^;*V=TnJU+[*9PsWg4%.U%YgOV/%HI(N!s7mqKA/pQc"SEa$U_h!Mr&=%jPW/V_51\LH:*&MW2YVeFSCs9VoieT0Zd?V8*3F^H<Kf%P/0Y5-lhPqfZTh#Po%ea70%6<k2%cE0Abj],)f7?L_A,r$"N@R)iU$86-<M_BFd<F?AZ,7]#7;iMSS%(U0]"%Cg%bEKWf+nJ#')6W>:"of65!sN05Na[(8%*I?b=+)2UU`Ts@j"%4\;H`sL`'aZiqeBPos%jF=`JQH$;_g;J:N*I7?>i(.o9'_b3_&,Qa;-EEIiSYN+k/eoY=brBdXKZ>"j$qsR%]p)FBb*XBe6JI4_2="CpQ=0a6-./)<_,WqP"<qFhpo$m]B#nlq^.K*#aE5p1,,[7`_lu)[A$RnWLb8"9Tu3N^`B4#g?Y<%m2pUi!%Xu[4+2/.!jp6Z9FCUp9iUp,[W?6thd]Rd1(.l4@0Z,k<GibF]^MF^Xr1eF_=>k$'!<_,k!U:mEH'igtA<hA!IlQ#ZD/m5;pN2p#o%r<s>^7#fV=@a+RTkT3\fEeDkuQq1CW#B9(;+I9-%+=-&k,4"0D5i@/1<+]06@nq-ZL;gHUFeGQ=BZK*@G,g1^Te7-(AdtW22ig5l%EhY[r/aNY/4VU)8@Is,K7B%:XFTlLucnq46LL8egg`[n.&iW59#D?)"4V**gWqU'RfJ[-1!-o]*JfN.??noIHMlKf)H'P0;#ma#B%c,$IM!;tg&CjW4\V+la'OSt]h!BPbIQjr[re>p.o,%\Z,!*W]M92ZB:[=NMd5d1WO/n%Qf=fmFs,GlriaMXF'RO'u#Lofee<)t6?%b:#*o%cjj)GO"1ue1m+T84B4b8a!;HYleR.qdIl`A)&$=J\e5<7!#p"4>B.Tjgg@Jd9-eS1$Wl.W#!ua=G#(ge9'C&<S4.f\a-?.%?7/_*OBXp38n!j*5rM/;VQT__/>4Q:2)uckooZ$7Y75&>Rp(dd?p]P0:`_FN3:dea+pJ=1qE3TfHLiDV\ejE:Y.:)=FNS3-#q6;F%0%Jo@kR`P=AsI)#+I+dZLebjlNi3C.Ft,]CQB(@N"s"lZm%\-%%W&Zu#4p+-<"M$@H$Bs)"'S&KTf''CYT%,([[!T2A<0=;g,aUC%e`k"LFTLne7+U*iLGKtg+m+_uO;/Z#[0<7aG.hc]Eb7Ah:+Nicc0f>CJKr2\bUHjk.CmniIM)3T\2ZgGq#J?9DOFGH`&OCN#Z[ZO%RYp,oQZBSC-qH0.<OH2V20S"Z^FW\*<0p#)G8\='3!4%kb*"?jkqsSSUl,f-$sJ>h@5C;OKoJnfd45)uobUbK0hm=USV*c-a9gWF%k)IPqKHjV)b!B;H1le;/dMsU?%)sB`!oL,n$AkH+d/dgH3EiAi#Rled-:kkd9dM<G%I7#GE_n\1.]Sm?/[JJJ/X'aXa!_('OGMa9%%3nZ$ks@]3hHS.T@*h)j,-RTM_7V6Q;qaRg!sT\&7W$DXXM\hEZrickZpSAG8RZ"G=u;(]DIlfo*>aeniCoRB]MgR`8sJUB_^XD#%5uo]YI1.n6"N,]9Ot&-,#mM`(.]_"*1h]hQXa1ME#,diNP,Hm%_5:3dLubkGBi"dJo'NF:G\]97.=)jccnIp5CBAf+<nMC_JD2A:%SXgWVS5Quj?!>/\Xd:";7iEAD92:S)WmZ94Bl.TWf#es4BG&i=`nPEt!P+8S_DXqL`LtpU!Z]V/BS/iP&nU%p\/>i\]tc-+4sLgE%p]VGEnH*=(.H(Vr0ISN=OERe<K9V,H6$k_L5?<`"l^"paYYJnW4_2r<T*u7H;ReCth^GHPPddT<+t5R=OusK']']pKJ[c,o#tb5F%"hDsRLpZU?Jb,KVVLT*e?UOJ@[1I1[Rla$2+EWIK+Gd4T=QBBP3B0V6@jB0*?6oX>\O@qZg$Zr*G>lVC"\%H7dH.G'Gtpn_5l:>N%a<LhgH;+]CeU8hr7/4jt(]Ym]0"]h>ogUJA8u^9=]5;`rVU/l&\Re#X93?g<O!%9IrIKZ,CFS48qL.ktj(IW+,&_*J]V/6IZ1.XB%@qc@eBBLCqCtGV78\Lcof+D/9;]\=`?k6m([8IR@Ld\L\&@'NUa,h38-s5/<8\k("L(-NL5H;Us4\YF&#bfr.M&=Vb@b>p3g&k:V%]S3:RAr`NR0#cU$-<"R%b9ekU^h?ZfPSP*6Re;"egc>s0ZYn,:Eb\nQ)'#G;hF)'H2lZl]82Om`RI7O1!\p[;W/;&_*r&a#)%h_(%E)O(#*/LPm8t`/Ijsl"4]?%o82^=r_iM0VF22n*oL(.YC(&2NANKPMO$Y9?`-#tpW&`gVK:K.XBNK5EH$HOsYRfdqIOJLaf7]@$X%B-Jl&0A5e^KMh:t'fD8E^58dMSa:16m%'7(jIJSa71VlK;A>lt)p$khG9\1sRHl,%MTVr0X3GA$C\EkD5Yct<\OPgE&5qS[8[bK2%2`_;k0LQh+GUC[M&m^d3[)Rdr0$7aD#l\CgD"_[=e*gGMB2bQZ]hOZlP"Jp]ZAK"XEUbAZ@r0]kLklg^Pq8=M!H(IE:"qHq<Pg:$%J%`*WI>>mY"n4rU*$lQ]##2F4,iassIA6^X2ni$c=bAkR.U7Mn2$.h[]m&TH:1W1:NLal+L/)g"->h7D@1:X%\rQ=&#m\nlQKTX=%$d!.AIB&KQcA@LZ':1[saf9&pQW9QW49oMJ7eTt-0YAVA"7Yb@6Bs2o-D`iOK%M4LA40PLif7V]I>-9^o@-5XAl1.`m\MZYLTH^'%'nXDDC=CHKCrD!b5oT&`-,VI)TKQg>ZNbALm#+j]k-Tbb)CsEa580EmBJ,)LfPO%u,Hi\QegJsb;`HWuMf@\&>,AIXcCBK;gVoiA%Eka40TPm2uLKBVSJJ#P<$$3j-H>fHq-=UEPji0Ck$N]AG<,sS;/F9isF+FP#!9__cB8m>+911G2ZM#!X]k(qSB4dgY:2Ul-KNd^P%ah]?Bd[K]727Z')llkhk!@g%QD(Y%2h'"cpHX(HUs$R:\;P0H$\P?Jg>m?a!J\9l]UmhXIQ(-rko1eBUr7%[HK'ChFcdLu[+t@!I%KpXT$oA)Zt+Cfdqr5r1UH>\=N(Ek+5;3>&1ECb:42f1o"7"L"fWSAHZBbN;MHYIl]@NfOH'l%Y3VfM4mZCWnrYe>lDP-?[oYZGk1%PBjfo7'(C.8g(lA73r0@ghf+<aMW:Za;QR#6j]LKUU!o=TNdoH4di3<8:44q&PbN(DIs/e8TQ[UaJ'qL>baqX`_:!Y:qg80G\GOT%dA*s[Qt.YQj&k$9.15-*[#a.Gn2bZ#C#CMHaR%?Md6#72(DX!$%;`rl9,+E1+uoACi1S`@`omtb+kreb5k_2e$!A.%U56hj07LQ&%)FP,e=htC_nX-Qt^VbHq&pdBa?IWS(c#S_(YMjCGA:t:e17/9g&D]L/+b>h0V2Vki+#QKk$oE^Y6H"E)Pj:4N*K<5q2?/9mBN46P%7-/B":X@$#f;Vo]5'XJ1\ih2*)nS%>\LHASH*diS0h)dD)Ua=a"$X":QK8D/9p3,!k.j=!04b>3]TJa5OA2&o#abp=9S_gG7\NIK%o[`:mMuImc!>X/N:gAd7-CCmE$?tmWmP:@+ag/_'c6;M4Je!!\jC1.q(=q7b:!W*6/g7O#7l2#P^M-5o0\gr+UR6e36unk'0UJ1R%LT-g!>gO]T.(FMM*O$A#\A!\n$L.Ge`Oc4m6124O8qn.-bVM_FE\iqK'Hrak&.:?5Ca]Ag=V/N+5.N3%@?PM64Ulf(Zro6ZFGQNQ%KSBM[PY\tQmCca,)4Ejr9/K<qn"auJG5[IF"[NV2m=ZAf3t,TEGcsgq2!2Bl\7QR4"HmJGQ)Id8?p!3a8dZ_\>7(L?gWg4J+&N4\%f"u1"dF+F&X=.GnDi=_5JZdTJQ]:67C(%[X8WHGnaEtGJ.O]-!9L`o$aVo:'Z4JlMP#=*8D9e>T3L_<C2%uBM-X\(KbrRfTV`/S0%/l<;#eJcFekq8ts7NBEJfes3sSRE>-c8%BF.SK]b]`D<#F,jSZ]Rct8$E_%=$9YZR2S#LiS1;'*K0]#_a>:.:,sK@\#nE9L[iDU^%<13UUGDLMjIS1[c7=5s8E00*F4#n3?/HGdO2qVo1Zn>G`TSBHB!d>i_6/tl\KN\REpn^?Y4qg,hE$[0"Ye)#ngZV@=?uuq]mO`41%2rmAJ'NJlO4<Ds%jp(VD%9SIC!Z[+&Cb0K@)I+I<0%l;UHIqsJ1%IS$6&JkWPEM-V@S[Id%ONBXK_1QaK#e:#mL9/JW`$W]Dn#gY%HBL+\9!1U'`-;i.5m;TL>k+emFXRkH>+h7k6rm-%+uZZH!=GjEJ=EsOFC5;]Dq(<*\5g=_pQe)I4k`;be;Gtp5>-Q:B,^^$42_CW%i[s7!%;C[fUQmM'm'UR`&:2b#eQrcedakAN2l_m9/VcKGaE#$@#3lTK=Dfsf)2_lJDS4?r,\4=%G)9%jj\V^QNT=4s#,8M"b@ZRf%X?*pM3/KSWP6D@/#.mbMCZq!>gIkNS#1As=gsekgO7E8s[CupF]*9f]A@4reUATSj<:P:87MJ96l`H-ZB.D14X6mQcD:G'"B8F0o%bakPQ75lD.^;crN'.5`]d95M+:0K@AP9^q/!),f&Gt_caLlY"kP1pPQW8juD:kA`CWlI5a'lAY\!XV7_DgXF$#n8])H7*M;[P(Ae%k:cM:6tG$K%-#2al39so)_@-*,X:dDS&F]\a8r=]BT5DZ\Y(b3h[c"20)Go9cmc$RY>o(/f<h+qB*/`eZhnjc%\W;T7i2U]'$VU<%ET2uR4*L<>K$jn93a/p6G`),SSH2HBoQ(kV%^@]se<8r?ZH[LdEmT&1lt-T*N,U.&57&ddhWf+c=&\K&:e;j;b@fu(:&+s/ml5HT%.0'gPqb/Z@Kt5`1fc"jD/lZD#oArP?7j8#u6"D;oc+cbR<S*NB!.&0%G,cB!>FD#iTu9M5]S-t7,5UfB_Gu1]6jHq2Q,ah/,Siqg%V.:#]VU1h77E(RSNe"I/=:,MC"um!998:e>+OnJ;iLP8!'r#@A"4aEKbK-f$9/TobPnIXLd@rKM-(!J^q1WqtGu)+0a,33jX^D\K%CSSmDdM[X,!OjEPhL+GOE>,A`L+;@,n,\AJ7ABYT"h>q26#P#bbhMb5\A#iq_pi1X`BZhPU@:*5Bu(jn&NZD=k3slO]hOaN';B;e%SeW/eEiMp<bo=a9,RcD9d9%4O<:a_&:nk)X$LcXp=q1r5Nb'=clo+';Jp<7.`bM5hARgM%H,3X-iuZc(5\)nHY%rDIe._tg1,)ro%_ul;0*5K5+!`N*1@QO/@Y>+)&6%O!3Ye,`39-JJ8>[(?R+mF*B:cG@ABI`)#g">q3cHn3H8K?>UB(tt+WUpf(+%0UHG!_2@#SJPf%pOr[[$A;C!9*D]DYZ\Eu1G]gN;a&0:N8u[NrIR83mUYWc#%>k2`83oedU_UqVh_")%hoJchZZ#15X47SSH4od;-dLu--mfFM=:]c%Dts`3+@N$)-C^ej(cY1Ga%<4<S9510*6D+0jl4'[8_B/iX9AR,WW\(k%+O!!AA+]tc$`+.%,I^YcG:6WH/`lSL*<j/&j&LSoQ?"V%$e[tA>6RV6U<Ccs:ntF'/$p6X]GN7k(_eY);[5.8MMMug<?))e7&["58HTA*OT1SV'&EcEj/%T'rg'L30i`'-n&3fqJ:n*u\cS1:%6?("r:uX%L)504gWpDUFAir\&J1A^j%.ht+%l-CO>p8HfUoZb&P6#H^kZ2>AiJ<'AjG9bu@#\lGS>Dl'@Y;k<ZWmeb]8;qTAUTaB%F:hXZDD\.#M`M9I;`ntBg'u;07RE2j#b,sHGJn$K29GNc93*&]&bX@]9Y':0&9=tl)PBGnb/W+h&DM&g/'R-:#%/"aXMMd#BZSSO%*5K*@^5@##e#@XMg?KSXQjdL>+A.<knJZ#kLha4G.iPa?:e;Ct'ZR&k+c2inMj.N62aK'I<!'arMgCgEd3N3)bjOu&$:N0^A0_#]%>UbO@=m2ZK&gDE<[5]9G?Zdfr`Eu=W<2_?]Y0`keLYT'bQVA]??l.lD#oEZ0m:shbeQBD/B@3McVD3L!LMrrV**4(_!6)%\OlS&_%Pdm0.a-f]9gObO)N`S7dp::g]1n]10@QD5l#)COANcA.[4rKQ`&ktYfMo<f2-:?`$$IdQ=;mgfc"r]hH#5IRG%#iJ.EB1A<kRG-m%Z!0lmG:JbT/jskR,R9fG9<<ct?7!e-2Zi8E:"%B>(4<7<<AKY!oq&-\<e9`!Q.?]KX!^:gXFZW&e]t0c7*65[kS`A%kiYO@@7nP-%Jt"*t$J3OQ061*:(j$[^0VGe>`j\DG"B#H7#TMV<L#.W&fMFn2HdV*H%`hBc=,<f!=MM$6DLAs+C-ZVU'\%LAb72:UJ!)<54sV<6%8Akk00SkiacEuh2".*Ka\XgRtoRSBbbO*[n0lVqYD<UnD(Gplo)W>-RQT)fL9<?W<k7r'(po2ZV-gl4Ic@M7AMega4bnqlt6k]21%6o$tK2F.gQ8lh\C'duJH_Lfb7TYn6(E'Dq`1^o.qM@p\g376!lQ,B1.aAnFIU9HVK%YI<2Ass3:)qi*2%pgl7rKS-,n[YtURBKoL%F:J)b-]p&qW/aTJRfb#(Zs]_'JE?B#)OBOaTp?I\,9$VcG%_KUT'@sCKYu0"dOT-Gl>7`F4d^;"`mkmaq)'cS/lS5u7;`j7H.$lW%S[AQBMmlM1(IJSDpnB060?&T)Kt!i#9k!&#BWboH1ZAl4dH0lW`/6AURN8M/<g2r\SI#o%9V6uW[:C(7CN=J]7Ue(r3b7T]Xcaj:%D7=/Ggdo#73^[(=,RY>2;K$:3Ko%Q5$ss%78!:.iiSA'S\Ip*n"YN8lAatJ?RBel[gk8YTTPU0-ZFCbGW8qguEX<md@KW)N/).l?%B!`&#dbo?^=$jh6!SfDN?&&HE]49K%:^'7%ZU+g(,,DG+a`E(GbN#96QV9$!r3j6^p+\&?&_fW`$[a$n0ti-K,l8oa^n"_jr4ltu%a;BQRRM@"lEtJp&4UHFWBfL;t2$sUm$iYsR\#G1_%HiH_'S&#4b,RZDXVfhkEq=7l;Omlg[fM^->[@)-Ri)^O:rqVLi"C!"2XKc[%3EX4IXkD$k6Y^jDTW=cRLk\E)AbINr.;G^!Ih:"hNlu60$c)sR=r0Oc.T)6O7E#k5k0p7CA]Yc+nc<R:e1JR;%LTC.6rf0-')?'$%:j%6tYX]j,&Eh9q>rkZlV6hAN.Q<NumgMZ@\+hU#k*Y/,S>GM@+iG3W"I6-obh=GJYn37/+u\,)/c/M!D9UCj'K)I/^mlj/8a-J$%OE4"QQbm6OiNSRu4D-iWUj4Pgri0\V6BW3m#r.5G/.sDS,up/r@gFTKeS\j\F-rmm_*g6pogJqb?iVsmrWXqmh-(L%S;?^Hf`9?i%a<B^,WN@c^j,)S9U'CP6^"4p<;5-J&$34l-H,E$36kmF:aN-Z8#pc+.%F)*\n.j<!%2nA_EEVo-.C)PM[^K$4/F!q+>^IH9gk&6H%7g()?*)*]!nN%:lR:1(L9u7YN@9^0@"$Vk-!R3sXa<'R%)?@WB<H6JZjcu_-A[%FHqE:&hfEt;.oHXn9A>4C6l<0.u6DoqhJqSrJ%6.dUj2\R2iN?-bANiA.ckAU(8H5I%#Z=jc4-sSZ^lV$^oPuKF]P(6\4&#rQZX'BcY9O&6.]hq_Uc=Q[j$p/45/j1,a`#@<]Qu%l>%C,52-`TN<qZ_D@E:ALn5(*aKfAd$D`>?#S]\-&`@/AsL%qIK[`9\pbN2$I)CLkRh%p+'(BL6?VaJ/%3MCo]VnV?<#!?E#Pj%aE#I%m=U.;FG[E7"]e2_ZB4/_SM$>_.RmVPKC<U)B*OL\=J4#2-<?d];\pXh]:1?ba@.QkJj^fU2WQS%ln>&aV?'SN,#>F>Wpi/9$R+&^%lWM=ZlL`(9,SWRVV>,jIRb@cN+@=<ga5Xgakqa!;$9g-8'!##,E3u"/=VMQT<0@to?"L78aUI!r"uKqV0'jEKWfi1%me>+*m2WtY%@11ingM#0h</8S`X)m#YaeJm.NdPp1[8i=F,e.[bF0k*Y?V=-qn;On6(p9`c].#9dKfE1<m93Ge,ZgsU`MPSf6:/<V.]$f/7=2EU%?\RQ%Qhi0WpYWi8Z&,Mbg7nm@Vke2+oNJ;+oF0@=khVG-&u/Z#LMpWGE<qm3)16E3VpN?pI4NQN-1`uHnZcNMH'iKsWkD9%RE\$?%:(\:u7:@Xr26YR"+TXg*g&M,QLn#49dM_JGJJZ&'-%Z[6)UiH"m:@TR;B*aY&=#ebi=01dK'?PC+r'g;fIHE:&MXj\'aE93*?>K,%2oQL(5os3DAbta9]EEJcUn:.7VQUZOKP]Sb:IOu)pBM(Y==$3D_':s5oJ*7e'nBa1QJOGV$KOU7NiqR-'i/Yi1H))ldE5fB3!O*U%8<"Hs_[</gZ`7dX)PbI"8QThp6rnf5dN[Er6iJB@^dptFlr"n*25>+i"cB=_U.:Gi7RYJF6]1APS-"@_(^HRaor'&i@St?bR;bDF%X6-!I+;SR*+gM-0PS'r?k$]bLnD'L10I;Gf2)./2;=[drO_@:j%gd-N73_rAUoB1VheW".g9H0u.7Aim?SL,L9s$DV!tE"<#1kEU%AJKhC!W`,%6I5cjXGZHE_*C>fkVSHgA0$L]W3JH9mQQXs($"`H1bEf87l2J@>6C^u2YF?d$2+[ILHZOZA:#hjA"8AV_8/>3+2qK;%$M4hBH@`!B$5qpLP"\9ST<Mh>AcNsi=@O,'_GE'#!bH9B'QXfZfso&f">M=XHF:H8ac5,\16>Hl=lDCs`^'?#ijc,/*-7/<>b,.A%;fR(<4k@cK;TLNbpGWp$<?cW(,]P#oPlPlcm=^FAeU$S6DEJYH98-.UZUb:uB?b<i.T?`Biik7m>Ikq:A]l^I(2t>dRs)jb\TZ&I%\:8e()4`oLqW@+h^Wp)p<W@/hDsQ]TE;oLdGd3X]p4R[5qIFrV6U(D/hVNL$\i$M5ST:JUm=2kGmF:)DMF*D<KPu<Xs7i\oa"K%/%[o"lk4o5-_2qk!hpSh_H!>t-k+:_&Pg1D*:#P)JnSC,k+DZ5d?$?B[_f@G?D'La=V2Zh.3SC.ADGQ0?@n'P1!4DRUF[pY*>:\hHt%^26(:LXr6XLi]3oO0"aCeh7XFo+IAPY\J.a?/%4T;T9XBk>\n6TQI2rQG0;o=K*SthRq,:CO&W0Z\qGbc9sj8=\`5f&-o6OMbqNj%^6X/&<d)jbSPtU'+n=WraXDb[M#9LGqTI7d8Hu+_&FF4epT?[4[]['2eM;gFL<o(!;Q`*,8O(ZQe%8W$"T8Q=>\;'V>f[kT!A*;F%$q3k+k5ZhDoWHJp"bjFD5blgfRU)M*p^-p@Vi_JiM"77fK<Z]Z!b"@h?.]hX1'(!eef_sSG-rO#I!>c&N><5=q$VG"Q;7sEW^gh.%&NO-qIZ[!ejnm3;4N[MT/4^bbTF)r=eD_*P'Dp,FpQQ*4Em?P`S6T/qG;,,1&2+[]M)!E>)V""<_g"8l9Ii^%2C2'R7Nf0#i!_E,%)Y=%u8]t-ZF<#kONb#D-Aik&o;R$i[^H.F$BR\&T,VrUUL&o<(L$^j[+:E"]]16MeB*Wqf#dPc\B#rIr-aT=6ZqVhU'I+<JTpd'l%-"Nr8q_<=An>b.65T#U:'4Bj>D;oLQb@R><$Yi#)+HdDq+o],$'riO>XsC]E&<Zn%0U+@WjF\7M=?a3/%npV..B&idjP_MLi0)HJ%7tfD,>WHZ;%%bn;4@ZbeAg%0$l>U<*5lfsc-F.ni(f7eMaiEK'b!EpP,Le>V"skcb-e,5lOf,5'?O[."U9O'lCBk5669s.8/N[)(%5ilR?\?']N\>A#_l`[E6kI2!G.a(PT05`n!KHs@-@T%],)fH<_n>.&]pj7PW;r6`,Kgf=j<j3#UYB\4])76^[W]/'V>"Jj+l!S*L%(_C<g*:b@06B5=/!\GnYJlrg%rAMGQV)&U*p/&ZY,GWMbfrsTca$]u_WLRP#c=I.5.BZ$3nCU@r7QQ:"V7`IG>ND3^eutoaW&Q4U%0'tsN7:q',9C9_Lq<:9b"]PmHQ:7J9U(S1i=H!2s9+L)Wgb&hS/]]eEn[V7c]rKI]+U$i[@!g7Y:!,Bbgu+`r8mk4S_S[B.b?rCQ%8DU!p>9G51n<0rUh$Kp07L%('a:iMO3k3,Y/HkTJ?[D9k-0K*V_s)tncW`FaMtReAg3\QJ*7.j<8;f=Km7EJ_2Q7An3&G*.DMP0R%)0i<^FOT`e,-/r^J]_#@T?c.NC0,7Vp&VQHDm/-$[%lAO6eB<0P.$idG<@n!+jWt2n^BoUU"j\$.J.`@ATJIX:3T5C=O'J.SeP:o%_HCDnA\$W;"mK#6\YWdC"R]RX#%+0Nc]fVKZ*rkgY1!6k27;Lhh<#-9-&Ls;7`nJMNCm>s5'a;/'baghW^P,-MDOKf`[gDl+2',T%SX]0Xh3HYS=imLB7NkZ%g7<HlciK@=%aB#L!e39Oj`5a@Y&pAnL)`oeE6Hs.0Hi.4Eqp_V\uXUlPugU.<AJjbe"5C[15Y&sVp>3^%n]GZfD0rS@hVT9uINMj18S8nPZ`19PUPfWuZgGFRUU+%*?C=IsGOOuR``2TckX&MCEr2J-1:>CDH3^Gu3bt(K]3]4+[@1m?ZI*<c%53S(g?"_[rR_G:sC=K5F2>`F)hVlHF-QcU<+(%M0RLj\#\mSp!?.S3Qc3(iXQ+GYFZDeT,j,q:fZLQT-[b^<RVm?E"5Ze>n.sI8[%7mWtIj#+(JW6]*fq%cNM/s$!(;c/udTa=m\$hcS):"5(l49d@f-<c<G@!P`eSeQ"HD_`W=#&Qp:kg@.mp!U\6/uA-7X4MVQpK$8T%]W5R&MA]ZO;gGFN>\V=,AEILg%9/1+jQ[oVPAXKAJPWN`!#SAdb6=hK<7PPJe;2^bqd8@8d/+%u`)$oq>7N5;U1YMYV]l>MU\hLK%;+O#:ZD>S[4CBqf.Tomq^d/'/lFaTM-EKBu-?f#>`#KR39i&]X\1jG%1iWuO,OikC'%LWVOme2OD:u!lKu]3Q0:qm'-(2WNb$^E6%%BR$`d\nmAQ5u*6"M<3WpOC0',%X5t(iEO)-!#+.=1Mc12n1j=hSV&*l,^K<df*:)f)A:R7W(`u!o[W97Ai[=9XVYB$=PM$XT;HX%E`=Vm)d0ddpLZA-R^KFYRGssU\n>_SH[@6(LU?YB/7IHg,deMRZT:IHPn#(7>EjsD.]liBDVh!3-DGZ!%.7juA(MElX'@0J#nW6#%0/>aXFpjM7`dHDh[*!dqg+?SFg4T)g*Gju++]lI:VDNoQJ2fmf.8u#%g;Sjdp+d1u)[=M?+!hXN7"bdO.F.ah?+Upc_laMN^DbS?%o`.9p:%Td2F,_NqSA]^h$<tB.#^0T8SLkXPdJYrpdZu7d+5/ZbmKYYLb<\p"lrmtAUJ;8_1,29!/M4MO\L:U7&a7@+dR%bgp"aIc%25K[jFIQDu3KX]17,@,39Z6X)M9'#$/YHo2V1tSH+3oVLTT[>oV/XCGeBt,DWb5NIbTpmgB"iDABt7t(N1fSS=f"LqqkE'/1c\GH%?kGdrfF+CdWP:o78k$(K//doC3g]?MXMk>OpI7.4f1>0q`#/#GeCM,E]gKknAQ!/M%H&:K/0k2f8gCeIi*s2OT7\[u*,\f]Ar3HW%DmP[/?=Ok,*-<ei^S,a.#6TN;>quU;;3Y".%u7B0Hi-ejTZ5%%85m?$'aW;WAnf*kE/7BbQ<B'^j"3q[aYlt-2S=d0!Z-o$*!!c>%`BI:&=V?D-(ms8:QcO@o7c=*tDQ1$/Zj<q<JsKsi&Ks'+d([)Q-"(fqi(gB1'I#ekl3LB*,L"ddXYC%IJ/YsV/@^4$;hWjZYq[\l%!NN5oUb3L:,!ub/.Kbbt'3e;d_MrgM.&mkWW.[mR&@4#'23THu!FVuY-sETXNYl$-_ACR1EVOhGeFMl4(EhF2)<TV?#abiNc')O&%W,3=!.MU6ZE`l\&+k^@N0\_&8lfCYeEt69q\9qRiYi:$X`"aj02HZ@O#'7PJWj`C<0*5e0:t&J:]]?f9%#\X:8'iFMl-f7!*K?,`%7^`/c,.$g&i(,F:WO[BGA.W4AKaJ5.*)qgN+=$(aRj`p/!OL#.H7Fha8IY9WV.lrmcq/9<.FEaI<6#fdj5LQ,#VNtND1]g9\;4bf%V?4++i\\>,>_mn`XXk-RhMdEpoK=)q6Kk<bShZ$Z,@\I)(1Y&!S&n,8_.(,M0II9mWrZH]hmX&;MQB)\DR;9Zg4e5^[5'LL6+fZ/%N6I^'XV*<D+]aS&7PW_+Bj$*'<!N+_3R9H'Nu6S*"f!upTJCG7O*Xd-BehW37AL,FbL[$Ha0gWBC<7_t0qe4saa4Ha*].-S0"b^B%VcFL;b&__(9A6ta="?c@,Kl5H>Vm,;6S'_*Gj/WY'DXhUe#F0+a9n]uhB;;'dnldh%9PAk9.+ne#``.D]uB[3WDs=Gl&o>W]SUP,%:^Z&;).Vpkp)I<W6pS`PB$8=&KHL$V/?]'TW`XF'L#FHhGFt(i_3eC?m7#SL*aS<bMV>AkOaEM;S_sNe^_mi;)&m>':(go1MXi]r%W#R-f7tsmk5=TE,"YA.=G,^K:Hnk[0QXdVX==[\BH)q?HZ)PV+<C*YM%#0tU#0H>N:5=?"(tNbpJ.q&\9ATN-:b5%L:Ef^#ik]&S%e?#c^/O?MLMUo^^>m#icIUeOS5\nLC"C2YsM-!^V)I!uJR'm=C=<ShS^h''a@pE]k#cJVrlGB\_+iC%W$gSAKS/aP3+_jD_I$%&K%J<h/`[?^)Vo#`2tQbq1=A3MDC"+eTEBPE=g'c9*lI&pfj@a:s1@:h)Q2LB>?a[*+dZr\Qe6`jaRZ@*X:/MJp"'oRZ[8s#0,M0u_l%%Bc.:^#1<U1T_,hSR`g@-,\qB?GuD*X(04'm:pooed?LZ_3'lAMXfJHFTEfL;iX/G.?YaDbumuD(*em>_CB(D-`%>OB2rocUrFko%%sbgQQ'Pqg]D2LHK*DX369B>f:9D2qbEMh"_cfdiW!U'A%<ICdmgHsPP'rJI%83CdW%*H6nY<l<VB.Jar+IicNtcO?-%@6aO)dpZ%Hr"M)7[5Tl!R3tD9Wa1*-p?C"Yc7h,:sUo^R&7nHYWqZ6WP,-8n4lqj6HfnuL%6+JaoF%+Y(:-FED`i2"3F13V8e%LaQL>hfj`q[%QsE9VVf+QHfT!%rR0SA=0i1p7\/G@DP)`,iM]LKt9,13L;kKR`=`su#'eNPAg84aO3X4uS&X,lTU->2s\"M&^1cZ2D:RR@RnX)u[%!*DS]E>RuTf@U9RU32#3!hk#F/:V/iI#Lo9^d(i_\p1E]`F2FWYe"$X#.Rl=g"j@S+BTf(U<j02*Z3hH9o3$T@"FiIqFguqM^hTm%D\gZ)R7CY%rc,(Tr'`WlarHd6c?l\9`MaG:ho@_^GA[W>Ji82o*djeq,B=L$#uTMO-rgV&[:6eDk,a,oNT"U2E)dJmV_Z%Co0[[E%\Z=8<,sKhWI/D@!2-uJ\l.aB)WB`b3.tEn+p<YGAgfU'5N3ih9#O87'$62(j6SB9aHlWA@V/F:7R;\%/BLg$6!>*oio1&=h6FbX$%aibQnQfqMpe<,po\<$/.\kJ43QUE"5#pN8,`h@)(4hR#RNY6e_jZm+.b<h]hXNQT."q>]1WA\4V+Dhk]C^dOPC"qQQ=>k<o'!@-F%#:.*F5&E0MQo&Z$jFFsd.KWK8OOg#!Cso#uFkFmfCZfH<BHB8V+&&m+9_Z!L3IQ5>R]MsaT<Bg:nFqQLZEtS\HRgR8=(^j@e#m]O%Xr<Jn0+G<6aE)O69.&DQ"Lh3V,5%cb/@?1;Ihm0m&8`W`H618\H%NK-9Ht#>bHs[C2t^0]9(=Cr2AR53U,9Y(S!6W.)n?GKJ?o>K%5R`"N29Bg"n8WuOV3f\LO%bB7jY9k?G'.t*'f?gsRjJgXQDQT3$M%c[AA#3ALfut>@R9^RaZ=J(GStWuQ0LYtlE-UK_5'S`jfnJ?%<#Ib_Q"=U,)N.TKjFY,#,M/7'^9ZO.Hl8:*$Mb?h]Lmts/N-FIb19F:&\05VD#m*6A8cA<OXk_1MQJUI!Jk^UNN"j62X+<(3ZJ5>%Ye8d-,6C8)#E50rIAV"W"YrXq<:ZU-L0<XsRUojA71]/P9!n-2OC\H(=XF1_(L.WJ1dHdG;S?L!8#BjN(6&b'&Sd&fB$SQ=DC&Qb%,9Wc35!m<mZtLgL)6M]^EOj$?n+Oi!4cO1F9,LJ+*QpH1TT"k-F`^Cd!:*),g)HW+jI-Xf"W/nS]d:4H>g&Mb,.7J>Bn<ZM/K=SP%E#jl<%@EZnAGIKjT9CTSN`mUX]ioq8)ND[,a?aGO.0iHI\7FW>W"U?Z/CX+b=I'*&@Z'jYep8^A\n(B^=.f?1d#$Sa>IbBCo%;<b%D!Xm5FjTa18+;e1I0@Sp&&lOO;[!l2&/kC\os,aHhD0.n81%f#Upa+LFbkm<^6*,K`I(FYTdn&s"Vm?.b9^U66jtM$&4p$I(aKW7%``9gE:l(&AF2QQQIAiN;lX4]f5b_V6G:OEuf/.M@YCK7u;I+;Sm=Pu)!fF[BHq2(_hr)kq<S-V'`1QJan(hdBHI5L^g7"-!(7tME%lHV\95JO[Kf`(X$8&%_FMc48lD!aHUlL"NCG]3Lj3ZHnGD,"[+NrEl@5AlF(G.+$e`Wo;K-X-*"rr13^;)p[>N,J!@(Scm]MOkch%[4KbshU)RPT9"2^Q1#L5W$o!Fnk1LsI#tJgbq,0G%oiQ-ro)_bEQjii`DLU<0$6DGn4\!"hJ_:;p\5W5]bejHMdbR?BB/f8FEM6/%2*Hi[c10ZAJTR]Ym.jLI>E/s;dH5QKGY'>r@7BYOcPB;H%i43Y;%+Nd4rQ*JGM<//2kDV0RDi]LC5logfA/S&4Ir\HC[DY=rSNp+%@MZ64`maHoZ6,u]3PuekEJUb'Ml"D$BC50ZVaiOi0U_;aMk-Ed^$4D$Kh7r3K^MMc`@O'XcaKbO\"[hSNU4.?X;0PuO.!uY'7=h1%B6lOAgR>;4CsOc+)m,UJkj7r./2:2mLJqjG:8U80Zc+jJ+8GkWa8a9B]mj![s&dM`C*%BFeYnc&m5:l)=66K_2X>OrrDW]f?FPV-%eP`l+'f@@j8d:c#Ul+D$YHlVSic2qSXef!!'_MFn'ic36'rc@U;kMhEDts?.d+ant$'n/:[U"u61dgX2!Yq)H(J"885l79mlGZWt%5BIbQ,L_;D_*M;Q(s('1A+J7fWgMNa9mS+fJFMs6UATpRd@M&c(,UMX$g;htP==5GBDNQ8q^AMn"X70LD,<u%H$'LJ?No7O$(Z5n%,(L2W#*=1TPS7#o.Z_c>&$$@%nR_.(<Mq$8G&f/-G@D6cSb_@(0)9^_r&_eZDo=s!A6#C<\:Q;4NX\Wm,GX4(b$5t;0>:$MHBct%%ekURSoX'GSCeJ9Xf%YtI5Wo8H?Wq4*1K*B!cC`u%7s$(aGFnQ@j?q@TV!YmT42aOcPOk&G'n>`\*+"TYI`/:qFNVs1A-r([<NKfm%s/#\C^4Al+Fci#OS-KJV&S.KomknESnk\.L/,2>Y@U<(m*Uf"`gU6.%Y<`MTRM,6a%!;@WBm<L2m%eg65=sV?h#^,65H\".072BS%k%>7?J@YjN+kC@$$i(<mE2il6s0pQc?Ih6pfg]:Kd7\=^Hqm9!;PEQ-.dV$A10FTjnetH\s3bcMXm%LHU$2r-8Q010e0=Rq]e&PU%->NY^TS6\7dSs?]]E3u+?-!uR8tY_uo=iLWAhSK!;L4LL=%1.H.@hq<-aD)69$ceE^c#8^P$2Bhg[qr5l^8g8?FF;i[sS'<T,6q:%hRp)^C#kWSpjTIB^$X"BMkBJ*s0fstN%VL_1"kD-Q-.'-D<FA):0kLf=_p<piqJ?Mqn!+*7(BM86UQ!QmtBGB,:ObbF#'@kjMJ3`%g>tDAG4\:+a7J[iqSd:Ng%<?]1B.$nh3jRGRA;=Y[SQdYqpW[dCoa,8p.$R/>oT?aFNc&>>1V0CUW]E2UU(7G;M\X#ENQ"ZVa_J:%aXl]"`r=iGiV$_L2pr6:cuA_oUG4e*K;1o8/U4\Z$)=h6cDT9d:\X9pD,Ds3UuThXNQ-7ui9)r,3tX-@n%B@gs8HGKE+4/WQ0Sji%<I_k/B>*s[+,,XN4o4K^$(Dsi)o#b-i.'mj^Yo#qIFN.4>:Js7Hu")?[i!ZYkbP638luX4AUBkDcs[A*$Mj.k:Kfq`YPqg.62#%0%_*<0.$_C/":XB^)OFq/_G^A`cs1&I7X60,Oj7#BVHg9V`s%Xqse-,c%^[3,Y=1A4us2LimIf1Y`b7I$]Zb!o$puL[]n!q%qXRKAh%YE-.'g()<fVYtY;>sE,^?$s/qfK&XnDk@O6VrMrccaWq8VnllrcZ^1$RG^nPCGF[+U"&iFXr`8"e*n^+bF/I)#ka,HM>M>cq=8Bj%%@<i>n[lod5'R!<';#5Nju\(WoDOHJV6B&uU-O8R_+8(?<^p\L7@2*qJ^\4d:'#[??Q7=`[SPYm_6NTXG,(fd.F'#=a0i<a-^L,<%T8ij"ApcaieJm.ucF$1'bE+O[.,j_%?iG!)a48l:I'N;?ha)(k]Z\KBgJ@fer+'bjC!#7lT<,]:Zp0VcUX)\YFX_;bR;Hk*+i2?g%(F;pCp87G,k6<a!D97]2_==;rrm'J33[d(ZmTd$Vrt*$<o'`pb,S<H=Rp(%,labIAcS#3HM(IL#cPN>]:WH]:^\o26nJhH*lOtP4%DZPpA8o/',I"e<V+/QE3PNZ#,`_u&I@lBm<Y-iJNrRkX&A!Oc+aEBd3RA?Yj$Kt#m'E=RKB^J\9lU_B%1X\$-f04m$g=%4iM2nE2%LZ<:jQ-EOdXnfj,^Mdi'1Wu81:B5Q0iTImD[Bs0W7?E$6i=LJUoRJnc?btFi3O_`.qnkb.4WP#td/J'$P<&`X.SI[os(&dVpLH12%:9HnWG/fI)s5rR%qmTeUqDW@=1KlOOs"'uNq7!HhgWOkJ][je+1rJP3bL$a5f"T\8qH!OCq_i]fU1`G7:XAa?%*Y,AQjK2.NRfMc%HW>$21()*LAJSmg_HiYu+4rBMItMNdPFkl^i]<^(ljhY(F`+UX55T#+NsE)0Q/q3/m/K+IYClB=N!O#3HaIk8"K*dtm4G3Qiq[]9%cf>Z+53(>&'iXkfO'e7:P9"AYH=`)j58[2q\";eB`d<X6I.rVQh;@@Gr_IjH^8U,BZZUB_l#IqnNh*rlZpaql?ne[E?S>[WB0CBD%m?>W+MCna<<S4<j,sb6daY:H[&7hajg4_g^d_GCbGU9*_hf*-f2o9G(N<A%bBCr=JFEDGNn`GLRF$dWZ=WCNZB7r+`JWm3,p3Eo<%$&0iY:AA&*7osVhkZ>5E)"rqbke&/@n75[Tr6IQXs2iID+#:a7^#kfIE!LdAX:qHF@B.(7Q,^T"be?#BbdR6^gQU%`m733CG4_UP%hQ'nOgS*BSTC#?co4<s-HWs"N3N(c+:^prm'3[,Go95YP?i6pD$r0['ZVlekd-iKs4lht%r<9AW.;28j.(coN5M-kR/q<FurUfNQ%?gbC=k0g4"`Gn&RQpt8fMtO/0GIaIBKtKo)/,CbnrP"],(Rd1OR?b*X]U>V2_(=92ir;#R^8h3!K?>.RjZe'$31M"rs13Ea[C,V@%lO^;W&C_,b(pTV!-_6F8FD(RD"4N4U2Mu?pjt_Y+[,he%DO%]sM,0SPNuu]G$OY(,3p=!L7R+$AGj"[^FaboGp`@c7\sTJmnX$r.%6)X=d457@pm*/o0PZuK"3oaW0');!HKerG;?fKp\2sd=<hoGt:Hg?/[ik@J@lG$I@[aLVlr-<A'/)G'FeoC:'F]3]ua82ju/]iXR%7Frj&k4QpPJ$A5*KUTC%FCWE@CH;ckJq5dd;u#!PoO=d'4Ob+VU'"<V=8=YAe#t"?VLP-AW@qR`s%[s/r!u?H_`=,#mS.&s?/`2J%dD&&YDtsaJX*5'j455,362LQk4aVMq:3KC&\:K-l)C"XN+nB-n&8nHc@V*pR^Z^FK7[NrVjl;!8D#;VTQ];.;\'j0EQ\$IeS66o:%l"JktrkmWjj(F#40Qgr>oU?Z`$DI\jhtQ$F#PJ\?IrEZ\e.-c:2gO+/\+_@hd=3#6&>MjO7cC2)1?#s9@'[PTFQBZHK'=Z0jbu'm%1/c(1"Kjs84J,=aPGeF9"J*;._QC2-r!Cc[6H2GMcLYa/dV@RgnIKk*^0HTQX0L'c=Zp\(c^WJVB(c'`J\Ku'1]QZ5C&d^TTh96@%5C'ihro["7cG(etkATcgr=:WN3\A)jFN!>\oLkU[gR"E<eS$P<f8I;)\6o7KK+7ep:^U5):^R<g"NlbX_bMn.l2MgC_8GMe(Pf?*%8XjWDoY4'ds"uQMO@Z<02bH4sjT"'^')ED5_]<f3jjc@dWg74<Aee%[!KU[F3sprl<Gh`T)sA-Dr-_3Y+7:\/80mbYmG3C8PK4=P%;`mVMfJ?9Gf=b4l/<\"lijnB%>?<BCgp+EUmYuFfmJc9<gj=-8'']8?g$eC=^WmY%1%k8GRYu+HVu"nApEiI=c@5_6HSJ6N"T0^J%%tqGf0ph2D-[]6E3W2RL$9.[&p1L-*^Ps%nV^'MVmp3>eUOb(]DJuju@lbD\h9V6`$n5FX5@@nkaCF,F[dO6_f]e^9V)j&8K6'.)%Wk1O6&MLt@#7g8>,>S/E-1H`gO[Or\a\NFrhgMlH6YuaoP$:C=iX4g/3S3sPLV'[Y\MdcQ:S%=G,5uKS"T=U%DYj7"gREE\\#)fJ%]KA7Phqaj:p?/jWltQe&E$=/jD:'l?g%_aZnIkUEV']!IGID,44XgJ'If)h<[@j&9r9N$[pZ=\'+4')9PIRm)kk">i+j(FG^7lSf%!)cKp1@P/6%iq32gO!.A=8`F0V]E\\e&<=KL>tcP/UcUNp2P##DcN"MrpB&JSkZ[hdPmD<8^m\eHgd$^rJBZZHi.PiHBNu3lqIDB%2Ys95-f4-TT"ju!9\l2FVr@XCl]l"aDB3&PO6Q4*B3m)L::_EPq7^Osni(=+^L<JS+92$n5)iq@2ONrL:]BUafJJnp3r*H=d0d2(%l/Tb=g%H)b,p#:o_f&kb7.t1uS+#XBN]s#6b44-PU#\G2;nm0fETHMlIF<_N[nCL:?&.IOo\U>(RFg>]W[X"pb3p_Bb3sh<,G/Q'%KDi^@A9sLT"0_[IDbm7^h1XVK@_C5tJc9IIRQoJc\$o?"E0B=I'^j'B/%</5h4%.%e(O?WM"EX$lW`,%nY>KBm=h]/V[_anVW_]s%3ems8c10YS_snDgjr>?^kec]R\D28G_0Bb=GY/']a7ErW2U)d+(VN`,SS_[*'fP"$_=kI%!cZ<V"YQ<,I-&rCb2HfZFFQD[9P<XP%h6nW`h6,OJ.-BRJE++H&'0*QfAZqWkI@[<u'j5B`d#>uN`M<D%Chkk9?!fL9A<ToGOGD@TrJMA\:&AG>'7boZ4kjaZ\bg70T?R!`%oIGf:[iHA?VJY^!egBU2LX'#WT$ErL1D5.JHVZV!eu,k3hk"_&+7:IUr/e#?AP8#5K#gr,-L5e/MRn_AgWeqiI*e1IDsnb8N+:>C%UfiW/G]/$bDKk+$pNH2;[mkFC+NJZaa_ZhTI-_OoA^d&eUW:rP"73`"kL8)bW>]oQLLf/9+3\taet,YbMmeX9j.5_sA2k!g:\HXu%C!ghePEhZE<H3J0iQ9C=6/,Cc')oA2fdH/hc\I.Tdmhg_`Sm2[b%PkmI(Fs$H8..%oOLJL/op=)'kZK84=i/bpL(Zj8nM^3$dH+l%o6#.lY2)(lY/i9j[O812`PNUB1Z$l=Zsq^oXSUVO^Q66hP#(p#=-T3@mu\t`S5=]G\[_p?*E@,mqr#OFpCHE8eHL1Kg*<M\0O)S^%H@34]3Dp,&1$!15p<m6]]V/Pb`tXp-pCGqC.n,Z.HH7GFlaq!Y[3K%]5?K"U4af0@fPfm<f'#>2++/M2hLEh1SnCQ;W+C$(gOHlL%1[XV#?C=hF9Xja3X1Q>u7$:5eIt)X9K):J(dhuaA1%cR;h#3e7.IY&#I$]i<I'L#l,og'b=Zo9]VpD_tSE?#_F0J)sZ*SZ67NH<9%R(9:$qdS6O*ZWCa>qf5ICY.%QB?MP4PtR][<O8u1qB5G7R3G]HgtlmdB^7bI_d!T4lXbKdiPiN'K@!T`c-^*8Yo-PAXk1P>`C3L?%U>`#23r=?HGL@G6eV2H13eGmGa8$e"XB05Jc_qOb1fft=AcGW>,j*iWp;TTqHn*57ifQFAN\-WSPU"A2kE!%f]Ak,(58BG=rNkaU%aeKB-(=n\?=X$78Q,"9g^']na3L-s%e0?m#Y:_ok>2Ps7S&d>E:'D`K#9t5ei`i0bl<o+Uh;PbPh/KJlerO(7>"5V3M3hVbe9j%.%R=a%qjdmRMa8+e(BCbp3LE2_Lm*1Spn84R^qeF(8@Wh_)=kX`8*'Xp:mYJ:n4P>.+r2kTEc/B.R][3A3,0f-p3ls>JJmXU(WO?>#%$VLXH'l=H_\n?6Kf(+R)I64lYPM,pI4.(pG[%_bkn+$B3`Fas"b]/or,NmI!2EtXl@h2agR@HMi.(i*^FBmMP0p94S3^&#9Q,Rsf%ZY/lIX%uRE>()".8ZPW`3c4Pq4o0DAZ+dVeZoF=+#IDJJHUl1U.Q0M=K\`4Q>64>=>jN37FH+N!@tPh;7i'dI4rKQBmu`=fNS,@:%o:sn_Q"poE]q]l?GiCVVT57.iI_J!q3o6=NVFQRX'q-c=bnsfH9Ac$?o!44N/t:^W4Pm66jG4kd9,&:kqb]@-g>:j;2]Xi*>>E?t%)dU#)"#>Ga/1N-FP\>@qIO0;nX.:&IWYgoIT>Idp!ouaJe@Q031i)[0-FMjU9KlqAibF112SH!kkq_q,lh;HjJEuaJ-*HS?L!j@&%2b;Q*Tt69]WNO.@)ZGN^E?9kJ3.=+gU*:gW-gZR%?JUZNfqn#UXXk7bS$"UtF4=[bQgLu-@rsoXhsc$0D3)@'!rh8:-Qs4o5MJA8%08t6J>SsHmX;,rcq33A#*F4gLalC?^fj=\ps3[tB&5IEF0tgfBkj?&r47gF;q`fNm)@Vq>VGhLn4ud7j\%Y"dC4p'\4XMc:%e<K#%NO0QcZa_0D9BBa-H#'uM:CRoVZt!ar^'!qi[7&me-QA,laIT+=IeBH$n82h"QmL99^<B'RW]WG5U;!`l[dB,gdpEVW/cJ(b/RGAt%VW.""Ck'kSM5-'fa/OF%WfQ1=Eg_rh^XB`(H;q4u[ok(0SbG0b]9P7#*LkuemuMo1a-'T:<K:_HS`pg]!Y`%L/\Q\3+*9F#E=9n_%(Xd:I`4q*68S-?W46fVmmefN.SY*RNq2;UAn$`+HV,+OQo+ao#@N1>3BmI"7O"^AsX"o$qDI`i`J!/5KYLDB(GBW\041<bo$hQJ!%pA2jAOe.BL'^ZlCbFW9ZiHS*3a-D%76R_CD6@QU/DS<a)+eB4iPTsaMB1.bD(p[[?NZPh!`C;-=hlYK.1#b$:0l`YqW*%2;/s`dZ%&PLeB/00"?ktKA7Mf>tOGd8@Jd`mB5orYo?,Dt2H0%Hqn6I1SJ@(_iYT)7.,(j4C=n=b^bn:t=1q!HR"U8J^:_I%SmEU-XGY"_Jj%86jJj'WsSL5/-pc7rIYK#G:LX+#Q"7q'H$%?`iq2r3"iRmXqp>DsUP4kADgGm,h*mNS3Znn_U0*?iBQZlHcrS\8p]JT)[d?a8W.9%g=ohef2%sJ[W1n'5PXuV<.!Tr`jma[H2c)*k<Jt2d7&9Lr9^T\i/:6po8atGY$QJ1I/<3lg\3oP?[M.RrQ'H4c@:)RI!YY&K8745%^@:c]S#=S.f$Bl#nC,t_V_;R>*h5E@F5HVE#iDfJS'C3h++8BQ7Vd:\a?M^FpVB/MjNi"WalE8"oj9q5p+c;QrSfs;gA^ES_4X?R%^Nk6;mpUCJq=^@XBA.@rgl8qNA[DE\T@@`&p#5_-5!Aj^1!f!k_7'>"s8)<@O4ul`h.aY&p)6!+3M4PKcbGtJE;A?rGHlC3QJ9QI%[^AZ6TDJR%h`T`-YdDh#Sm8t>ZI1N*jl5N)Ps1Z8Gk(^`D(XRY[F.-<cb9;=_9V2K9':-m=C,95l-5:'W:msj<D'Z<[Df[pc<m0u%]tLMqg#:8DcG"ejK@<%<X45sE++LMhddldLlH>5-?HGk:>($2hGN7Z40:)>(XW%M3cJ76iI=Gt-T>&"RfrJ*H$Wm5^B:Hm-<<N0\%lp$^#1TL*&@!Fnalg+IB=M377<pU@Zo[5hglta$'hKuFbX2W!AdiGTuh+`s5G:WW#p;9smm]WS]dSJiFXX=opV5MTaec*)PnBT0K%X,E#\]XPQ%%o/adbqGW[0<b"Soj_3aY2;NPkO3ikX^=q>G^AekX4'k2='D-kiVWqIGE\W,[A:,i%WDAN*o:4(WOq]r(KX[;>/#D3%eD]F&Q%&U/]97+!5CBuJYA\jccA1k+:7m!G[*habW4uLn]Jn_R42(Vm._YhRB/eO%Q4ECgkN;5]Ee+JjrB[8=J(b@H^45(p8umSn%V44s^r1K=(]6:X7do0nZYeL*BXL?U0n#j7Hh(PeiQ/6iQYho;$;D50Em`tH:XL+ObDRH+?s*AWm7A\n6G7QT]4^;=XkP:1.2f="j%H<I*3]KEj7I;<D$+5AIjrk,8ZC[N_IA$`hrc*b#&DZ05,AZk[TR=8MXqXMK!b"BE048nDO<Md1\f4uI8>up3h1MsPOc[Ymb4kj("%^u&FBpuBLhIsLA=k1(33rhjj&N.4%;Q-pT:p%?UsgWqLC\T;1nV*FtSbtfi?h4K.Dp;sU4:S"1oDnDXFDdHX3^c0""DgeteimtD-%B<s[8Del21noMK=F1ur"HHqeI3oe8!/O&PoV+\/4I)AgX(C$/]rUB0W5@4BPPIAmMB>$p`?eYPRJl_`LGs>?`b%.OGbiA0LP+t.O%qQ7N_'bL,qofM&\8sQOgcdY$ln*K/&n$SEu/Gd82rVA25>Udq@g$9H#U@>juo.$$rG:m`[hA(ano,lP-^8FRV%P'-W]_16m2fH-i%IWdbQg=F-mWU/p+Vpa1X07C+^)rP)s5J6th.fK.cc->\G[M/P]dsXDYgFLdeNV(h=Z$SOD[.d+0(W5,@h`[NKm2dhY[5ccURZG=-%eZZ<&1#1WG^NQGbna/J`rI_`6jnHSsi4BNUjsPGo^CCGFG9=HAq]?WtIcZjmh%dE0om++5lOA(8o[ic9?a%)RP?[c_rVD_)YjlP'%,<#Juq[;i.=)X^;p$929prVp0X*tNGbL=5/a'X2Vb@rms4C.4?6V2FLIJ)^d&*;FB2ClNAb^K.pmGhcmnq__/l+VVE\[(Md47;G*%qSoOBn%%oDY'sLGlS%[]Dn^Q?,<#>q5F)-)QcBnCrS"b'^V$)?qXkNr;u'?*J*jACT4WQNrQiB=YK(:(o5f)%`NP?Zp/g/Mn]&]`%Hh>+'rl&*6Xn[4Jn*`B^[TEC<Fj>L6bNJ=Hs#'_ap[I_YMsj]+=>mp<qRpsBh;M_IpHCWbZhs'Re*AqWq+,u%9>55IF8COKZX;^q%m>,V\]mi7pJXtVCGlI"-r/QRrH(PffmZUV]g=H#L[:N-0I9_5+]m&_srN*O.p!mEaqW-YqrG1ScJmK3oY@fdYBrSR+qrI:6&+<c6%=oNg3HkS^ApdXl#rN2&$5(!1h8&)dE]@f+-r,lW+$B;OL]BlG&PPBD"m.kE5c5b\#Hh5f?J,RD\+)GbS07%j4mW@pojOpa('):VB%g8Qm]:H,c:V)80omGcUZ[<Jnuk"jUmlh.\*qp/I9psqL4D?&qX1\*2F:Ul=V36-NWqs'AG>)#]5q9SE@&+BPPrqX[)r;"6XHJt*9%R(r7/#=%,@l.l$*]>m-bo&Q"XS#9JI(HtV6HGT"ICd5S)rigD)Oo95BrS^Da`BWkhjn&0;V^EQM[VoFA_qI2]T&PMekI@Ghe'5AA%7Q[4Vrq+8(M>be]=SgL_,tHICX]W>5e_b*@]_Cis^KGGdoOfM`+8pH(G^j^>MEErhC\6eYkmH:0V:j;JW@q4a;Jm&<03ijG?CUc4%c+EnOZCQC;]m%qPlg;.Up;Zod[i[`->Jn>dr+gJY]X3Ab+0J6gmbBn3bB=qs\UL54f=kTU\a7%V-XDm"TAQE/I_T/WT>.G?MZ6,P%\Fs.8(RMDo1$.)<0t&]ClS#t8s5<gAQY5DM?P[jg<'P2iQ$mfC]*G6V-%Gf?HgY7oh;=`0q>BQ^IuXmg4*S4-%"n%lZ>?g^2a:Op%R]Q,Ig3:$=Ck-;b]0ZJ)o4=g!3rJtIC12H5B@kIhIsNgM@/KPk!hc+_-57Q/s8Lr_:G0p'5%Z6_m;RIAmSX'n&k3%TXMrM/h.P\?%.h^U!i,5oBnMB%.kICleQ`kjT\+>;rRY.s6TE"`em="5b*(?%`'BD4hC'7^5iO_105Us,p,Tr``&j$eZVGTo-Q9P7[T)J8-c$YAL%/-_u,J)BL3eC72'%ps-3F,us`qmFVV5(%;c9DN<#1Hhf*CnP.Q`VRo]e[PqMP48HPk<AD%HhmB3$U<ln<8PC`rMs:4>e]%jO7AMd%+$L>nI<7-U_KB+t^&QM.]6#/[I/`u?8gXEXr*Z\?plB4Kj,5^GQX;?I]=d.G/)/8*XLG>>QX'>K4mGq<G*+u$Hh?D12nj:XQQI:+%I!kA(m9Ou;ioATU-lgr"Y#b#Yg7?hKM^SMtfQ]4c5A4l8fQAu1hg)jJO)'5O3"`#i.APL!KS3t($fU@;*K0d)F%817eHb"3"jQ"P%J,@C"Mi2W]=2)GWlN\Cms4T&a.DZ5'Mr:43gZ<Y*S\+mTS`Q@4:Yp?im+&"\]URYS#Krl`iS%$3%j'N<E<d(El/MRJX(^Uca.f<<%6ao7-q5Sf#j\JRHV`1bDi*NBtjR$a$m*,bW*X_VocX/XEl0V^Km9K\WMdO!^)S$LGk6t_&hn?L(HhG4Y%&b:bH;8pN(u;fbcJaP6%X0m<O`BKuF>l*NLqmmF;\QdC/rUP*Do^+$uP/9F9??kk$cg!doSbeO1S/4Yj*;7?9r)dF9)O>[1hR!O>+'s60AZ;a*br'OA`;8=T%Z(K?>L&.)sQZYW5r;8jQd&62L?TquT0:CAK^rJ2i8H(>+0%MjABH#P]G+lgSID>d/V6B/j?+sTo3!>#mHeMQ^nJF.YlC,^Ff&QaW%hMB5Hh`5HsY5S>hltf%s/Pg6%`Cj,GLqL/K?F?Pd$XZ-urhjDqjMfqDXe,=VNabd#=8r+7f!1,d04+TQVfB4b.Cio;GT+aC]2?U&%\%?\SMX:u7Pq.?ga$0:@)sR<Zn$$)/RdZPb2W;h0k3O/hcm5gInLC5RH.AIpNn,r;0<\ZM#)/^?)q9]b[QrBBYQ$-ljO0#`Du<Jm%*<+.(4TA'5F1c'qT)U+Vq<%U8H2a-IkEX'<k4r@nS28>ES*,9XEF.Pn]6<iHNH+rig\cQ>33RMrg-#C.N:Y<i*V4Y:cL!N4L%9gt%*+BDmqXB*(_m_hC6!h4R#ipU[[7Or>qWC4JXo8BFs-F+K1cLl^EOTuZ0@t\W*rY[B`89=.Ukn-e(OtG:oq."8&!c6_J*o,SX!?=U%pSoD.lRQm[qu4DbLD\)?f=o#j;RJ)*3Sa3ZhteuD7K5l,GjWCmhJ-)urdu<\X(K,<0(q/gCimX&]f]_1SU9rubiS[5H2iK0q=4F8%1am>Ac"fuIqQ8A&(PdkFg4qoLe0]BG\u=1u?.g]>Z>>B.F8nS0L;S6(W^V<q^TVR#Y=oED"Y.8NIe6=:,s&j?\'3XbJ+Ck5gWpp(%qYqH2fd>R>St@h6GH]'Y8&)e.na/gW3:<Qfm_&QB^2rqk\`P;ho5^,-j_mB=]CjS;mdlc0hEJJVBDpc;)gC=`?dm\Dh4B*IOg<.p%U_giZT/SZUqam]Q0=htpAYnh8,j-\B#MbZ$lI0n4:u2M60=Lm9#ZG*@T[Yq]NGl[hHrUkV[I6>2LO"!o*kQi[CrWs>SM`cW!PdhJ%A&f,H,5eRdCKI_jLUUmWd%*L[)I8h^qXJ6t5;OgSRm047^GBZ>9)W&e]ebG?mX430J:E@ESD1eB2KtdCI1`ouHhB;h_)k,n`SK/&%a.MhFI=M4OAZY6F=&bkUT3bD#il^"O`O\%CqC512pT@Bm<,HmXg7+1"mqK8On(hWcoq0"4ni-FEPp;m"gq7m^6dGXY=r;VV[F\dR%'`\0Wa+rPX\oI36g[,qu^%pFg,fo+b@;?JI3'q9@fDiM@h;b!uin`@mr-j_(qV1pSO7-pm*F'J2\bH#s4.gqk^Us$PYKq]Jlf2pO%61=j0%/R(-p[d!:N]m<q2(ANK5K=6")m?)5/0A.teaqW0]TJ8XWH&Che\8ftlluGP1qiFA`OMQ"^RY4')s_hZ"%cborCJ$SCu;eo%:U'djT=t-o!i&(@00Xi.Y6of)(D5]hnF*:.^<77&q\Oqf0AX]'*<12e:#k)/jhM*c>S[COq;Ck:QYSgU41t:c\U,u/a6j(USE7WH%cRmXf#l]6sQ%]5q4!dSMc-ArOs1Ah*^+s.inE@,EG7Ur\YLdZAJoJ9q!c0l-mI+([#X@/#,lu/@7NsMXJ)1u/'cMAL7[48+g,p,:%5/")I7d7<>rp,iI93$i'V5qNT.1er*;%tiUIo.cqC#^An-"aZ7oAV,f@h0i"eB)uL[[l7C*:_=MA=gR/H0E):pP.S\/!92E=6K)!%EIM[^Ie;DK(OkdXgcH68nsAbaqR\[]p'#rQG3dhf=0B:9Hh!m+\*)&oI/],V`UO>J,uN!+?CNu0[iaB[,@\eV[)3QGC=Gi,^;#-s%(+Bs+dWNu[_`n!t@1Su9qu5D!Q\U,`RqY=g')qZj>$*T">&A?XMs"3]KqJ?&654LnV@)f.(SUHUiZ`J(2(i>JGN'gIGResc6UE`l%].GZ+n<8"ij5M/"Hg?@/O+/^PF8^mlj5+dJJ*"5=@rUMhh[_W%+7u2F,[UF\N-cU'?Wspi\O)%(cIds)?FomSTAPGZe)f!'5?r#e%ao>Y*$^Udg5;7i:q;:GRS@e]kNT$]A=4dQ63WH]DNXi8ldA<AmT;sU4^N==2(Ng-N::+AF[/DM`-GsT9<,m?^&+t2)>Wjm'3k,"V%B\DWGkH\9hhk:n*,`KJ&cJ=uM<EQ/kVKPs">\le(VqIR^/^O<<hY<6XNeXh"RA[(@s1M"<3T"Y:^X=C2Sji7!s$Dnhd>=Hoq9)HP%m`R\IJ$DT%F1?_!8^@+oIM;SXcm7MV`r?s@SGVl$s4<\"cnD*C#,ALc_eUo=-;#>,qh`c!]8nSdQG!"X#FEs7Xn9II//7oS1"_P)%I3mjC7pgZFg:2JqI5.Z<7(ViE'af599ll/Vd5j3l-1-fKY*V6=53R:<C.3XGo,TSnrSdah(?EG!?TiY/rp]'U3F@8^n/e]ErJ*UC%pD9LK&!q2e>^36eG[BAd0$M9Wf3c9:Yop%"\:4<o"H;V>^]&f[;97fJ6^qN^Y3Cp0(LiN7^%:NcB(!ET\L17n')q@cS!We)a/p`H%XNkjV5EB`ui/GbL%@QTbs*jUAIn-Gc/Lm"fA+P6\U&GXSDSP%5@+td)nR26)_qTHdflQ!DrAWUnGj.KIISnkB+dV5Jg:I9*YoQ1,%@^@'0^upjZ[J@600/*"EBC`I,e))2BUE<[F97=UOGi4QAb[q.d-cCsJ$F,7;3<HJ\%jE@_K86j75)d=iMV5ndk;mhI%XlG(^Aa:d%kMKjmor05X"r$"4dDhVsBQGq\V)n$]`U]^DFTMG=%WaI%0u$i_?3_;_oNkb@@Yd"Q(dSq,M"meVj`p(*N\i_NZ00#h$@8_iM72hN%a`TQq%HMbDEZIoVdiY\IcD!BJ/$m_;QrFPi=?PK]<B/^"<-p9@o"`*Tl>o4rNmm&]&&1]:m&\FNe_pNX>cUa]cdh\Vn$`#.jXVd8%\dH5XcA>XQL-l7%0!$ei%OBSiP/j)L*)rp;=b:&#bB*"`mk^8>b&-;l<6;SQ;(c/nq/!a).]+<j/N1]Y9D",&kQF1m,'_oUH]Lg^%[B`p6/MWq(lsL6fCL"O$<_MgBRmV!;HV,#<:St9UWMg<GgW2ibVHd2tR*=6N6W^"BSPu[^D?pQaA>cJbSO$'8*AkCLQqXlAXb+SW%!(j%!8`%XNg,eS15*fDS%W'$PTa2g'OWLeC-34HWU,M"]J`pUXnsUB509s%$VGNap0/T3bc>8>k`=A1Zi.X4?nkjoMjDEKEW'*R\%U?k6VULY/YGK`J]+k.U)N1=ZlEbkiVcRfa"=$eYd-&efCMS>"Q+Yeo:XXe=k!&dl$s,E!d&hlokV%'AZo;G=X;#9-76&lWh;@*tl%o19L=]p0V>Y:iB=$Q)pAY#3RV!)YSH;/n$u:NbWQZonEl*m%p'Zk4:3^QXqZV+gZDD+HCO8AXHj/)mC@_^X0)'OR7iBMYG#MNg#)%*Dt<,WUmT]RoH)ma^26pUd0f5.XGnGOr-KbSNH)K=GNkTADuP!!S]pa11QUiKt_"3,hV&:3?^^?;^OY/bW;tI`U`"%>PUOHD\!Mq%0*!7EQNr,IQeGN'SY6nS&p#DsJH8=s8ZN7k%n&ep`fTN;*qQq*U9k8Q0l0jAWgs28s7^,Zjgqgs2:ui:D`<pNkel-tm!M\cn1%bu%0Ta"BgX^ojPq>%Q.W%du.Y13?Y@('+jg%E-P/rDpQ%^<ETS`/d#)WMG1>AZl.Z#MdP`IA=*Fl=FU_Q<%H!:ND(KiA%Rj?IGV,o7G%42k5Q"@5TF?r<tSb8OGcoA'4B#?b[>&l$5Z[;2e>\kGR]99_jWobb4hZ*'VU_YN*uJL^\`Lc0-s'fj6YeH&X+hKW>^WqGXt>A@;0%dUCrfdCW'6@jqafP$0i+e<m*G9.Yc^0Le%XA#\ND/f*+`<ZO]+9:"cV0oI_;oVjr"l31'9JNkWiOE?Fr-R,c\W;*W7F[]1>"V.4D%A4Xup&0O)HO<i'HPWTVKeptguL=7eK1SW6`._cER))Y/)'n94dJInfg*"aj0*[4gdiC/PBPHkfQMRk1b/_FlTBe`VUDmQ,h6p`.#%euUdZ@OqDr/=<Wr>m3gUALE:leL7`M+,-0<=/h8oD7eMK/8@Pgg42&Xik^IVK$C/*Z*Ju?(>-b<WS))sDcX`a;0eV9"@uTl*-ltX%efAP7Q].pg%e>cU*\2:C0hmpETA+E2m#2K(HM=-KlI;0CWP?g^<R%&PppCYe+PIu':.^l6c#*:;l)mVW<qR=/H,'e1s&BBA$]V['%aRYrs=KG1/W%>&mlCo*^$#(@Dp,)jDD@gC0+D[P#]tKnd[$P2-SB),*gnBEN]3Sn\!(:3b!qEMMLt"Th:nL?]eB,LH_GcaU!e2^8%5\)r!<C&r^aduE3<#&SJC(.KF-d9%IB`J-aN<*Ei;J'"+,:l+qQ_86/0NA-]l$lZ1Y0p!;5jT/<>Xq2XOj-BHf]:\4FAAP2HUa4c%(aT:h6nitkb>^E19@6OY`!X+KSb7\3#h[*A]#--d'QWkTW`r<0$PfEI"O&K@Kn*"c&:l[D$Y3%nnf5kN4;UGY&;*:Nij0H\anPo<%H@ce7+I[&0*)S(]fXMbe$tJ5f<IeUM1$3WMXS?<r6C>kjoX!B/X:D1TP]R%lal<&W+&@](E+I"tJiWK7l*h7uJg:u(3,A#S)K77`%K9b&JR`j/A=qBS*o7TnK/oWZsU/'99/4(l:FT`J\!8Xl:"<->7<b4T<_=gYjZ3liAj8E*hJJI*Vfq',U[a*tC2uiM`:\J1GDRf![%^TFHtmqCnCn!s_PIF'Z6P3`gP#U45;4)uUmGt?tMD$=^51nKZ;^SCOK#fdq:T:YqP`kL9ahira$(CqR7V">%'%i5o=8J\$U^)nu6%9M!qM@N<,JcFus=D_F7nmT>p<<JJI2D&'Cg&4W!UqZc<^7)V)MGX98?U4-n1Q5Dt>`*`WY.E[&-C&q.k'#=+ZI&quDUS?5a,nsC:%2E;@Z'O^tCK.9l%'Co#M9?$,<&>M"[8?.!*86+nLOXpcD.Hq4<*C?/8X)sUL*.^s=?jMU8_MdRaJOgT9#S\O2PJhYY/.+I:mn60j%#X=3NoA]-oL5_KoTWKT$U?mehIeZVUd1jC]H'KY;"p>JcK+Tj@JrkYA\(K>dU5O,*[<F!\"Bu1$]K]kqTSe2l%>ln`\tQ?XO#@YN%rr_h0/""f\%0LA3S9?q"]*[U7W?5,@pn-rBC*qK95^cUQZnrPt7TMBF.TVO"R#G6YSDl!A$UtL@Y%1OoTe_);*\18?^HX4c%I9uX%?mRHl`_nRcWqYfH&ur9=aMXJO6id^L7NmmdKQOr'lMMD8!J:(M!K<,3Q-n28(uI%_/tstO]GTB[LSq%XU_Q**I4Fu_(m2mKI0bF$%,RbSnq(;nlLZLN#)1c@=)me2>5jD*k0j%uiFVS3<I!LbO&hoM`B-rL?QbA':3*X^WXjX)(,n4)*!rupFS&?Mu3^l^M,%=`ub&A84%W9XnD;Rp$::'C)T+>dC']bsp0[`I^ET42=W0pDj:5N\-s/6fCZMGT,NmP1:BbTN\h=sK*2&2A!r3)mpb\.ErP*4?CtM*7BiVhY\H%X7b/$3\]n14S%k\f%=lS*]=`2H;D)laE$A]\4j/9YT.'p>B.^eKCEH2-&^'#&/IOU#C?/8RgF]L)I$8`,B6<<e1FN3+bu..(rYeX%+-/Ib6!HYg-mur$J<qm>Le7mbXL+\>4m$hX\X(n-q6fZ@TSZd\^-J3%Xk4@7^/Q;b8)=(ha:MSiaIu>J[;cB_5E_R>UePo_JAk8$%RX(i[=d\+rE/#?u<@:1I'-u!TLc=UQ=L&4;B^#AO`SWaLigo(G9+g!37eC,iY,>T;/!7N<C$#q,QuAS(bM7@(0d'e3k8JQ+CktK4%J0DEi6Bd\_c$IH3P+;RW+Tt2M"-(8*U0C75?H0.8C@nW9TJ.#>P!#A$^c6%TOccf&rJ1Kdl?P134KL&$S\8,Nh7<[-J5aL=8A']>%'r!0CA<NCd3SI//D@Yh:irl1PeEe^,?Au]o:5_O,Z5A#G^1)cL2`j\Wq^n=0K-1P`mE3.0XH!%KDI5,3_fQX\.kAGS$+4mP$BT#h%DI5+dhm.*I1>1kX>KMC\+Y:mPE`Nt\/sk3lTrgtbSnr!N7tjYO""S[e#t6-K!t2qfnRieq>nro\Sd`"0K$NXldfkp@Ht:*V#$0)O%bloe??R5nPP>9[^9CF.!DIF+hPHnCp`1lD<aD7S/=fQ@J_.2Yd"@KC)5!3@l\$-"_/O_qqBJVrYYf+]2OGXlWamutgVoc_8:$q!B%-A**,5b-(-$Pi3h"j<mA"WQJ6S!&OuU\mMZ%4nc\"U0dH45@!3+;%Ln9sZTi>dMLJ)BeQh2+CT69*dq6[O;h]7*%9D?kPlh4,)9@%T<m&Z&Xi*_OdmQT-Y5L+^SMAU281?C9\E$h%gnToU9Q3<3>Z3cAXl')THIdSd"3si,c"DO[pj+Q@oP%:`Qp8hR0bEA-;taY$GpYI%McELZiiOs8a!adQ7RCX5eKWZo5b`ClBQ.Z2HBEO=\'5=A8Q.T'L:F`oPE_4H!TIA6/>YrYh'c0';o=`CHpEm5@1j?%fZ7QRCeR7k%P1&T.1LX*q<\h<ohCW8O,elo8Q)&0D_.afP>'\f(Pr7q$23u.-n?2r#*5&taY(BK]G?/8JahXoN>m4LSe)S[XRpS+@rhjcCXc1ob%<,J:926W,mo:HT#%N;6R>@L65aLV`5.WGr7dd309qTbt7AZ?HD$9:Fe%:hO3>KNhr)*pH\8m;-5?'Gc:;W./AB;=-N,.6Tb/bO+'%WFBrFpL<tMY\NX=R&2f1QmHVk6j%P$a.!*(P6ig>^;>i8;`br!iFd`n"4K4pJn1m'M:'#c(rEZH&TJqj9&])HUDR:1>qC&[#Rn$=%m,ZJp.@NMA;'(TAbBuY<s"(9=5qrn)SrC=Bc979S#ttV**pJ?B#IYpZ%<XHiR7p8$[,)#sl+i?O=4(]^2ORK#q7(IhV>HqN3nub_%k)\fcK;%<ZY\Lhe<8,W"h#p^+AE7uW%uRPG!m$Oals5I)j>sM"[2d0Jh2gg,^f[6@ju4E.[,bp4*Ji_,*,d/4\UN/A;TsrQ!^[-S%R5Et6V]cJ?(tbM]0r9<Ni!CrrNVWkB0\X6q7Zni,;TB-.p39nX0+J#+YTP[/+0lO*R3;],^iRlAEUb8ZB_0ZPU8CL7UJe*d#g#Z)%p-W>IM*_/UL']:@,7)MF#oF<q=;:(:4(DRkeK50pF/+OGJ3dK^ROG/]Afiq0$\_DOqS4L#X-]V)CB/K&D@(\tK9TNIHPf;ACM4un%%uYIaL!iN4F[@X8b_fCTU,QWNX5U:@V4rhjeEoI#&rKc0ODOUP(pum:W+.DS%#p9aB+3cm6t1RdU%FhIfSVp."(HmpFK8nWek!'Q%`IR'k*3s&.)66g*,.'G'h2fr=i@''dWipSNi@O<!bWq3?;^/Z=B&uZ5?MVATo)V/"WtT87_BBES4m(bBU.btd-e-;)jKY`_XB&Q%%>djl-FjIFTaO?@T<a6WkQ;BFFG9dL]NgS,-#4#8bBedfLa?V:T=I:43HpXh6+t@e%;$(+Z)69o!U<I0d2'0V\;EbiHU:k&hd7t;L%cnl6TBBIC$$0l?k^dXeGJN;5/FLqg#4<^7O-O`:+HD(uV+/.E=of'l*V5=f9*\'"0QEq1&>qHuS*3J/c##u`THTiTJ9$Qj1a'srW%9c*q\ofq6[q4UNE.?_&Ag^3;)Mm9jVr>F6i6?n/eO/"?VYV0N]X7>4^UlNG5a&dH.8P"+g@p4'Z,j1nU'd.2A$JIOmh/KJiUpkAB%4jirQKHSNXP!5dG<t,gtOC`86KMLi$,?AT8`X6m&>-&_Ogb5Ym#-6WA;<ks:3a8Dnd_mItWg`J65+)Cc1QokqY]hG"X/IZ:N.J6t%GR`&F\&Q#1T<Pm=!A?<6&(X-9Ffm"/2jF;l\sRK9XNB.dJT]B#:lV`c+e2hAFcV?s#uDQLDsS;\3MqsiC$?W^L_21AKQj<,/VhNn%0?9O_NP2_Bd'_SO2RSfic,#o(`%Z4:@gG(qK8078Acf<4c$>7W@+-WMBkJ'/e]k1uAJsf\11OgB*A!(1M0g?tao9[L*^G-91?gTf%_)WOa"_Z0#:/j?hJ';\9@pTZ@Rq0g[##@43e7Uia8;M$6kpSTe6Ts:")!Yp[*BJpIHt8p#&m^@cb4ICsdN7&6j&9`C#4Ho78c;%o%FcUoN"0##:=$7FeR;.-_0:1d[9BMJOYO#rI:a:*"hUS6B+;C8UWJmWY,$=5#FsWmdb;iNe/[O$,aHFE/0*X=XaWlK!r#+/>\V_t^%=\[A&Y<,I"6G-qK`<rrNM@(KJC%$sa"K;U,3gA/jfB%ia77<.[hE:@F7`<&!bc_*>70S;:L0U`^lIF.9CW%G]G.^sdOr!`s&1XZs%WH5fMJ::Y%NIagIeVR`WVU&"r*Y;X9CB[V@3WPH-@bA:hf@:&>M_UaKNI;r+g+q>G+c;gN=o5UrqTbsa`7gifDVD^!KpH^jNPV>h%pQ?BM\Rb5EB^O,r)Z(LgM%d=gZ#83T8,#?5Oi7Th%$WY4LFLMi\+EbN;+lDU\tqW"C?Yi"L.`N_WHQ%\*iN<>(]r<9=SePIOEPuP%mWF=hB8R_F[[LUbrG(R!9@6Mcs-?b8CU;lO7@7LJ2Y9:#?$Mr_KF>567V_3a82KodW13Vs-Dj!'N\Sl"@R+*DXJ.Zf2Ak?dOe7f8%@"i,;ALA5$d=N)G+te2ILKNpq[KB#/PDVhTOF585`6a)RT(UGYNoXUN3K/O3S=&"B$7J+hQ&0ge`(;7$T'N:V'\gnM_SID!1&+;:%YW".)DOZ40V[6:D<Q:lff\1#83+>*1[Q?Ot%FZ7mIiB^q)uqJf=hHIt;3J3=):PMk&@X3sbrUS5p3U1W^FR<=/I"<\UtN@J#qD*s%PSj_rG#2Hggjjofe3IW'0]-Bi'PRqP!f<eU!h%^/,UWe#X0d\*#/hb[3[%AcBBsU@$^-/cD+UZ:@:L[\Pe<8bG7'(7;BY;65S>dc%WE*RNNZ<G';Jb14n!R$9-8i+2TZ>\Mo,9bpPUL/s.$CYnbo,F]F7@1CFBHhA'ESP4:W"@&D&h_8NI6SjY_6gZ+rp\e7"nSpZ6Qb[%9m!]7/ndM=aGN+pg[5rEniQ69"li?XW62Y0/#hm!:![AC'k;Yce3a[F<>=#t3+"!8X.$HaCp_>_JOCa81]Q3l9!6_`I82M-`>6QS%.nt?CQ3fiO6^6apL4$LqMruqY"?9$>-[M#dkulEj.Q:PSXU(_Y'']ao.kU<K[0e=U+qg;(08H8iZDc:L(m9b"a+8)afqb3eI>3mn%O6Tl;$'LKF0Io+V.J5Bn)TYeijlOR<+rFpV>3aK`9(CJo-Sn*T:EEG.%0I$%R<g!lZ_"3B;LTmt;b0hV>UF+G5Rbg"D)doX2)s<r%Np5',9@AR_"06&[Unl'dl*?rHkcN?MY2\,]8_p\L^2p7"8]njjbdo=4S7SJmm2fT$bX:H#j"gGe-SmXp62&RICPnc/,o&Qu84RVA%_\4$BE!6Kt]J/tad]E8b(ks@Sf['a=-&4CKJIRYA-'r(`of&Np0[55`_!hIg1`X=A2*\;H<pYs_1B%/=#nLi#gf%uQp;Q&3TNH_-%FmEujcEq(rP!]ALQB.n\*R7)a7>*<D@dF6IiKVtg]:R`HYb&P!Yf6p(3%leO!u7._QIU'^2PuDD&\!cS:Y6etJgtjuLQ!_B-,%o#%d?1$:SZlg'W(]dpOBY&?f>k6PU1S@qUa8bdNUCpGX4;u&DtB($JsF=M;jc5&bhtN'dT$<<Wu_O&Io?[jQsHds\k',Im-T4sG/oak%1Ej(!Ff!Y)1(IMkn)l&kIH(t'hTN-tRo[@6f.t\61hH*][<[.BG3Vj]EWE@<?7O:/=cI%?WTT6B<kV=ahMsNm1hFTmj4TjfN*3.S%=CE-2mD\C^P$"BaPB*1t:7"s&oqUZITMDJffo.6$r<G@./-k+>SIq,1a.!C9k+.SH$>-5b1%SjgnTu6]>[!^<IP_VeRuK:1N1Qp5%EcOEnqcWa)S;DACacT#akPg*7V6Lf!e[cF2"2lsiNeLMt`5D:2RiBs0;'i*5BuQf<+!guM*%t@.IOqa8<!k8ei2mJXj!?$d]mihQ%<bF"c&_^$]^")$U/)+0G3G,3;Pi`]scrdDFd!MF.e4!9:Y]e,fH;*@PV(`+-Z5j%19bOEt,r?dq-s3;5F^SA`Lgh+E)1n\g["5%n%fe.Oma/g6%n91[0^.K)=MF/M[.XsdH,t[Ja`I_(O=a3MoeP7@HRGP20$tu*f"]C)L_\:VP:uld.NuO#82@:0,Vpl;\.i_#K:s+Ne%kD0sTbbBbGCKc&1MB$[?9Tr5RB_sfX:c9gl%XLdaN'^R*U8&sir%JS,GB1`0A&IW:3*GO):,L)k1H:R:3#mTMJn(d=(=_A*&tc"j%-Lh'=NcpRCJ5s5&&MrnW;&$tZ?uiL4Oi:9`%R='SN&3E7&G/FQ6IK@ti&$TL[Qm:,A,uuE%rN(A*=mf>3HRZ''?;)i<_*eni.bQk%K5h-3_a%aU//OaY6#-#\#i$1?#]"4<g^Ue/'_,]Jpa+(>]@L^+79"eg3Yu&O,?R6W7`WkYYZYWV\RUpP_.Q6WgcKeTA!W.P(PK*5%@9UtqI\^s\eIN08YoHdVW@F%:j.d>734(#-;]qsL6<FX=cOk624T`#$8M34-^d&-2`rosDN`l3fOG]E/l%sY,:5&_e=]W6dK',7V%`k/c]'cA&i7bjHN8gG*/,JOPc,+IN`\_<^8Q'."E0B65E:8Gh82dXfCce'l)S5m#7&<b8$8*!HX%'7@Z^I?<#1^&<[`aT2MJtqc:%_>+,2<?%;;%3rgt%PdJk6`h,"c![,3hDd2:!P&rB@54(0`N8b[meY"%DBinHe9H,WMQMN**bS,.'?`riP[c:ZlJ>T&#3jL;J=-th%,>lLN$-EmKPb(tu"cWFFO9K8$gQLR9#&AV`>7/=`dB/i%k[ppccr$J?D\aGGR+<RbYUU`6"G;s_-2OmK$SE8fdhi9E]l06J-Ju;\%GY"j#G[0W(C7\*+"%1TJ]kf5<D\SS#lBFdS$VXZc@m@',nMKVFbX8N=XD`2DLnN*\CIP.%Vu_r'PsBBm5]([`>*0ti'*U.6UVf8Y%\Yc(rMcjTL8sS)"2XXVfARH9K,DLjNkF&Uc"S#YMkls..fn+)YK>L9,&J!u/FC9DPNiPW#&'.MJ&.'uKcG]'MLmK#s4P-h`/;9Zh%oO\O/o]2&,MA!o7)=TCr7<t=ONn-/+`sn4f+>.\eUb51[A3:a[4`^0%L/hL\XWQM)#F]L-i.Eh"8K:nT!-@O:,>Jn1(S3F"0,<6e%Qt8"f$A)l"71nm8[I,.<coYNi+^e?4$5:nm8SIl-9EYd(D3jNYml1m<l(4r'R1SFt,o8Np*-;UkP".7Zfp3-eZZP&qhQFLS+e?)>%)l5ZpJJ!(LHCgk^#]#Tt&IfcshJ%RaU'j5F=-?tQ:g#Q`&9.m.g*j-KfPFf]>=C[Z$,SW75*53n9Gie"65Y9J&1Ai#QQu\Z7uLJM%BV_pZaMAKY2OHYC'fIe'/7LT^d8)Ye(mR"Ui!J@<-Tb<DLN+Y$.4#=eASVtHVoZL7:@gj!!Xr6?E\GcGad_ILL`%S:E%G8q+pRI#%;U5d]/;oY/Sm2Y/Oc'f>O(Aqo/%/8j]4YB0=8"VrS&?*(,ud!`b"=*pcPj7B18lbPNYQXa_b!u[O<f]5*+Zc&+>l)A/>LI5L>^Z#%^W*?7[Qrgb-W[PB<6U4sB;dP]2(\Yi"&_%b:+Wm%3Grc?BmtP%FHjh8#of'_R\EtOoH_J_i9%^$!'PEHA@0(b;BqH0GrMr&15o7S%P@1Y+]8NL./11*3i:<[4fhg></lJWAA6HQGGSO*fN_ourU)EDH6NDr6Gs[NoI3i4lO>7QnVRZFfS.qfZd/*1k1PCJ,ROXo,Z:g3j%'`PTn=#3_*C2I",O;fpuUC9g*>9KY(Mrm.&CF'/F6]qpibgBYW\+`4(<`cK&ZA+*tV=09mYb&o4#GONWj3<6;]pWG`XIPUZU*<`M%Z/beR,:93`s-UuY9N_G?Jcm+u+tK&Wb#sJ=-bp$g*j9cr6"g`k<KDtq'CEcMoflkc%P4>ZN2L`P:j,\GO\SiFTfsR3D"0'Xc-]/1%CWt27F_L&c+O_StQ<4U)SK[*7F=gp@dE^e>SYeG'#\_Fn+4dBj/di1^!f8m33A"Np<"C72!^9q/6n>=miL7:_$KiqF=K2e+SIkB:%d-J.1P*>qs`(C/gO^qM=37Xfe(b6=Yb]crX3\<5+'e3tmMU>`Bn$C_I%&T`^8tpQ"mK8Qb(uZj^W(f^HOQ)3EaX;0ub+4.9e4":e%OtH;&U=AaVD(]s"N)`D:&A].32FY#t`Gl0nRl0>Zi&N/S_UQ^Pl67du+>><uXI?*[J<!ba[."VUU5P^FoE6iH+4#R7#gT>"V:G>D%eKGQ*#X.dCe5-KQ%S4r6`0jOA-`SDZgQ9i8c`5H&Ym&o0ipo]@#M;[ueLKV=?4hu;Q`tg62%pST4fMqY>;7)G;^nN.`J9_A#t:"e%1M;Bh-t+U?b?CdX`g!W0j:bO#er%\:qFm-275_<LA(me.7Sf>.$pY/"QqVK?P(HB*7s\:O-Gdm^$J[t#>2p\<K&_Np[#GWuDnME]%2FWod;E6/uHju3Xes9`^Q!$K*m99S0Uqt2DHeA3(]o&JX99XTh0afV]Zsb7eB2$8pMPtcb?*gQjPUhufGm7`Sk!3[b3p(LGRMQ:o%=h0;,J9@kU/8D#A3<7pC!\RWgj=R-.0f<H9mfnG0+EreIP:Ht/#+Mtd/#WKiqaFQlDjo(BXbJPj$%rPda.0j"k;P6K%/&__L/i3O%9WThFQ.s;JpU9ku<a>jXGqE&A$pe[P:`$-dS8GZF?LG%bN@jL!fWc`"=2bdgoOkOsW5rr`8[ga[m:++AQ-OK8Grt5(;OT,5H@W5"%*_!7K,LsKN6&nP[9d,)<$/9lOa.M<Vq7M_iA7Rsc3b#r&$`7O7B9=[O*jNNRkY2f!Ld`dse_DAb-n8\\TgpY1p#=C\@Y'oRGW6pW%0sD_((f6,mY`:/+&IVjCl^*k]1dd7kG_9Y7B4=JALf9Wqp$S:fCF7Fo7`8bD,@WA][>@_TAOeRtH@)uT"u;u:K&7d6>JpR`98L,I%/5S'cRPUWL$XCDMe5_We"nD^#"qI2(Oke`[VV-3:r\?tpE/V%SF2VN1,@WC3(9ue7(Q6pM'!^B>q.1SOaPA^h&I[BM+b"Nk=Q%bD%'A!hSN3Jr&[2?rLdWsJ\6nDs(D\7n+r6Vund+X:XUs'Lh,@J@V%sY>rp"HI,N.Am_>/11[iQT7H=R[6Z\.2W"+cLrjWF>2G<+L1-%VA%2gM?^E-[dD<N_kl6]R<0$$+[%qN@2b_,:U1gs12rjFo5><@5h26iVJ)c^NSMD"!u^XnJ[GLNkc#$heF\';)YlRSLCp2&]^$q=%Mi%@D?ZJW7-_uNr-VS%"b]tO8mLjq#\1]j:LfF7nlWIFpWC@^Zl@Fm2otXaiRKdg&o>l.=\'?1maFfg^9kga:;pPcL7F1B)@B.^)%R6j;95^/\Eb_k!+Xtcn1>`9A1FubE2oD6pr*4'+n8?PQ>WF@;rFuiJY,<(H:V2dSJkCRMA[#8W50dOqs8\n-K"@eUFALcBeLT0&^%h%Nc(O6S*jTm1@#Srqt>%nmdU4(EO=qg-a<#tOYD4-BFCl&u)=T'g7hIOFJmU962<+mW=o:d7/lZKML4L(iS-M`+HCUKI-]-V+o$%m+]*8U$;52_$Ltm6t1^k$LPeNd3?s*oPJ<t>X)QO!?'hcAg$Jml@ISggP\KS_`jPrgrtQhA4IBfHEj@L9WL[sAgSL"Rh'C/(O'0I%@m`%c1aFt&4kDf)4g43(m[XbtL%2K87\!f02,@>82GKS$R\c<3]4j]1)%b5274+t8#gU!rHPWEqL\sJs>%Bdr._aU2fLSM9VKmc>%VO=hr&mNm[1Cr%gE=a57`[)&MLi4CLTbTTE3+LOK7Hp6&$1"#A$.DR([iu5`lOb&%q6i!dA:!,c_<e:^FG]2>BD+g-9cUsRkVK*:%m[Te?l)X5WF+i$FSWN8jXtY0p5^7?qG<soi\4YQ\"kHrpFZ7!<j>+ds9Z+a'"U3K;]6$?PeU!PLK!#Z-6!'H'a#a/7esNht%@XGm%[XM8\00K]l276S)B^X\$66DYfUUI14ic4A-"iVFO[-B7l0^I_/ONWs_>2,'3RSI/8lC#b:X^(tfe?F\^=NNR#NVK-DkboB5(^Fud%SD6oA@ZlCkG;V*5[DO>-pY"A42(/K8F<8^:&uI#XZ,d0X;Glbu;N[/4bVc_G%->eUOhrj+[F#=/7>cKg^r%B#;R1[sTe9i%X?jMb%:i7-1r=8%JkFM-,De[K9M>!W<0S_V2EoWLa"#IE\_2Ote=oY&RLrY0/M%Qm%;iO8G9'!NKI)>tn2gJ0"Sq_)bW@0)PqF;5>7>Q9-%A04`-V3g##_]/8gDWU!*-]Yj((#hX7aE*5ab&dUr"37Y\IaJ9GX-c]&GoOH:$dgA7HLZD"(/WsO&5f/(#b83_:Yg3r8#IftEA%mB%!?Si!8M65iR28@J]JKF-Xa'VuMoC!5*3s:fW`;DN'fj@S#V6N?8$i=R3tpNuJh2s3jqoP<B'n[QGatj/9%7_J^nbDh,cg+Sr?ON\%-%Qt#a3,c):\O=XK$e8/pIMurP(8he)]Rmq$3B5#p_@)3(*4HtE8S'm)&!7+XOh_&,L6OTK$8j[<2E&;+BVm\ngNARR(ujWi:*&F%9ZXJF/NC5U[;fLWmL4k]g[15#5+NfljfFRjn)^;H#o@7tKY>BM&Ljo\N`h6#[<`[C-WR3L#+VlkO3Z`l'KId3%Xth.kW\6c8[5!2%aX`MS@50%&ME"-sJV7LR--H<S_od0cQEj4*P+JDoANb>m+1>B^4.C_#eK]qpTY\14=j#6]b#csr_1qNjg4/0m1Y6M7W"5r#j\dY)%Fb;)t2=9r]CRbYI8nhVpPXuKW.BkAjRl;7rPA7]\4DV>e)[4Ng&t]aWC@$a=a($?h's<d1C7r<P`P`/enXdQ@V3(qRgTa(P\-h#'%4i^;#eS@F/2eF11;X)?(;3_PYq8qYf+NbXKZT\#uR<J++1-m+;Mo3eCr8(nFj-WJ)IJAbc+;\Z$/4jRqLf@q/OQiR.10YuV<juE?%M=VB#AWbOZ+8!C_"<^Q2c8f1c:XbGLmhI2)>@A1Cl\T3&fZqJ5JI!8q'0NF%8NMi<dWAZ3.@&tPPYT;@<CYVl#m&S1Plm.j*0mI=%1qT-<Po^FQ=Aqb:HBrdK+UGLFPVRF:[Z.K_+rJoI87eA:X9o<Mg-f`:5\/nr0kP;,0css0][^U\WWJ$s[(R$PDg`=@L_^3`2a\-*%.Ue*UFWjGBP,;8f)]K`K__S3,+BeQ\b=?pSHS/0tOu(3g=+7aFA:h+7?uJ+mqAhc!Meo*r4Gjsd;]7n@cYEr*lm3$495sd5p?\)V%X"%u_)t:Zs5EDK==mTBFG)]thnK>Yk"YDi3M.9SKH53jeYYE.7XW3'[hQ/D3-?#gXS:U35=Y6p"1$5Y8qWZNa"2M%@P*560ORnN;%QG;_Z<q]rs[,;G6X)ooK>ocr-Q%h^\HQ$s1@6,Kp)&lZDR@)9^f+g&(e`Oq'%C7PEN"kT2oN=p+:6YS+QXWBYSb%HRU'*uDR)[M;%CLFKMBQMm_%JmpC-0ENnll'MjVaXSZH:!];N\^To.Dosto?\As@E'\c[+m%1QK<+VRA=GrO]8pqY%'_SI"'A`"Y:==!^5#8VX'Vf%kBUR13^H&MVOKaR,[#D!-^)HGc&u5Hd;da7Xrq$hceI_J9bUot=f(MZGNe;)&5F`qB#JpGfe1b@&cBWe:.@!232UNQRkljmc<07$%'PQkblATjL7C4AdDnq-UP)/(U]*+pkfSVY"&m\i.2!)8]p5W3,l:HJ?8_GltG0GUCNF$,6MO'W!q(f+?j%oe*\[?1fM#<W3LEet9%6V_\W/O*nN\kP_uST%r3)Be:H@PU:KUu-jm5.b%g]#[VDFOc?"]6:-o\S;mV#//U([qkC+rLZYC1h]bipoYm/#?Z_h[I$nD\G:]p%T.QrO+NnmC-qMUo,P&eblQi[jQG,tVQGVm`%16L>#\15.>Wq1_g]L.=#pq+[<%P%DKe)h0J-E%uZ<f,^L>Xd>>WK34c"%?RJ[V_$%%rN#B8sb)ha^K("b_fp7iat'd+ilSu#IDWVQSr\np-Oa=:cFll/:Y[BpE=WH`Vn1uEp5DAAe9=W&T_'e@Z-FQa^l3G$K+_U[[@1P%V=kK%D::,S8K-S,5\f3>SZni'b^06]'0ZtGPLM;08%0B\HP)tj+ha/$\Yt9JAu=PUUHPs^SZJpAcbsqFOQ,%aKJ2WdjK_bgkZGF%%`jumch8mh2gngr&+B9D;"cB@Wa>*-Ym-/4ngDPp)XcekCK`SRL<>".`KOX/&jja9)&tb</?n$&4fQP8^o=Fg_Vib"!J62'=-+j86%K9KDj,-+iq[[NHpRsfuJo??I.=M$/;E_sm+2FNI;q=9:)FKAYPqP;n4,i=,(;DHGbbXf!.d7Re,%&/gtS+b3:@na@&eGUr"EN@!4%H=pdoKO773']i6;Ni7R`<ORdA-b5eA,%1Wt)G3q2NZn1p!1J#ufHf<L;>0(+q#4^461l7fquRs>rqEo!+H`(04\ePWgEt,fY2lrC%`L>r^6*npdpO(I8%F`&g,l,`2hf2:9bO3B6qC/"E9R+,/NE&?(h@!KYge>Vo]Rc8JDU5r]NI2`9/?J5$DPQ9Lo"O_*NDcJQRZO/'%iHu&-QY\`n7BRJtHLHdLa"Xs9A(0#$g>4W%A-AKV'p6rBd=Da^FC<?4`,0>)\a5PQZ!V?+`n%D/C^?`?P]S!*OWNfdlsf*97'-q;%UZfd<8d@8edMW_-'Nb,+`j9b[`u'O8T<UijA"NS&7N5GQSt"tVj]KJKp]`Ke@pn+#F`Gf4Ye=059NN&o;]nN3ZW#HiQ(,FgBf43C%CNDg:\nQ/t4]n1$.[WqtVMPrMW4<;pc%1gf%]k#S'@p\%b-]VKI`;WtQ$$o?W&CE!fM#lQKoYSg:2AM-#7Y2L\:G+0oFs5Y!Z/<a%UbYN0P;UolP;t9XlOp@9SgDNEOSLbS>?o4gEXkbrNb7`,c4X]I@B=+^VR;%&[EGruS(9C[B54;&<)YHN_U)/%7)pcGRYnpB..-H/%Ni=W!jh!4qlGV.V4(F7j:TaX7&eWMs-E&<2fWf.^\K.^7o;mc%CQ3QD1?`=X6ST(P.7Vf_``]ob-QbaIojVgJ2,8H0hkIB)[YJfp%61\AM0B,_.Z(m%_jE556-+p)lF*$!rALp3lm_]q\dsmn^#u2Ror.Bk315*N[L0bj%du1p2:1AVS'+m0>,1oh`4#&,jeSn=9]^[#3%2SRh03brY(Q9VQ2INW.\#<"Jh?u=q$4HW]g%1c^B5\N6?ZSp[me]sq)\#!^/8\K+Wlo\&#/C(A@T%Bn8\Cu47ckG#k.gn8!3>:^?%0:0;0SO\-B=mc,P`m,*2m/4ZqcF;(\e+F<3SaY4<o;?d+'`1[u;U6oO#R<A#I^cHXI5N=Nh@&dW4Lhc/RLgJF;#N,CE^-=NVZ4?Y%bV))7g03a5XjQk)k5:2t_\]eRI'`e:hiF@7]t-4Rrn^`64o5&^YJ,Makh5+1T>16idD8m[Silu5X'ZqH=FW@+mb+A-IsLnWdD=0/%Gks'9oo[i'r:sRchVS/pmn*41~>%AI9_PrivateDataEnd